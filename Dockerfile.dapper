ARG GOLANG=golang:1.19.5-alpine3.17
FROM ${GOLANG}

ARG http_proxy=$http_proxy
ARG https_proxy=$https_proxy
ARG no_proxy=$no_proxy
ENV http_proxy=$http_proxy
ENV https_proxy=$https_proxy
ENV no_proxy=$no_proxy

RUN apk -U --no-cache add bash git gcc musl-dev docker vim less file curl ca-certificates jq linux-headers \
    zlib-dev tar zip squashfs-tools npm coreutils python3 py3-pip openssl-dev libffi-dev libseccomp libseccomp-dev \
    libseccomp-static make libuv-static sqlite-dev sqlite-static libselinux libselinux-dev zlib-dev zlib-static \
    zstd pigz alpine-sdk binutils-gold btrfs-progs-dev btrfs-progs-static gawk yq gcompat \
    && \
    if [ "$(go env GOARCH)" = "amd64" ]; then \
    apk -U --no-cache add mingw-w64-gcc; \
    fi

RUN python3 -m pip install awscli

ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH

RUN set -ex; \
    GOARCH=$(go env GOARCH); \
    if [ "${GOARCH}" = "arm" ]; then \
        RUST_ARCH=armv7-unknown-linux-gnueabihf; \
        TRIVY_ARCH=ARM; \
    elif [ "${GOARCH}" = "arm64" ]; then \
        RUST_ARCH=aarch64-unknown-linux-musl; \
        TRIVY_ARCH=ARM64; \
    elif [ "${GOARCH}" = "amd64" ]; then \
        RUST_ARCH=x86_64-unknown-linux-musl; \
        TRIVY_ARCH=64Bit; \
    elif [ "${GOARCH}" = "s390x" ]; then \
        RUST_ARCH=s390x-unknown-linux-gnu; \
    fi; \
    if [ -n "${RUST_ARCH}" ]; then \
        curl -sfLO https://static.rust-lang.org/rustup/archive/1.25.1/${RUST_ARCH}/rustup-init; \
        chmod +x ./rustup-init; \
        ldd ./rustup-init || true; \
        ./rustup-init -y --no-modify-path --profile minimal --default-toolchain 1.67.0 --default-host ${RUST_ARCH}; \
        rustup --version; \
        cargo --version; \
        rustc --version; \
    fi; \
    if [ -n "${TRIVY_ARCH}" ]; then \
       curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.25.3/trivy_0.25.3_Linux-${TRIVY_ARCH}.tar.gz | tar -zxvC /usr/local/bin trivy; \
       trivy --version; \
    fi

# this works for both go 1.17 and 1.18
RUN GOPROXY=direct go install golang.org/x/tools/cmd/goimports@gopls/v0.8.2
RUN rm -rf /go/src /go/pkg

RUN if [ "$(go env GOARCH)" = "amd64" ]; then \
    curl -sL https://raw.githubusercontent.com/golangci/golangci-lint/v1.45.2/install.sh | sh -s;  \
    fi

ARG SELINUX=true
ENV SELINUX $SELINUX

ENV DAPPER_RUN_ARGS --privileged -v k3s-cache:/go/src/github.com/k3s-io/k3s/.cache -v trivy-cache:/root/.cache/trivy
ENV DAPPER_ENV REPO TAG DRONE_TAG IMAGE_NAME SKIP_VALIDATE SKIP_AIRGAP AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID GITHUB_TOKEN GOLANG DEBUG
ENV DAPPER_SOURCE /go/src/github.com/k3s-io/k3s/
ENV DAPPER_OUTPUT ./bin ./dist ./build/out ./build/static ./pkg/static ./pkg/deploy

ENV DAPPER_DOCKER_SOCKET true
ENV HOME ${DAPPER_SOURCE}
ENV CROSS true
ENV STATIC_BUILD true
WORKDIR ${DAPPER_SOURCE}

ENTRYPOINT ["./scripts/entry.sh"]
CMD ["ci"]
