// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/traefik.yaml
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8f\xd3\x30\x10\x85\xef\x91\xf2\x1f\xa2\xbd\xac\x84\xe4\xae\x10\x17\x94\x23\x1c\xb8\xaf\x04\xf7\xa9\xfd\xe8\x9a\x3a\x1e\xcb\x33\xce\x02\xbf\x1e\xb9\xd9\x8a\x85\xb4\x25\xa4\x20\xb8\x8d\x9a\xf1\xf7\xde\x3c\xcd\x94\x92\xff\x80\x2c\x9e\x63\xdf\xe5\x2d\xd9\x0d\x15\x7d\xe0\xec\xbf\x92\x7a\x8e\x9b\xfd\x6b\xd9\x78\xbe\x1b\x5f\xb6\xcd\xde\x47\xd7\x77\x6f\x43\x11\x45\xbe\xe7\x80\xb6\x19\xa0\xe4\x48\xa9\x6f\x9b\xae\x8b\x34\xa0\xef\xf6\xaf\xc4\xd8\xc0\xc5\x19\xcb\x51\x33\x87\x80\x6c\x06\x8a\xb4\x43\x6e\x9b\x5c\x02\xa4\x6f\x1b\xd3\x51\xf2\xef\x32\x97\x24\x87\xb7\xa6\xb3\xcc\xd9\xf9\xf8\x5c\xb5\x7e\xc8\x10\x2e\xd9\xe2\xd8\x16\x40\x02\xa9\xf5\x88\xbc\x3d\xfe\xba\x83\x3e\x51\x32\x48\x31\xd5\x25\xb9\x43\x3d\xd7\xba\xb9\x39\x85\xc6\x88\xa8\x33\xf4\x73\x62\x22\xb5\x0f\xeb\xe0\x91\xdd\xdc\xf6\xed\x8b\xdb\xdf\x24\xdc\x89\x92\x96\x19\xe8\xc9\xd8\x52\x94\x20\x8f\xde\xce\xfd\x04\x2f\x7a\x76\xd2\x5a\x3f\xae\xd2\x21\x6b\xb9\x5c\x88\x76\x29\x2e\xd5\x3d\x15\x45\xd4\x91\x43\x19\x2e\xac\xc1\xf7\x41\xae\x70\x8f\xe8\x12\xfb\x5f\xac\xc4\x09\xc9\xc7\x13\x5b\x62\x4c\xdb\x5c\x71\x69\x6f\x7c\x74\x3e\xee\xd6\x1c\x1c\x07\xdc\xe3\xe3\xa1\xff\x38\xf6\x05\xf9\xda\x76\xe2\xce\x97\x69\x49\xd9\x7e\x82\xd5\xe9\xbe\x27\xca\x7b\xa9\x1f\x96\x3d\x9f\xba\x24\x91\xad\xad\x65\x0b\x23\x5f\x44\x31\xfc\xbb\xf8\x4c\x95\x30\x0e\x01\x3b\x52\xfe\xe3\x69\x4e\xe3\xf5\x3f\x8b\xfc\x5f\x31\x5e\x9d\x1f\xa2\x7a\x7b\x80\x9b\x0c\x72\x97\x2d\xae\x0e\xf8\xc7\x64\xf1\x59\x11\xeb\x8c\x86\x92\xaf\xff\x42\xe7\xbd\xfc\xb5\xb4\xbf\x05\x00\x00\xff\xff\x43\xf4\xa6\x6a\x59\x07\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xdb\x38\x12\x7f\x0f\x90\xef\x40\xe8\x90\xb7\x93\x13\x5f\xae\xbd\x1c\xdf\xd2\xd8\x6d\x83\x6b\x5c\xc3\x76\x0a\x14\x87\x43\x30\xa6\xc6\x16\x2f\x14\x87\x47\x52\x4e\x7c\xdd\x7c\xf7\x05\x2d\xc9\xfa\x13\x39\x9b\xb6\xbb\xab\x17\x49\x1c\xce\x6f\xc8\xdf\x0c\x67\x86\x60\xe4\x17\xb4\x4e\x92\xe6\x6c\x33\x3c\x3e\xba\x97\x3a\xe1\x6c\x8e\x76\x23\x05\x5e\x0a\x41\xb9\xf6\xc7\x47\x19\x7a\x48\xc0\x03\x3f\x3e\x62\x4c\x43\x86\x9c\x09\xb2\x98\x68\x57\x0d\x38\x03\x02\x39\xbb\xcf\x97\x18\xbb\xad\xf3\x98\x1d\x1f\xc5\x71\x7c\x7c\xd4\x34\x60\x97\x20\x06\x90\xfb\x94\xac\xfc\x3f\x78\x49\x7a\x70\x7f\xe1\x06\x92\x4e\x6b\xd3\x57\x2a\x77\x1e\xed\x8c\x14\x76\xec\x2a\x58\xa2\x72\xbb\x4f\xb6\x33\x64\x35\x7a\xdc\xa9\x2f\x89\xbc\xf3\x16\x8c\x91\x7a\x5d\xd8\x89\x13\x5c\x41\xae\xbc\xab\x97\x5c\xac\x8b\xef\x57\x6e\x73\x85\x01\x2f\x66\x60\xe4\x07\x4b\xb9\x29\xd0\x63\x16\x45\xe1\x6d\xd1\x51\x6e\x05\x56\xa3\xa8\x13\x43\x52\x17\x90\x31\x73\x05\x49\xe5\x9f\xa1\xa4\xfc\xda\xd3\xb1\xfb\xdf\xa0\x5d\x56\x00\x4a\x3a\x5f\x7c\x3d\x80\x17\x69\x9f\xe5\x44\x3a\x41\x1b\xb4\xdb\x92\x99\x17\xd7\xa1\xe4\xab\x8c\xfc\xa4\x1b\xde\x49\x9d\x48\xbd\xee\x78\x03\xb4\x26\xbf\x53\xae\x5c\xd2\x07\xdb\xf2\x12\xe4\x9e\x72\x93\x80\x47\xce\x22\x6f\x73\x8c\xfe\x18\xb7\x92\xc2\x19\xae\x8a\x55\x96\xf4\xbe\xb0\xe9\x30\xad\x27\xf4\x0e\xa1\xbb\x7c\xf9\x5f\x14\xbe\x88\x9b\xfe\xd3\xf2\x33\x47\xa4\xe1\x01\xd2\x2b\xb9\xbe\x01\xf3\xa3\xc7\x6f\xaf\x71\x45\x16\x57\x52\x21\x67\xbf\x14\x2c\x0f\xf8\x9b\x73\xf6\xad\xf8\x0e\x0f\x5a\x4b\xd6\xd5\xff\x29\x82\xf2\x69\xfd\x6f\x11\x92\x6d\xfd\x5b\x3b\x89\x9d\x7c\xbb\xfa\x74\x3b\x5f\x8c\x67\x77\xa3\xcf\x37\x97\xd7\x93\xa7\x13\x26\x75\x0c\x49\x62\x07\x60\x0d\x30\x69\xde\x16\x1f\x0d\x6b\x6c\x77\x56\x98\xd4\x0e\x45\x6e\xb1\x29\x58\x81\x52\x3e\xb5\x94\xaf\xd3\x7e\x9c\x7a\xf2\x53\x63\xb9\xe4\xbc\x63\xa7\xe8\xc5\x69\x49\xcb\xe9\x84\x12\xfc\xb8\x1b\x6e\x19\xf6\x5e\xb1\xb7\x67\xcd\x11\x8b\x8a\x20\x61\xc3\x37\xee\xc0\x3a\x7a\x2d\x1a\x4b\x19\xfa\x14\x73\xc7\xf8\x3f\x87\x6f\xce\x6b\xc9\x8a\xec\x03\xd8\x84\x0d\x8a\xf5\x84\xa3\xab\x36\x03\x41\x7a\x55\xcf\x11\x20\x52\x64\xe7\x8d\x75\x28\x22\xd3\xa4\x3b\xac\xa9\x29\x85\x64\x09\x0a\xb4\x28\xc9\x7a\xea\x09\x1c\x30\xc6\x35\xce\xef\x08\x8d\xa2\x6d\x86\x3f\x9e\xbd\xbb\x27\xf3\xc2\xc5\x60\x4c\x39\xa9\xd4\xed\x1e\xd8\x02\x3c\x0a\x01\x37\x9a\xcc\xa3\xe3\x23\x67\x50\xec\x00\xfe\x62\xd1\x28\x29\xc0\x71\x36\x0c\xff\xe1\x58\x7b\x5c\x6f\x4b\x74\xbf\x35\xc8\xd9\x8c\x94\x92\x7a\x7d\xbb\xcb\x11\x65\x52\x69\x0e\xf1\x8a\x93\x0c\x1e\x6f\x35\x6c\x40\x2a\x58\x86\xb8\x2e\x20\x51\xa1\xf0\x64\xcb\x59\x59\xc8\x7e\x9f\x9a\x5b\x38\xb0\x09\x8f\x99\x51\x35\x7a\x8b\xad\x1d\xfd\x6d\x8c\x83\x54\xec\xf7\x5a\x44\x88\x24\x2b\xfd\xf6\x4a\x81\x73\x93\x82\x96\x82\xd9\x58\x14\x69\x26\x16\x56\x7a\x29\x40\x45\x95\x8e\x6b\xe5\x91\x49\xd7\x51\x3b\x9e\x48\xa1\x6d\x65\xdd\xf0\xc4\xec\x1e\xb7\x81\xf7\x12\xf1\x32\x49\x48\xbb\xcf\x5a\x6d\xa3\x66\x54\x93\x09\xba\x64\x39\x8b\xc6\x8f\xd2\x79\x17\x3d\x87\xd0\x94\x60\x1c\x32\x68\x27\x77\x0b\xd2\xde\x92\x8a\x8d\x02\x8d\xaf\x46\x65\x0c\x57\x2b\x14\x9e\xb3\x68\x42\x73\x91\x62\x92\x2b\xfc\x0e\xab\x19\x04\xa6\x7e\x27\x73\xc1\xc8\xbc\x1d\x23\xe1\x59\xa2\x87\x8e\x59\x72\x9c\x29\xa9\xf3\xc7\x9a\x76\x43\x8a\xd6\xdb\xb9\x09\xa9\xf0\x8a\x74\x08\xdf\x50\x81\x5b\x4e\xc8\xe0\x71\x7e\x8f\x0f\x65\x38\x56\x4f\xa5\xfb\xaf\xb0\xd3\xb6\x9d\x90\xb8\xc2\x91\x69\x4e\x7f\x48\x51\xdf\x6a\x07\x5e\xba\x95\x2c\xa2\x7b\x44\x13\xf2\xd5\x76\x9a\x73\x77\x91\xd9\xb3\xa5\x43\xe1\xff\x1b\x01\xcc\x58\xf0\x32\x48\x8d\xb6\xd6\x89\x9f\x67\x8c\xe2\x91\x19\xac\x91\xb3\x93\x6f\xf3\xaf\xf3\xc5\xf8\xe6\x6e\x34\x7e\x7f\x79\xfb\x69\x71\x37\x1b\x7f\xb8\x9e\x2f\x66\x5f\x9f\x4e\x2c\x68\x91\xa2\x3d\xcd\x64\xa8\x2f\x98\xc4\x25\x46\xf5\xe6\xc3\xc1\xc5\xe0\xef\x1d\xc4\x69\xae\xd4\x94\x94\x14\x5b\xce\xae\x57\x13\xf2\x53\x8b\x0e\x8b\xb2\x5a\x3c\xed\x76\x68\xcf\x85\xcc\xa4\xef\x6e\x35\xc3\x8c\xec\x96\xb3\xe1\x3f\xce\x6e\x64\x3b\xed\xff\x2f\x47\xf7\x6c\xbe\x30\x39\x67\xc3\xb3\xb3\xac\x1f\xa6\x8d\x02\x76\xed\x38\xfb\x37\x8b\xe2\x90\xde\xa3\xbf\xb2\xa8\x55\x82\xaa\xaa\x1b\xb1\xff\xd4\x3a\x1b\x52\x79\x86\x37\xe1\x7c\xb7\x63\xa7\x22\x39\xd4\xfc\xb8\x98\xd5\x5c\x43\x16\x34\xa6\xe0\x53\xde\xaa\x73\xed\x2d\x41\x12\x8e\x3c\x67\xa1\xb5\x6a\xd4\x2a\xb2\x1d\x5b\x7b\x2f\x4f\xc9\x7a\xce\x9a\xe5\xab\xaa\x0f\x1d\x6c\x63\xc9\x93\x20\xc5\xd9\xed\x68\xfa\xfd\x50\xb1\x17\xa6\x1f\x6e\x71\xf5\x12\x5c\xbb\xb4\x56\x80\x19\x7a\x2b\xc5\x81\xf5\xb5\x00\x77\x0d\x46\x48\xc2\xa4\x3d\x3e\xfa\x96\xb3\x41\x29\x7a\x98\x5a\xb9\x91\x0a\xd7\x38\x76\x02\xd4\x2e\xaf\xf2\x50\xfc\x5d\x8b\x7c\x01\x06\x96\x52\x49\x2f\xb1\x1b\x30\x90\x24\x9d\x91\x98\x4d\xc6\x8b\xbb\x77\xd7\x93\xd1\xdd\x7c\x3c\xfb\x72\x7d\x35\x6e\xcb\x13\x4b\xe6\x99\x0a\x28\xd5\xe7\xca\x19\x91\x7f\x2f\x15\x96\x3d\x68\xc7\xb1\x4a\x6e\x50\xa3\x73\x53\x4b\x4b\x6c\x41\xa6\xde\x9b\x0f\xe8\x3b\x66\x4c\x11\x3e\xdd\xe6\x8e\x95\x31\xc2\xd9\xc5\xd9\xc5\x59\x7b\xdc\x89\x14\x03\xe5\x1f\x17\x8b\x69\x53\x22\xb5\xf4\x12\xd4\x08\x15\x6c\xe7\x28\x48\x27\x8e\x77\x1a\x2b\x83\x56\x52\xb2\x17\x0e\x5b\x42\x2f\x33\xa4\xdc\xd7\xd2\xa6\xd0\xe5\x42\xa0\x73\x8b\xd4\xa2\x4b\x49\x25\x1d\xf1\x0a\xa4\xca\x2d\x36\xc4\xe7\xed\x4e\x55\xfe\x00\x29\x9d\x0e\xb7\xc1\xc9\xf0\x62\xf8\x13\x9c\xbc\x44\xc9\xdf\xfe\x04\x46\x12\xed\xaa\x64\x3a\x2a\x2e\x4e\x95\xa4\xc8\x31\xdf\x95\x84\x44\x75\x23\xe9\x70\x78\xa0\x40\xec\x48\xf1\x98\x75\xcf\x4c\x59\xf4\xab\xfc\xd8\x2d\x4e\x85\x47\xfa\xa5\xa5\xea\xbe\xbb\xef\xd7\x6d\x88\x5f\xb8\x5f\x95\xb7\xb6\xde\xf6\xb8\x59\x17\x0f\xf7\xc7\xcf\xaf\xc0\xf5\xbd\x20\x94\xf7\x22\x82\xa2\x90\xc5\xa2\x3e\xb9\x13\x16\xcc\x0b\x77\xe1\xd7\x74\xdc\x55\x33\x59\xf6\x8e\x4d\xb0\xd7\x37\xe7\x9d\xce\xb9\xd7\x70\x69\xe8\x7a\xca\x9b\x97\xbe\xc9\xfc\xe9\x24\x48\xeb\x22\x13\x77\x2b\x88\x69\x55\x86\x67\x95\x24\xee\x2b\x13\x87\x74\xca\xec\x1e\xf7\x55\x02\xd3\x29\x19\x1d\xad\x5f\x03\x00\x00\xff\xff\xcd\xfc\xf5\xc0\xe9\x12\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcd\x6e\x1b\x37\x10\xbe\x0b\xd0\x3b\xb0\xdb\xf8\xd0\x22\x5c\xd9\xe9\xc1\x05\x83\x1e\x14\x4b\x76\x0d\x58\x3f\x90\xd4\x16\x41\x50\x08\x14\x77\x24\x31\xe6\x1f\x48\xae\x12\xc5\xf5\xbb\x17\x5c\xee\x46\xbb\x8a\x6c\x59\x68\x7b\x2b\x2f\xd2\x92\x33\xdf\x0c\x67\xbe\x99\x21\x35\xfc\x77\xb0\x8e\x6b\x45\xd0\xe6\xa2\xdd\xba\xe7\x2a\x23\x68\x0a\x76\xc3\x19\x74\x19\xd3\xb9\xf2\xed\x96\x04\x4f\x33\xea\x29\x69\xb7\x10\x52\x54\x02\x41\x42\x33\x2a\xb0\xa1\x7e\x8d\x8d\xd5\x1b\x1e\x20\xc0\x62\x17\x35\x31\xad\x54\xa3\xbc\x33\x94\x01\x41\xf7\xf9\x02\xb0\xdb\x3a\x0f\xb2\xdd\xc2\x18\xb7\x5b\x75\xfb\x76\x41\x59\x4a\x73\xbf\xd6\x96\x7f\xa1\x9e\x6b\x95\xde\xff\xec\x52\xae\x3b\x3b\xcf\xae\x44\xee\x3c\xd8\x89\x16\x70\x8a\x5b\xb6\x90\xb7\xb9\x00\x47\xda\x2d\x8c\xa8\xe1\x37\x56\xe7\xc6\x11\xf4\x21\x49\xfe\x0c\xfa\x16\x9c\xce\x2d\x83\x62\x4b\xe9\x0c\x5c\xf2\x1a\x25\x26\x38\xe7\x3c\x28\xbf\xd1\x22\x97\xc0\x04\xe5\xb2\x38\x61\x5a\x2d\xf9\x4a\x52\xe3\xa2\xfe\x06\xec\xa2\xd0\x5d\x81\x0f\xe7\x82\xbb\xe2\xf7\x13\xf5\x6c\x1d\x44\x8e\x5b\x05\x95\x19\xcd\x95\x3f\x68\x39\x6e\xea\x6c\xdf\xdc\x8f\x2f\xc4\xde\x40\x00\x6e\xea\x32\x0b\xd4\x43\x01\xfc\x84\x97\xce\x6b\x4b\x57\x50\x26\xe2\x00\x6e\x29\xc0\x04\x75\x0e\x5e\x1c\x8a\x7f\x98\xfa\x77\x5c\x65\x5c\xad\x4e\x61\xc0\x82\xab\xac\xdd\x0a\x3c\x98\xc0\xb2\x10\xaf\xee\xf9\x8c\xf5\x20\x76\x80\x77\x2f\x22\x9b\xcb\x17\x1f\x81\xf9\xc8\xb7\xc3\x65\xf5\x1f\xd6\x12\x35\xc6\xd5\x62\xd7\x03\x23\xf4\x56\xc2\x49\xc5\xfc\x9c\x41\x67\x80\x91\x48\x06\x23\x38\xa3\x8e\xa0\x8b\xf0\xe9\x40\x00\xf3\xda\x16\x67\x08\xc9\x90\xf1\x3b\xba\x00\xe1\xca\x9d\x10\x77\xf3\x9c\x45\x0f\xd2\x08\xea\xa1\x42\xa8\x7b\x1b\x96\x68\xa2\x1d\xc5\x43\xe8\xab\xaf\x61\x19\xcb\xb5\xe5\x7e\x7b\x15\x08\x3b\x2c\x6e\x9f\xc4\x4b\xe1\x50\xf4\x98\x59\xee\x39\xa3\x22\xa9\x14\x5c\x23\x69\xc3\x13\x13\x16\x96\xd7\x02\x6c\x41\xab\xba\xdb\x08\x61\x74\x0f\x5b\x82\x92\xab\xd2\x64\x37\xcb\xb4\x72\x23\x25\xb6\x49\x5d\x0c\x21\x6d\x82\xbe\xb6\x04\x25\xfd\xcf\xdc\x79\x97\x1c\x82\x29\xdc\x0f\xdc\x4b\x43\xa6\xac\x02\x0f\x45\x05\x31\xad\xbc\xd5\x02\x1b\x41\x15\x9c\x84\x8c\x10\x2c\x97\xc0\x3c\x41\xc9\x50\x4f\xd9\x1a\xb2\x5c\xc0\x49\xb6\x25\x0d\x55\xf3\x2f\x1a\x0d\x97\xa1\x5c\x81\xdd\x85\x12\x1f\x25\x71\x5c\x5c\xd2\x15\x10\x74\xf6\x30\x7d\x3f\x9d\xf5\x07\xf3\x5e\xff\xba\xfb\xdb\xdd\x6c\x3e\xe9\xdf\xdc\x4e\x67\x93\xf7\x8f\x67\x96\x2a\xb6\x06\xdb\x39\x8c\x44\x36\xe7\xe9\x79\xfa\xe6\x7c\x0f\x71\x9c\x0b\x31\xd6\x82\xb3\x2d\x41\xb7\xcb\xa1\xf6\x63\x0b\x0e\x76\xd9\x0f\x3e\x4b\x49\x55\x56\xcb\x3d\x3e\xea\x2c\x46\xce\x53\xeb\xeb\x1b\x18\xc7\x91\x53\xdf\xeb\x80\x67\x9d\xb8\x5d\xfe\xa4\x1f\x9d\x56\x3b\x91\x38\x3b\x06\x81\x8e\xae\xe1\x40\x8c\x59\xd4\xc1\x51\xaa\x9e\x05\x19\x34\xc6\xd4\xaf\x49\xc3\xc6\x4e\x04\xd4\xe6\x00\xde\x78\xd4\x9b\x0f\xbb\x83\xfe\x74\xdc\xbd\xea\xd7\xf1\x36\x54\xe4\x70\x6d\xb5\x24\xcd\x5c\x2f\x39\x88\xac\xea\xc8\xdf\x1c\x44\x07\xaa\x16\x90\x7e\x6d\x46\x95\x70\x39\x19\x4f\xb9\x58\x3c\x18\x50\xb3\x67\xf1\x1b\x0e\x55\xc1\xfe\xa6\xb5\x36\x47\x62\xad\xc9\x4e\xe3\x41\xd1\x59\x8e\xb4\xd9\x62\xfe\x28\xa5\x7d\xa3\x2d\xd4\x67\xe9\x5e\x21\x71\x87\x33\x58\xd2\x5c\x78\x5c\x1c\x13\x94\x78\x9b\x87\xba\xa8\x33\x14\x95\x0c\x0e\x1a\x75\x63\x31\x0c\xe5\xd4\x1c\xe8\x0c\x08\xfa\x83\x72\x7f\xad\xed\x35\xb7\xce\x5f\x69\xe5\x72\x19\xe8\x67\xe3\x03\xa7\xe2\x73\x0f\x04\x78\x28\x63\x50\x0e\xc2\x2a\x7e\xcd\xa0\x84\x28\x3c\x3f\x58\x76\xe4\x7d\x6a\xa6\x7c\xd5\xad\x31\x99\xa0\xbf\x70\x0c\xce\x43\x95\xaf\xa2\xd9\x04\x66\x0c\xa8\x49\xc8\x87\x6a\xfb\x61\x97\xcf\x42\x22\x21\x49\x55\xe1\xe3\xee\xec\xd7\xf9\xf5\x68\x32\x1f\x8e\x86\xf3\xbb\xdb\xe9\xac\xdf\x9b\x0f\x47\xbd\xfe\x34\x79\x5d\x53\x0a\x5e\xba\x84\x7c\x48\xce\x1e\x2a\xc5\xbb\xd1\x55\xf7\x6e\x3e\x9d\x8d\x26\xdd\x9b\x7e\x01\xf3\x78\x16\x9f\x38\x61\x3d\x56\x7f\xca\x9d\xc7\x38\x00\x7d\x78\x52\x54\x5e\x7f\xff\x5d\x67\xc1\x55\xc7\xad\xe3\xe7\xa7\x35\x17\x80\x56\xe0\xb5\xf1\x0e\x25\x92\x38\x62\x48\x82\xb4\x29\x2b\x3d\xd3\xb5\xb6\x41\x1d\xa0\x57\xda\x78\xc4\x55\x93\xab\xe6\x87\xe6\x37\x5d\x38\x2d\x72\x5f\x04\xe5\x97\x57\xa3\xf1\xac\x3b\xb9\x69\x4a\xbc\x7d\xdb\xfc\x76\x7b\x08\x8e\x7f\x81\x5b\xf5\x6e\xeb\xc1\xbd\x0c\x40\xee\x01\x6c\xb4\x08\xbc\x3a\xae\x0c\x8e\xb2\xea\xae\xaa\xac\x4c\x79\x9f\x71\x8b\xb0\x44\xe7\x97\x97\x97\x08\x1b\xf4\xea\xa1\x7e\xa5\x32\xce\x6c\x2d\x75\x86\x2e\xcf\x2f\xf6\x8f\x3b\x69\x1a\x1f\x0e\xd4\x66\xfa\x93\xfa\x3f\xf8\x27\x05\xdf\x4a\x84\xed\xf2\x50\xc8\xd7\x20\x0c\xd8\xb1\xce\xd2\x2d\x95\x62\x17\xd6\xfd\xba\x0f\x7b\xb1\x39\x8c\x75\xf6\xc4\xab\x2d\xb6\x83\x88\x88\x4d\x25\xd6\x78\x99\x3d\x33\xda\xf7\xf5\xd0\x49\xe3\x5c\x72\x6b\xb5\x85\x0c\x0b\xbe\xb0\xd4\x6e\xf1\x22\x77\xdb\x85\xfe\x4c\x2e\xd2\x9f\xde\xa4\x17\xed\xd6\xdf\x01\x00\x00\xff\xff\x67\x05\x7e\xe4\x05\x0f\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xb1\x4e\xc4\x30\x10\x44\xfb\x48\xf9\x07\xcb\x35\x09\xa2\x43\x6e\x29\xe8\x29\x68\x10\xc5\x26\x1e\xe5\x56\xe7\xd8\xd1\xee\x3a\x27\xf8\x7a\xe4\x70\x82\x0e\x89\xab\x5c\xcc\x7b\x33\xde\x33\xe7\x18\xdc\x53\xaa\x6a\x90\x97\x92\xd0\x77\xb4\xf1\x2b\x44\xb9\xe4\xe0\x64\xa2\x79\xa4\x6a\xa7\x22\xfc\x49\xc6\x25\x8f\xe7\x47\x1d\xb9\xdc\xef\x0f\x7d\xb7\xc2\x28\x92\x51\xe8\x3b\xe7\x32\xad\x08\x4e\x3f\xd4\xb0\x06\x5a\x16\xc1\x42\x86\x38\xac\x30\xe1\x59\x07\x01\x45\x48\x23\x13\x4d\x48\x7a\x48\xee\x8f\x85\x9f\x8e\xc1\xca\xb0\x33\x2e\xc1\x79\x93\x0a\xff\x2f\x11\x91\xed\x26\x91\xe2\xca\xf9\xd7\x94\x9a\xd0\xfe\x3c\x38\xda\xf8\x59\x4a\xdd\x34\xb8\x37\x7f\xbd\xee\xda\xe0\xdf\xdb\x84\x40\x4b\x95\x19\x07\xb0\x95\xa8\xfe\xce\xf9\x5c\x22\xf4\x3b\xdf\x21\xd3\x91\x2d\xb0\x16\x25\xd6\xe3\xbd\x90\xcd\xa7\x86\x7c\x05\x00\x00\xff\xff\xcc\xae\x09\x9c\x95\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbd\x4e\xc5\x30\x0c\x46\xf7\x48\x79\x87\xbc\x40\x8a\xd8\x50\x36\x60\x60\xbf\x48\xec\x6e\xfa\x71\x31\x6d\xe3\xca\x76\x2a\xc1\xd3\xa3\xcb\x8f\x18\x50\x59\x2d\x9f\xef\x9c\x9c\x73\x0c\xb4\xf1\x13\xd4\x58\x5a\x49\x3a\x52\x1d\xa8\xfb\x8b\x28\xbf\x93\xb3\xb4\x61\xbe\xb1\x81\xe5\x6a\xbf\x8e\x61\xe6\x36\x95\x74\xbf\x74\x73\xe8\x49\x16\xdc\x71\x9b\xb8\x9d\x63\x58\xe1\x34\x91\x53\x89\x21\xa5\x46\x2b\x4a\x5a\xe1\xca\xd5\xb2\x41\x77\x68\xb1\x37\x73\xac\xe5\xb2\x9d\x27\x2c\x38\x93\x8b\xc6\xa0\xb2\xe0\x84\xe7\x4f\x8e\x36\x7e\x50\xe9\xdb\x3f\x19\x97\xb7\x3f\x15\xbf\xce\x03\x89\xf5\xf1\x15\xd5\xad\xc4\x90\xbf\xf1\x47\xe8\xce\x15\xb7\xb5\x4a\x6f\x7e\x54\xfd\x73\xb7\x8d\x2a\x4a\x9a\xfb\x88\xfc\xe5\x88\xe1\x23\x00\x00\xff\xff\xe2\x12\x9f\x9d\x3c\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x31\x4e\xc4\x30\x10\x45\x7b\x4b\xbe\x83\x2f\xe0\x20\x3a\xe4\x0e\x1a\xfa\x45\xa2\x9f\x38\x1f\x18\xb2\x19\x47\x33\xe3\x08\x38\x3d\xca\x0a\x58\x9a\xdd\xfe\xeb\xfd\xf7\x72\xce\x31\xd0\xca\xcf\x50\xe3\x26\x25\xe9\x48\x75\xa0\xee\x6f\x4d\xf9\x8b\x9c\x9b\x0c\xf3\x9d\x0d\xdc\x6e\xb6\xdb\x18\x66\x96\xa9\xa4\x43\x3b\xe2\x81\x65\x62\x79\x8d\x61\x81\xd3\x44\x4e\x25\x86\x94\x84\x16\x94\xb4\xc0\x95\xab\x65\x83\x6e\xd0\xbc\xd3\xb2\x82\x26\xe8\xef\xc6\x56\xaa\x28\x69\xee\x23\xb2\x7d\x9a\x63\x89\x41\xdb\x11\x07\xbc\x9c\x38\xb4\xf2\xa3\xb6\xbe\x5e\xf1\xd9\x67\x67\x9d\xf3\x39\x3e\x1c\xb2\xb7\x64\x5a\xf9\x9f\x01\xc4\xb9\x9e\x00\x7f\x2e\xd6\xc7\x77\x54\xb7\x12\x43\xfe\x61\x3d\x41\x37\xae\xb8\xaf\xb5\x75\xf1\x4b\x49\xd7\x32\xbe\x03\x00\x00\xff\xff\xfc\x9c\x48\x10\x52\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x4d\x6a\xc3\x30\x10\x85\xf7\x02\xdd\x61\x2e\xa0\x34\xde\x15\xed\xba\x2c\xb4\x10\x70\xc9\x7e\xa2\x4c\xc3\x60\xf4\xc3\xcc\xc8\xe0\xdb\x17\xa7\xb6\xdb\x9d\x78\xdf\xfb\x9e\xa4\x10\x82\x77\xd8\xf8\x4a\xa2\x5c\x4b\x04\x6c\x2c\xf4\x60\x35\x41\xe3\x5a\x4e\xd3\xab\x9e\xb8\xbe\xcc\x83\x77\x13\x97\x7b\x84\xb7\xcb\xfb\x48\x32\x73\x22\xef\x32\x19\xde\xd1\x30\x7a\x07\x50\x30\x53\x84\x79\xb8\x91\xe1\x70\xca\x64\xc2\x49\x37\xdf\x3b\x6d\x94\x9e\x35\xfd\x95\x9f\xe7\x5d\xda\xca\x61\x65\x24\x7f\x44\x1b\x26\x8a\x30\xf5\x1b\x05\x5d\xd4\x28\xaf\xec\x21\xb5\xb7\x43\x3a\x6e\x00\x98\xf7\x4f\x6c\x8f\x58\x33\x2e\x4a\xa9\x0b\x8d\x13\xb7\xaf\x8f\xf1\x4a\xc2\xdf\x4b\x04\x93\x4e\xc7\xd6\x45\xb8\x0a\xdb\xf2\xc9\x85\x73\xcf\x11\x86\xf3\xf9\xdf\xde\x8e\xb7\xfc\x27\x00\x00\xff\xff\xb4\x6d\x60\xf5\x33\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x5f\x6b\x13\x51\x10\xc5\xdf\x17\xf6\x3b\x0c\x2b\x25\x2f\xde\xa4\x3e\x08\x72\xdf\x4a\x13\x45\x68\xa3\x34\x51\x28\x22\x65\x7a\x77\xd2\x5c\x72\xff\x31\x73\x13\x5d\x4a\xbf\xbb\x6c\xfe\xb8\x89\xb1\x41\xd1\x79\x5c\xe6\xfc\xce\xd9\x73\x47\x29\x55\x16\x98\xec\x67\x62\xb1\x31\x68\x58\xbd\x2a\x8b\x85\x0d\xb5\x86\x09\xf1\xca\x1a\xba\x30\x26\x2e\x43\x2e\x0b\x4f\x19\x6b\xcc\xa8\xcb\x02\x20\xa0\x27\x0d\x9e\x32\x5b\x23\x4a\x88\x57\xc4\xbb\xef\x92\xd0\x90\x86\xc5\xf2\x9e\x94\x34\x92\xc9\x97\xc5\x91\x0f\xa6\x24\x83\xce\x6c\x48\xc9\xc5\xc6\xd3\x3f\x1b\x01\x38\xbc\x27\x27\x6b\x31\xc0\xe2\x8d\x28\x4c\xe9\x98\x20\x89\xcc\x7a\x47\xc8\x91\xc9\x91\xb7\x02\x8f\xd9\xcc\xaf\xf6\x11\x27\x20\x00\x99\x7c\x72\x98\x69\xa7\xde\x8f\xde\xce\x73\xf1\xdb\x71\x87\x2e\x27\x7d\x00\x7e\x06\x6e\x27\xb1\x8d\x6c\x73\x73\xe9\x50\x64\xbc\xf6\xa8\x36\x0d\xa8\x10\x6b\x52\x86\x6d\xb6\x06\x5d\xb5\x13\xc8\xc1\x63\x8e\x4f\xa4\xca\xd1\x11\x63\xb6\x31\xec\x47\x53\xb0\xa0\x46\x43\x75\xb9\x05\x5f\xd4\x75\x0c\xf2\x21\xb8\xa6\xea\x96\x00\x62\x6a\xb5\x91\x35\x54\xa3\xef\x56\xb2\x54\xc7\x88\x75\x40\x8e\x8e\xfa\xed\xc3\x71\xa0\x4c\xd2\xb7\x71\x60\x62\xc8\x1c\x9d\x4a\x0e\x03\xfd\x31\x15\x80\x66\x33\x32\x59\x43\x35\x8e\x13\x33\xa7\x7a\xe9\xe8\x2f\x5c\x3d\x4a\x26\xfe\x4f\x76\xab\xe8\x96\x9e\xba\xde\x5e\x80\x6f\xeb\x06\x1b\x20\xfb\x04\x12\xe1\x1b\x81\xc1\x00\x82\x33\x72\x0d\x2c\x85\x60\xc6\xd1\x2b\x31\xdc\xde\x1d\x58\x8f\x0f\x24\x80\xa1\x1e\x44\x06\x26\xac\x55\x0c\xae\x81\xb6\x1b\xb4\x81\x58\x76\x68\xb5\x3d\xad\xec\x93\xaa\x2d\x77\x09\xc9\xa7\xdc\x0c\x2d\x6b\x78\x7c\xda\x7d\xed\xe4\xfa\x57\xfd\xef\x8f\x00\x36\x49\x34\x9c\x3d\x4e\x6e\x27\xd3\xd1\xf5\xdd\x70\xf4\xf6\xe2\xd3\xd5\xf4\xee\x66\xf4\xee\xfd\x64\x7a\x73\xfb\x74\xc6\x18\xcc\x9c\x78\xe0\x2d\x73\x64\xaa\xd5\x21\x4a\xaf\xce\xfb\xaf\xfb\xe7\x1d\x11\xf9\x41\x34\x7c\xe9\x29\x65\x88\x73\x1b\xba\xf7\x12\x7a\x83\xec\x53\xef\x6b\xb7\xb5\xa9\xf0\xba\xad\xed\xf0\xfe\x9e\xf9\x5d\xd8\x54\xfc\x11\xf3\x5c\x43\x0b\x2b\x8b\xb2\xf8\x11\x00\x00\xff\xff\x9d\x32\xc6\xcf\xd6\x04\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x4b\x43\x31\x10\x84\xef\x81\xfc\x87\xe5\xdd\xa3\x88\x3d\x48\xae\x9e\x85\x82\xe2\x7d\x9b\x0e\x12\x9a\x97\x84\xdd\x7d\x0f\xfc\xf7\xd2\x84\x22\x85\xde\x96\x9d\x99\x6f\x26\x84\xe0\x1d\xf7\xfc\x0d\xd1\xdc\x6a\xa4\xfd\xc5\xbb\x4b\xae\xe7\x48\x9f\x90\x3d\x27\x78\xb7\xc2\xf8\xcc\xc6\xd1\x3b\xa2\xca\x2b\x22\xad\x30\xc9\x49\x83\x42\x76\xc8\xed\xaf\x9d\x13\x22\x5d\xb6\x13\x82\xfe\xaa\x61\xbd\x2a\x85\x4f\x28\x3a\xc2\x34\x34\xa9\x30\xe8\x53\x6e\xcf\x13\xb6\x7c\xdc\xd1\x96\x47\xce\x54\x36\x35\xc8\xb0\xe4\x6b\xc9\x62\xb2\x61\xf1\x4e\x3b\xd2\x60\x2b\x0a\x92\x35\xb9\x15\xbd\x69\xe0\xde\x1f\x4d\xed\x4d\x6c\xee\x09\xe3\x8e\x74\x38\xbc\xce\x54\x97\x66\x2d\xb5\x12\xe9\xeb\xfd\x38\x5f\xc6\xf2\x03\x3b\xfe\xfb\xfe\x02\x00\x00\xff\xff\xdc\xe7\x90\x61\x33\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x4b\x03\x31\x10\x85\xef\x81\xfc\x87\xd0\x7b\x5a\xbc\x49\x6e\xea\xc1\x7b\x05\xef\xb3\xd9\xb1\x1d\x77\x37\xb3\xcc\x4c\x56\xf4\xd7\x4b\x1b\x97\x8a\x88\x22\x9e\xf2\x18\xde\x97\xc7\x7b\x31\x46\xef\x60\xa6\x47\x14\x25\x2e\x29\x48\x07\x79\x0b\xd5\x8e\x2c\xf4\x06\x46\x5c\xb6\xc3\xb5\x6e\x89\x77\xcb\x95\x77\x03\x95\x3e\x85\xbb\xb1\xaa\xa1\xec\x79\x44\xef\x26\x34\xe8\xc1\x20\x79\x17\x42\x81\x09\x53\xd0\x57\x35\x9c\xd2\x84\x26\x94\x35\x2a\xca\x82\xe2\x9d\xd4\x11\x35\x79\x17\x03\xcc\x74\x2f\x5c\x67\x3d\x43\x31\x6c\x36\xa7\x57\x50\xb9\x4a\xc6\xf5\x3a\x73\xaf\x4d\x15\xee\xf1\xb3\xdc\xa9\x81\xad\x07\x98\x50\x67\xc8\xcd\xb0\xa0\x74\x2b\x7f\x40\x6b\x62\x24\xfd\x50\x2f\x60\xf9\xe8\xdd\x7f\x5b\xdf\x52\xe9\xa9\x1c\xfe\x54\x9e\x47\xdc\xe3\xd3\xd9\xb8\xd6\xff\x21\xf7\x64\xfb\x66\xec\x5f\x42\xb4\x76\xcf\x98\xad\x8d\xdc\xf0\x07\x94\x85\x32\xde\xe4\xcc\xb5\xd8\xe5\x87\xaf\x68\xb8\x0c\x99\xc2\x50\x3b\x8c\x2d\xc3\xbb\xf7\x00\x00\x00\xff\xff\x4a\x2c\x1d\xe9\x23\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x41\x4f\xe3\x30\x10\x85\xef\x96\xfc\x1f\xa2\xde\xdd\xd5\x6a\x2f\xab\x1c\xe1\xc0\xbd\x12\xdc\x27\xc9\xd0\x0e\x71\x3c\xd6\xcc\xa4\x15\xfc\x7a\x94\x96\x40\x69\xd3\x42\xa9\x38\xc5\xb6\x26\xef\xd3\x7b\xa3\x07\x99\x1e\x50\x94\x38\x95\x85\x54\x50\xcf\xa1\xb7\x15\x0b\xbd\x80\x11\xa7\x79\xfb\x5f\xe7\xc4\x7f\xd6\x7f\xbd\x6b\x29\x35\x65\x71\x1b\x7b\x35\x94\x05\x47\xbc\xa1\xd4\x50\x5a\x7a\xd7\xa1\x41\x03\x06\xa5\x77\x45\x91\xa0\xc3\xb2\x68\xfb\x0a\x03\x64\x52\x94\x35\x4a\x18\xae\x11\x2d\x40\xd3\x51\xf2\x4e\x38\xe2\x02\x1f\xb7\xf3\x90\xe9\x4e\xb8\xcf\x67\xf0\xc3\xd8\x11\xfd\x83\xa5\xcf\x6a\xd8\x95\xef\x8c\x4c\x23\x47\xfb\xea\x09\x6b\xd3\xd2\xbb\x70\x19\xe8\x5e\x51\x4e\xb9\xf1\xce\xbb\x10\x82\x77\x57\x64\x37\x19\xda\x68\xe4\x9f\x86\x9a\x93\x09\xc7\x38\xd0\xa4\x8f\xf8\xd9\x82\x6e\x7f\x0a\xc5\x6c\x36\x7c\x05\x95\x7b\xa9\x71\x7c\x4d\xdc\xa0\x0e\xc7\x35\x4a\x35\x3e\x2e\xd1\x2e\x50\x80\x0e\x35\x43\x7d\x2c\x13\x49\x6d\x77\xda\x80\xd5\xab\x49\xc9\x84\xb6\x61\x69\x29\x2d\xdf\x22\x98\x66\xec\xa6\x32\x47\xaa\xe9\x67\xa0\x49\x5d\x4c\x4d\x66\x4a\xa6\xbb\x6b\xe6\xe6\x8c\xf6\x36\x95\x3d\xc8\xf5\x8b\x3d\x57\x8a\x53\xfb\xfd\x95\x36\x1c\x40\xf6\xaa\x30\xf8\xfd\x26\xe7\xb0\x0e\x5f\x40\x5e\x03\x00\x00\xff\xff\x6e\x1e\xfe\x7d\x4d\x04\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x6f\xd3\x4e\x10\xc5\xef\x91\xf2\x1d\x56\x96\x72\x5c\xbb\xfd\xff\x2f\xd5\xde\x42\x6a\xa0\x02\x0a\x8a\x53\x50\x4f\xd1\x7a\x77\x12\xaf\xb2\xde\xb5\x66\xc6\x81\x50\xfa\xdd\xd1\x26\x26\x49\x25\x50\x11\x82\xa3\x47\x33\xbf\xf7\xfc\xde\x4a\x29\xc7\x23\xdd\xb9\x8f\x80\xe4\x62\x50\xa2\x01\xdf\xe6\x46\x33\x7b\xc8\x5d\x2c\xb6\x97\xe3\xd1\xc6\x05\xab\xc4\x6b\xf0\xed\xac\xd1\xc8\xe3\x51\x0b\xac\xad\x66\xad\xc6\x23\x21\x82\x6e\x41\x09\x46\x0d\x2b\xb7\x91\x06\xed\x8f\x21\x75\xda\x80\x12\x9b\xbe\x06\x49\x3b\x62\x68\xc7\x23\xea\xc0\xec\xaf\x4c\x22\x29\xd1\x30\x77\xa4\x8a\x62\xf2\xf0\xe6\xee\x45\x39\xbf\x2d\x17\x65\xb5\x9c\x7e\xb8\x79\x9c\x14\xc4\x9a\x9d\x29\xf6\x8b\x54\x9c\xf1\xe5\xe5\x45\xfe\x7f\x7e\x91\xf3\xfa\xeb\x78\xf4\x97\xfd\xff\x53\xef\xe7\xbe\x85\x20\xe0\x3d\x4d\x88\xb5\x8f\xb5\xf6\xf9\x41\xe7\x1a\x56\xba\xf7\x3c\x87\xb5\x23\xc6\x9d\x12\xd9\xe4\xa1\xba\xaf\x16\xe5\xbb\xe5\x75\xf9\x72\x7a\xf7\x76\xb1\x9c\x97\xaf\x6e\xaa\xc5\xfc\x7e\x39\x9f\x7e\x7a\x9c\x64\x09\xb2\xd5\xbe\x07\x9a\xc5\xc0\x10\x58\x89\x6f\xf2\x40\xc6\x5a\x9b\x41\x44\x08\x08\xba\xf6\x60\xd3\xbf\xf6\x70\x18\x76\x11\x99\x8e\x0b\x9f\xa1\x26\x30\x3d\xc2\x71\x22\x04\x7b\x3a\xfb\xfa\x05\xc4\x4e\x43\x88\xe9\x97\x63\x38\x6d\x77\x18\x5b\xe0\x06\x7a\x4a\x3d\x24\x25\x25\xb2\xab\x8b\xab\xff\xb2\x9f\x6f\x90\x41\xdd\x81\x12\x59\x22\x0f\x3b\x1d\xc6\xad\xb3\x80\x27\x6a\x6a\x04\x03\x30\xd0\x4d\x58\x23\xd0\xb9\xbb\xae\xaf\xbd\xa3\x06\x6c\x05\xb8\x75\x06\x9e\x35\x8e\x2e\xa2\xe3\xdd\xcc\x6b\xa2\xdb\xfd\x33\xc8\x0e\x25\x48\xe3\x7b\x62\x40\x69\xd0\xb1\x33\xda\x0f\x7e\x5c\xab\xd7\x27\xec\xe1\xe5\x64\xa8\x83\x69\x00\x8b\xd6\x21\x46\x04\x2b\xbd\xab\x51\xe3\x4e\x0e\xbd\x0f\xb7\x1c\x3d\xe0\x93\x8c\xa4\xd8\x40\x2a\x78\x36\x88\x4c\xad\x8d\x81\xde\x07\xbf\x3b\x46\x14\xbb\x74\x13\x51\x89\xac\xfc\xe2\x88\x29\x7b\x7a\x1a\xa2\x05\x89\xd1\x43\x7e\x0a\x26\x85\x69\x62\x60\x8c\x5e\x76\x5e\x07\x78\x96\x26\x04\xac\x56\x60\x52\x41\xb7\xb1\x32\x0d\xd8\xde\xc3\x6f\x2a\xb5\x3a\x05\xf5\xc7\x12\xdf\x03\x00\x00\xff\xff\x1e\xc5\xb2\x0b\x80\x04\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
