// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/runtimes.yaml
// manifests/traefik.yaml
//go:build !no_stage
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8f\x13\x31\x0c\x85\xef\xf3\x2b\xa2\x1e\x91\xd2\x15\xe2\x82\xe6\x08\x07\xee\x2b\xc1\xdd\x4d\x1e\xdd\xd0\x4c\x1c\xd9\x4e\x61\xf9\xf5\x68\x3a\x5d\x51\x3a\xdb\xd2\x16\x10\x7b\x8b\xac\xf8\xf3\xf3\x73\x62\xaa\xe9\x13\x44\x13\x97\xde\xc9\x8a\xc2\x92\x9a\x3d\xb0\xa4\xef\x64\x89\xcb\x72\xf3\x56\x97\x89\xef\xb6\xaf\xbb\x4d\x2a\xb1\x77\xef\x73\x53\x83\xdc\x73\x46\x37\xc0\x28\x92\x51\xdf\x39\x57\x68\x40\xef\x36\x6f\xd4\x87\xcc\x2d\xfa\xc0\xc5\x84\x73\x86\xf8\x81\x0a\xad\x21\x9d\xb4\x0c\xed\x3b\xef\xa8\xa6\x0f\xc2\xad\xea\x98\xe8\x5d\x60\x96\x98\xca\x61\xbd\xce\x39\x81\x72\x93\x80\xfd\xa5\x0c\x52\x68\xe7\xdc\x16\xb2\xda\xc7\xd6\xb0\x09\x20\x20\xc3\xee\xd8\x6a\x1c\x8f\xb3\x1a\x8b\xc5\x1c\x89\x2d\x8a\x1d\x21\x0f\x50\x95\x2c\x3c\x5c\x0d\x2d\x1c\x8f\x65\x2e\x5e\x2d\xae\xc8\xbd\x53\x23\x6b\xba\x0b\x28\x64\x9b\xc2\x61\xec\x00\x3b\xe9\xbb\x08\xfc\xc4\x99\xf2\x38\x9e\xf0\x31\x27\x9d\x0e\x5f\x6f\x42\xcf\xb4\x5d\xeb\xdd\x9e\x45\x21\x70\x3b\x37\x99\x51\xef\x65\x86\xd2\x00\xad\x34\x93\xf7\x3b\x16\xd5\xaa\x73\x5a\x24\x0c\x5c\x14\xc7\xca\x9e\x9f\x6f\x4c\x1a\x78\x0b\x79\xdc\x3f\xe9\xe7\x1e\x60\x89\x95\x53\x31\xcd\x73\x07\x4f\xcd\xc4\xfb\xee\xf6\x1f\xfb\x2e\x95\x98\xca\xfa\xea\x8f\xcb\x19\xf7\xf8\x3c\xde\x7e\xea\xf2\x4c\xe5\xce\xb9\xf9\xaa\xb8\xa8\x8e\xb6\xd5\x17\x04\xdb\xed\x88\x09\xf1\x51\x21\x97\xe5\xba\x9f\xc3\xee\xdd\xa6\xad\xe0\xf5\x51\x0d\xc3\x7f\x71\xcc\x8f\x7c\x1f\x91\xb1\x26\xe3\xbf\x6a\xe0\xd4\x55\x7f\x54\xe0\xa5\x38\xf7\x87\x96\xa1\x58\x0a\x3b\xb2\x17\x50\x3c\x27\xee\x46\x4b\x7f\xf1\x12\xdf\x0c\x65\xec\xcd\x53\x4d\xe3\xf2\x39\x29\xe3\x9f\xf8\xfb\x23\x00\x00\xff\xff\xde\xc0\x02\x82\x7a\x07\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\xe3\xba\x11\x7e\xf7\xaf\x20\x04\xe4\xa5\xa8\x9c\xf8\x04\x7b\x9a\xea\x2d\xc7\x76\x76\x8d\x26\x5e\xc3\x76\x0e\x10\x14\x45\x40\x53\x63\x8b\x0d\xc5\x61\x49\xca\x89\x76\x9b\xff\x5e\x50\x37\x8b\xb2\x92\x4d\xd2\x5d\xbd\x58\xe2\x70\x6e\x1f\x87\x73\x31\x55\xfc\x4f\xd0\x86\xa3\x8c\xc8\x7e\x34\x78\xe0\x32\x8e\xc8\x0a\xf4\x9e\x33\xb8\x64\x0c\x33\x69\x07\x29\x58\x1a\x53\x4b\xa3\x01\x21\x92\xa6\x10\x11\x86\x1a\x62\x69\xaa\x6f\xa3\x28\x83\x88\x3c\x64\x1b\x08\x4d\x6e\x2c\xa4\x83\x30\x0c\x07\x6d\xd1\x7a\x43\xd9\x90\x66\x36\x41\xcd\xbf\x51\xcb\x51\x0e\x1f\x2e\xcc\x90\xe3\x69\xa3\x74\x2c\x32\x63\x41\x2f\x51\x80\xa7\x51\xd0\x0d\x08\xe3\xde\x48\xa1\x42\x4b\xb0\x50\xb0\x6e\x10\xad\xb1\x9a\x2a\xc5\xe5\xae\xd4\x11\xc6\xb0\xa5\x99\xb0\xa6\x31\xb5\x34\x28\xaa\x2d\xd6\x99\x00\x13\x0d\x42\x42\x15\xff\xac\x31\x53\x85\xe4\x90\x04\xc1\x80\x10\x0d\x06\x33\xcd\xa0\x5a\x03\x19\x2b\xe4\xb2\x10\x16\x12\x53\x82\x52\x7e\x28\x8c\xcb\x97\xc6\x7f\xf7\xb9\x07\xbd\xa9\x78\x05\x37\xb6\x78\x79\xa4\x96\x25\xc7\xfa\x62\x6e\x18\xee\x41\xe7\x15\x0e\xaf\x68\x17\xfc\x87\xd2\xff\x2f\xb4\xff\xe0\x32\xe6\x72\xe7\x81\x4e\xa5\x44\x5b\x70\x56\xc8\xf7\x89\xf4\x0e\x83\x66\x16\x33\x15\x53\x0b\x11\x09\xac\xce\x20\xf8\xf9\x67\x87\x02\x96\xb0\x2d\xec\xab\xd0\x7c\xc5\xd7\x01\x21\xc7\x81\xf5\x82\x64\x93\x6d\xfe\x0d\xcc\x16\x81\xd1\x7b\x05\x3e\x1c\xf8\x07\xc0\x51\x6e\xf9\xee\x86\xaa\x8f\x5c\xa7\x7a\xfb\x18\x35\x6c\xb9\x80\x88\xfc\xb7\xc0\x74\x18\x7d\x3a\x27\xdf\x8b\x57\xf7\x80\xd6\xa8\x4d\xf3\x99\x00\x15\x36\x69\x3e\x35\xd0\x38\x6f\xbe\x0e\xc7\x41\x4e\xbe\x8f\xaf\x6f\x57\xeb\xe9\xf2\x7e\xf2\xf5\xe6\x72\x36\x7f\x3e\x21\x5c\x86\x34\x8e\xf5\x90\x6a\x45\x09\x57\xbf\x97\x2f\x07\x4d\xa4\xb8\x01\x84\x4b\x03\x2c\xd3\xd0\x5a\xdf\x52\x21\x6c\xa2\x31\xdb\x25\xfd\x52\x9a\xbd\xcf\x07\x43\xd1\x58\x43\x4e\xc1\xb2\xd3\x0a\x8a\xd3\x39\xc6\xf0\xa5\x58\x6e\x2b\xb5\x56\x90\xdf\xcf\x5a\x0b\x1a\x04\xd2\x98\x8c\x3e\x99\x7e\x13\x7a\x94\x29\x8d\x29\xd8\x04\x32\x43\xa2\xbf\x8f\x3e\x9d\x37\x84\x2d\xea\x47\xaa\x63\x32\x2c\x2d\x71\xd7\x51\xec\x87\x0c\xe5\xb6\xd9\xc2\x28\x4b\x80\x9c\x1f\x2c\x10\x88\x6a\xe0\x1b\xd3\xa2\xd1\x78\x43\x05\x95\xec\x80\x0f\x4f\x15\x6a\xeb\xbb\xca\x32\x63\x31\x3d\xfd\xcb\xd0\xe5\x03\xcd\xe3\x72\x77\x69\xf0\xab\xfb\x5d\x46\x02\x7d\x14\x72\x54\x29\x73\xb8\xe8\x13\x50\x02\xf3\x14\x3e\x96\xc7\x3b\x57\xf8\xc2\x84\x54\xa9\x6a\x4b\xc9\xd8\xbd\xd8\xa5\xe0\xc0\x45\xea\x64\xbe\x0a\x06\x46\x01\x8b\x8a\xec\xb6\xe7\xce\xbe\x2f\xdc\x58\xd4\xf9\x35\x4f\xb9\x8d\x88\x43\xd2\xa5\x01\x0b\xbb\xbc\xd4\x61\x73\x05\x11\x59\xa2\x10\x5c\xee\x6e\x8b\x84\x52\x26\xa0\xf6\x4a\x54\x01\x9a\xd2\xa7\x5b\x49\xf7\x94\x0b\xba\x71\xb7\x62\xe4\xc4\x81\x00\x66\x51\x97\x7b\x52\x97\x20\xaf\x5b\x3e\xf4\x7b\x61\x21\x55\xa2\x11\xdc\x06\xaa\x38\x49\x8f\xff\x25\x1c\x6a\x4f\xcb\x20\xe3\xa8\xb9\xcd\xc7\x82\x1a\x33\x2f\x21\x29\x21\x0d\x59\x99\x8e\x42\xa6\xb9\xe5\x8c\x8a\xa0\x62\x31\x5e\xc6\x99\x77\xce\xa7\x80\x06\x05\xe8\x76\x52\x76\x4f\x48\x1e\x20\x77\x80\x57\xe2\x2e\xe3\x18\xa5\xf9\x2a\x45\x1e\xb4\xae\x04\x2a\xc7\x89\x3a\x22\xc1\xf4\x89\x1b\x6b\x82\x23\x01\x12\x63\x08\x5d\x8a\xed\x24\x76\x86\xd2\x6a\x14\xa1\x12\x54\xc2\x1b\x65\x12\x02\xdb\x2d\x30\x1b\x91\x60\x8e\x2b\x96\x40\x9c\x09\x78\xbb\xca\x94\x3a\x84\x7e\x86\x2e\xa7\x61\xe5\x05\xc4\x71\xc4\xa2\x89\x88\xe0\x32\x7b\x6a\x60\x56\x28\x70\x97\xaf\x94\xcb\x98\x63\x94\x2e\x40\x5d\x21\x6e\x83\x9e\xd2\xa7\xd5\x03\x3c\x96\x21\x57\x3f\x35\xe7\x3f\x9c\x77\xbe\x12\x97\xe2\xdc\xd5\x68\xed\x7e\x4c\x40\xde\x4a\x43\x2d\x37\x5b\x5e\xc6\xef\x04\xe7\x68\x6b\x1f\x5a\x5b\x8b\x00\x3c\xf6\xe3\x85\x00\x7f\x3d\x4c\xdf\x6a\x7f\xfd\xd1\x39\x9b\x6f\x28\x7f\xe0\x44\x6d\xff\xa5\xcc\x1f\x69\xfe\xcb\xbc\x70\x71\x49\xb9\x04\xdd\x70\x84\x47\x59\xad\x7c\x78\x4a\x77\xee\x02\x9e\x7c\x5f\xdd\xad\xd6\xd3\x9b\xfb\xc9\xf4\xea\xf2\xf6\x7a\x7d\xbf\x9c\x7e\x9e\xad\xd6\xcb\xbb\xe7\x13\x4d\x25\x4b\x40\x9f\xa6\xdc\x95\x50\x88\xc3\x4a\x46\xfd\x1b\x8d\x86\xa3\xdf\x86\xa3\xc0\x97\xb9\xc8\x84\x58\xa0\xe0\x2c\x8f\xc8\x6c\x3b\x47\xbb\xd0\x60\xa0\x68\x17\xca\xc7\x6b\xe9\x1a\x18\x5c\xea\xeb\xb8\x99\x42\x8a\x3a\x8f\xc8\xe8\x6f\x67\x37\xdc\xab\x6f\xff\xc9\xc0\x74\x77\x33\x95\x45\x64\x74\x76\x96\xf6\xca\xf0\x44\x50\xbd\x33\x11\xf9\x27\x09\x42\x57\xc8\x82\xbf\x92\xc0\xab\x25\x75\x43\x11\x90\x7f\x35\x2c\x7b\x14\x59\x0a\x37\x2e\x0b\x79\x21\x5f\x83\xeb\xfa\x98\xb0\xdc\xd4\xd2\x9f\xba\xfd\x0b\x6a\x93\xc8\xab\x56\x9e\x2f\x34\x76\x79\x29\x22\xae\x3d\x3c\x16\x5c\x94\xb5\xf0\x9d\xf2\xab\x6a\xf8\x63\x35\xae\x8e\x7a\xee\x34\xf1\xb3\x40\x6d\x23\xd2\x6a\x04\xea\xea\xe8\x9b\xaf\x34\x5a\x64\x28\x22\x72\x3b\x59\xbc\x57\x4e\x68\x99\xea\x95\xb5\x1e\xbf\x22\xcb\x6b\x4f\x6a\x69\x29\x58\xcd\x59\xbf\x65\x6d\x69\x45\x67\xe6\x4a\x10\x4a\x0b\x4f\xb6\x1d\x41\x54\x08\x7c\x5c\x68\xbe\xe7\x02\x76\x30\x35\x8c\x8a\xa2\xac\x44\xae\x75\x32\x6d\xd4\x19\x55\x74\xc3\x05\xb7\x1c\x3a\x31\x48\xe3\xd8\x5f\x08\xc9\x7c\xba\xbe\xff\x63\x36\x9f\xdc\xaf\xa6\xcb\x3f\x67\xe3\xa9\x47\x8e\x35\xaa\x2e\x03\x15\xa2\xe7\xe0\x96\x88\xf6\x8a\x0b\xa8\x7a\x74\xff\x18\x05\xdf\x83\x04\x63\x16\x1a\x37\xd0\x96\x97\x58\xab\x3e\x83\xf5\x55\xa8\x32\x5e\x3a\x8d\x30\xa9\xc2\x21\x22\x17\x67\x17\x67\xde\xb2\x61\x09\x38\x90\xbf\xac\xd7\x8b\x16\x81\x4b\x6e\x39\x15\x13\x10\x34\x5f\x01\x43\x19\x9b\xc8\x6f\x44\x15\x68\x8e\x71\x43\x1b\xb5\x69\x96\xa7\x80\x99\x3d\x10\x5b\x34\x93\x31\x06\xc6\xac\x13\x0d\x26\x41\x11\xfb\xd4\x2d\xe5\x22\xd3\xd0\xa2\x9e\x7b\xed\x3c\x7f\x37\x14\xfe\x10\xd0\x42\x62\x74\x31\xfa\x30\x12\xaf\x00\xf1\xdb\x2f\xc6\x21\x96\xa6\xce\xc0\x93\x72\x7c\xac\x08\x65\x02\x79\x47\x02\x63\xf5\x80\xe6\xe3\xd6\x5f\x52\x0a\x28\x2c\xa4\xa6\x1b\xd2\x45\x63\x53\x67\xd5\x4e\x25\x2b\x8f\xa0\x97\x58\x31\x36\x53\x4f\x2f\xe7\x31\xf5\x8d\xb9\xf3\x2d\xae\x85\x47\x89\xd4\x75\x5d\x2e\x2b\x50\x51\xdd\xc1\x17\x67\xdb\x6a\x58\xee\x19\x30\x5a\x35\xfb\xc5\x09\xe3\xe8\xbf\x86\xc3\x84\xe6\x1a\x8e\x32\x3e\x03\x97\x0b\x83\x1e\xb2\x61\x9a\xaa\x17\xff\x73\x78\xc3\xc0\x52\xf7\xe3\x55\xff\xdd\x92\xf4\xd6\xd1\xc6\x9f\x38\xfa\x74\x56\x3a\x66\x8b\xa8\x3d\x6c\xcf\x57\xcf\x27\x6d\xa2\xe9\x50\xef\xaf\x67\xab\x75\xb1\xa5\x29\x5e\x61\xa7\x34\xa9\x76\xcd\xe9\x56\xa8\xb0\xa7\xfe\xbc\xc0\x50\x16\x8e\xb0\xa7\xc4\x28\xbf\x12\x75\x59\xb8\xba\xa2\x29\x17\x79\x7d\x09\x7d\x07\x66\x8b\xab\xcb\x9b\xd9\xf5\xdd\xe2\xeb\xf5\x6c\x7c\xf7\x7c\x32\xf8\x5f\x00\x00\x00\xff\xff\x78\xf9\x4f\x86\x6f\x14\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\xb8\x69\xcb\xcb\x50\xca\x09\x0a\x2c\x03\xdf\xbc\xd8\x69\x03\x38\xb6\x61\xbb\x1d\x8a\xa2\x30\x68\xe9\x6c\xb3\xa1\x48\x82\xa4\xdc\x68\x59\xbe\xfb\x40\x52\x76\xe4\xfc\xb5\xb1\x8d\x2f\x82\x8e\x77\xbf\x3b\xde\xfd\x78\x47\xa6\xf9\x67\x34\x96\x2b\x49\x61\x73\x96\xdc\x70\x59\x50\x98\xa2\xd9\xf0\x1c\xbb\x79\xae\x2a\xe9\x92\x12\x1d\x2b\x98\x63\x34\x01\x90\xac\x44\x0a\x42\xe5\x4c\x10\xcd\xdc\x9a\x68\xa3\x36\xdc\xdb\xa3\x21\x36\xda\x11\xd6\x18\x46\x75\xab\x59\x8e\x14\x6e\xaa\x05\x12\x5b\x5b\x87\x65\x42\x08\x49\xda\x9e\xcd\x82\xe5\x19\xab\xdc\x5a\x19\xfe\x17\x73\x5c\xc9\xec\xe6\x77\x9b\x71\xd5\xd9\xc5\x74\x21\x2a\xeb\xd0\x4c\x94\xc0\xc3\x03\x32\x5e\xdb\x54\x02\x2d\x4d\x08\x30\xcd\x3f\x18\x55\x69\x4b\xe1\x6b\x9a\x7e\x4b\x00\x0c\x5a\x55\x99\x1c\x83\x44\xaa\x02\x6d\xfa\x0e\x52\xed\xc3\xb2\x0e\xa5\xdb\x28\x51\x95\x98\x0b\xc6\xcb\xb0\x93\x2b\xb9\xe4\xab\x92\xe9\xa8\xa7\x0a\xdb\x11\x6a\x15\xa0\x36\x68\x16\x01\x66\x85\xce\x6f\x0a\x6e\xc3\xf7\x07\x73\xf9\x3a\xfd\xf6\xb6\x7b\x94\x85\x56\x5c\xba\x67\x43\xd8\xf9\xdb\xf7\xf5\xeb\x41\xc0\x1b\xf4\xa8\x7b\x86\xb9\x41\xe6\x30\x80\x3e\x1f\x9f\x75\xca\xb0\x15\x36\x65\x78\x0a\xda\xec\xe7\x82\x59\x8b\xf6\xb0\x0c\xfc\xab\xa2\xff\xc1\x65\xc1\xe5\xea\xf0\xda\x2f\xb8\x2c\x12\x4f\x80\x09\x2e\xbd\xf2\xf6\x78\xaf\x38\x4e\x00\x9e\x92\xed\x10\x8a\xd9\x6a\xf1\x1d\x73\x17\x58\xf6\xec\x15\xfa\xbf\x2e\x0e\xd3\xda\x3e\xa4\xab\x87\x5a\xa8\xba\xc4\x23\xee\xec\xcb\xae\xac\xc6\x9c\x86\xb2\x47\xdd\x8f\xdc\xd7\xbc\x1e\xf0\x92\x3b\x0a\xa7\x09\x80\x75\x86\x39\x5c\xd5\x5e\x0b\xc0\xd5\x1a\x29\x4c\x94\x10\x5c\xae\x3e\xe9\x82\x39\x0c\x72\xd3\x96\x44\x55\x80\x92\xdd\x7e\x92\x6c\xc3\xb8\x60\x0b\x81\x14\xce\x3c\x1c\x0a\xcc\x9d\x32\x51\xa7\xf4\xac\x19\xb0\x05\x0a\xbb\x35\x62\x5a\xbf\x72\x0c\x87\xa5\x16\x3b\x17\xed\xf3\xfb\x25\xf6\x90\xde\xc2\x02\xd8\x9e\xde\x2f\x6d\xb8\x32\xdc\xd5\x17\x9e\xec\xc3\x90\xcc\x34\x26\x89\xf8\x9e\x41\x72\xc3\x1d\xcf\x99\x48\x1b\x7d\xbb\x57\xfb\xe1\x71\x85\x0f\xa9\x54\x02\x4d\x20\x66\x2b\x62\x00\x02\x37\x58\x53\x48\x2f\x1a\x7f\xdd\xa2\x50\xd2\x8e\xa4\xa8\xd3\x96\x16\x80\xd2\xde\x5a\x19\x0a\x69\xff\x96\x5b\x67\xd3\x67\x40\x42\xe4\x9e\xbc\x99\x2f\xba\x91\xe8\x30\xdc\xbd\x5c\x49\x67\x94\x20\x5a\x30\x89\x47\xe0\x02\xe0\x72\x89\xb9\xa3\x90\x0e\xd5\x34\x5f\x63\x51\x09\x3c\xc6\x71\xc9\xfc\x95\xfb\xaf\x3c\x7a\x2f\xd3\x3d\x42\xf9\xb5\xef\x51\x59\x0a\x82\xcb\xea\xb6\xd9\xf7\x47\x67\x5c\xa2\xd9\x65\x9d\xbc\x75\x77\xe2\xe2\x25\x5b\x79\x52\x9c\xdc\x4d\xbf\x4c\x67\xfd\xeb\x79\xaf\x7f\xd9\xfd\x34\x98\xcd\x27\xfd\x0f\x57\xd3\xd9\xe4\xcb\xfd\x89\x61\x32\x5f\xa3\xe9\x3c\x8f\x44\x37\xa7\xd9\x69\xf6\xfe\x2c\xdd\x87\x1c\x57\x42\x8c\x95\xe0\x79\x4d\xe1\x6a\x39\x54\x6e\x6c\xd0\xe2\x8e\x26\x3e\xe2\xb2\x64\xb2\x78\x38\x20\x79\x2b\x54\x02\xd6\x31\xe3\x5a\xff\x84\xc4\xa9\xd6\x12\x75\xd0\xe5\x9d\x28\x6d\x3e\xd9\x77\xab\xe4\x4e\x23\xce\xa4\x6b\xcf\x58\xdb\xf6\x1d\x93\x15\x2d\x48\x54\x6a\xd5\xab\xf4\xfa\x63\xe6\xd6\x74\xcf\xc1\x4e\x03\xe5\xe6\x29\xd8\x78\xd4\x9b\x0f\xbb\xd7\xfd\xe9\xb8\x7b\xd1\x6f\x81\x6d\x98\xa8\xf0\xd2\xa8\x92\xee\x31\x62\xc9\x51\x14\x4d\xc3\x7f\x22\x8f\xbe\xb7\x9d\x21\xdb\xf5\xbd\xa4\x7d\xaa\x23\x0e\x14\xe5\xd7\x4c\xef\x7b\x7b\x42\x99\x26\xbf\x8f\x7b\xf7\xfe\x88\x7d\xe8\xe2\xd3\x28\x0f\xdd\xe6\xd5\x3e\xee\x87\x9a\x94\xca\xb5\x3b\x45\x81\x4b\x56\x09\xf7\x39\xc4\x3a\x0b\x2d\x39\x0d\x16\x91\x5a\xed\xb1\xfd\xe8\xfe\x71\x4b\x1a\x63\x12\xb6\x29\xa4\xce\x54\x98\x26\x6d\x9e\x42\xc3\x63\x6f\xd0\x0a\x24\xa6\xa6\x19\xd1\xd7\xaa\x40\x0a\x7f\x32\xee\x2e\x95\xb9\xe4\xc6\xba\x0b\x25\x6d\x55\xa2\x49\x4c\x7c\x4b\x6d\x39\xdd\x43\x81\x0e\x43\x62\x9a\xb9\xbb\xcd\x68\xf2\xe8\x5d\xfa\xea\x38\xdb\xf1\xf7\x85\x49\xb6\x35\x6c\x51\x99\xc2\xdf\x24\x24\xe4\xae\x29\x5d\x68\x4b\x9e\x20\xd7\x4c\xa7\xf4\x6b\x23\xbd\xdb\x15\x36\xec\xa7\x34\xdd\xde\xec\x71\x77\xf6\x71\x7e\x39\x9a\xcc\x87\xa3\xe1\x7c\x70\x35\x9d\xf5\x7b\xf3\xe1\xa8\xd7\x9f\xa6\xef\x1e\x6c\x7c\x74\x36\xa5\x5f\xd3\x93\xbb\xad\xdd\x60\x74\xd1\x1d\xcc\xa7\xb3\xd1\xa4\xfb\xa1\x1f\x50\xee\x4f\xc2\xeb\xc9\xaf\xfb\xe6\x1b\xff\xef\xc3\x4c\x74\xfe\xc5\xd2\x04\xfb\xf3\x4f\x9d\x05\x97\x1d\xbb\x8e\xb5\x44\x07\x04\xab\x38\xee\x6e\x0a\x6e\x80\x94\x70\x7a\x7e\x7e\x0e\x44\x43\xfa\xcb\xdd\xe7\xd1\x60\xde\xbb\x9a\xdc\xc7\xca\xe7\xeb\x52\x15\x70\x7e\x7a\xda\xde\xea\x64\x59\x1a\x46\x27\x33\x85\xfa\x21\x0f\x70\x64\x4a\x20\x66\xf9\x18\x7e\x8d\x42\xa3\x19\xab\x22\xab\x59\x29\x76\x30\x8f\x8a\xe8\x45\xb1\xce\x63\x55\x3c\x3b\xa5\x63\x69\x23\x1a\xd1\x8d\x52\x7b\x14\xbf\xdc\xa2\x1f\x19\xc1\x71\x6d\xb9\xe4\xc6\x28\x83\x05\x11\x7c\x61\x98\xa9\xc9\xa2\xb2\xf5\x42\xdd\xd2\xb3\xec\xfd\x6f\xd9\xc1\x7d\xf9\x9f\x00\x00\x00\xff\xff\xf7\xfa\x34\x39\x4e\x0d\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x31\x6b\xf4\x30\x0c\xc6\xf1\xdd\x9f\x42\x78\x7e\x93\x97\x6e\xc5\x6b\x87\xee\x1d\xba\x94\x1b\x94\xf8\x21\x27\xce\xb1\x83\x24\xe7\x68\x3f\x7d\xb9\x70\xdc\x58\x68\x27\x0d\x7f\x7e\x0f\xe8\x22\x35\x27\x7a\x29\xdd\x1c\xfa\xd6\x0a\x02\x6f\xf2\x0e\x35\x69\x35\x91\x4e\x3c\x8f\xdc\xfd\xdc\x54\xbe\xd8\xa5\xd5\xf1\xf2\x6c\xa3\xb4\xff\xfb\x53\x58\xe1\x9c\xd9\x39\x05\xa2\xca\x2b\x12\xd9\xa7\x39\xd6\xc4\xcb\xa2\x58\xd8\x91\x87\x15\xae\x32\xdb\xa0\xe0\x0c\x0d\x44\x85\x27\x14\xbb\x11\xfa\x61\xfd\xb1\x30\x78\x1b\x76\xc1\x35\x51\x74\xed\x88\xbf\x71\xc8\xe2\x7f\x71\x9c\x57\xa9\x0f\xa8\xbd\xc0\x52\x18\x88\x37\x79\xd5\xd6\x37\x4b\xf4\x11\xef\x7f\xdd\x7d\x3c\x05\x22\x85\xb5\xae\x33\x8e\xbe\xb5\x6c\xf1\x1f\xc5\xda\x32\xec\xc8\x3b\x74\x3a\xd2\x02\xbf\x95\x22\x76\xdc\x2b\xfb\x7c\x8e\xa7\xf0\x1d\x00\x00\xff\xff\xe5\x1d\x7a\x17\x89\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4e\xc4\x40\x0c\x45\xfb\x39\xc5\x5c\x60\x82\xe8\x90\x3b\xa0\xa0\x5f\x24\x7a\x67\xf2\x59\x4c\x92\x71\x64\x7b\x22\xc1\xe9\xd1\x8a\x88\x06\xd8\xf6\x4b\xff\xbd\x57\x4a\x49\xbc\xc9\x0b\xcc\x45\x1b\x65\x1b\xb9\x0e\xdc\xe3\x4d\x4d\x3e\x39\x44\xdb\x30\xdf\xf9\x20\x7a\xb3\xdf\xa6\x59\xda\x44\xf9\x71\xe9\x1e\xb0\x93\x2e\x78\x90\x36\x49\x3b\xa7\x15\xc1\x13\x07\x53\xca\xb9\xf1\x0a\xca\x2b\xc2\xa4\x7a\x71\xd8\x0e\x23\xff\xf0\xc0\x4a\x17\x70\x99\xb0\xe0\xcc\xa1\x96\x4c\x17\x9c\xf0\x7a\x79\xf1\x26\x4f\xa6\x7d\xbb\x52\x90\x72\xfe\x15\xf0\xe3\xfb\x5b\xe0\x7d\x7c\x47\x0d\xa7\x54\x8e\xef\x33\x6c\x97\x8a\xfb\x5a\xb5\xb7\xf8\x27\xf7\x98\x7d\xe3\x0a\xca\x73\x1f\x51\xbe\xf9\xe9\x2b\x00\x00\xff\xff\xa5\xb5\x26\x22\x2f\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4e\x04\x31\x0c\x46\xfb\x9c\x22\x17\xf0\x22\x3a\x94\x0e\x1a\xfa\x45\xa2\xf7\x64\x3e\xc0\xcc\x8e\x13\xd9\xce\x08\x38\x3d\x1a\xb4\xfc\x34\x4b\x6f\xbf\xef\x3d\x22\x4a\xdc\xe5\x11\xe6\xd2\xb4\x64\x9b\xb8\x1e\x78\xc4\x4b\x33\xf9\xe0\x90\xa6\x87\xe5\xc6\x0f\xd2\xae\xb6\xeb\xb4\x88\xce\x25\x1f\xdb\x09\x77\xa2\xb3\xe8\x73\x5a\x11\x3c\x73\x70\x49\x39\x2b\xaf\x28\x79\x45\x98\x54\x27\x87\x6d\x30\xda\x51\x64\xe0\x19\x76\x3e\xf1\xce\x15\x25\x2f\x63\x02\xf9\xbb\x07\xd6\x64\xed\x84\x23\x9e\x76\x08\x77\xb9\xb7\x36\xfa\x3f\x26\x29\xe7\x5f\x91\x9f\x5d\xbc\x05\x74\x6f\x20\xee\xf2\x67\x1c\x1a\x52\xbf\xde\xbf\x35\x7c\x4c\xaf\xa8\xe1\x25\xd1\x19\xf4\x00\xdb\xa4\xe2\xb6\xd6\x36\x34\x2e\xa4\x5c\xd6\xff\x0c\x00\x00\xff\xff\x2a\x39\xe6\xe4\x44\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x4d\x6a\xc4\x30\x0c\x85\xf7\x3e\x85\x2e\xe0\x74\xb2\x2b\xde\x75\x59\x68\x61\x20\x65\xf6\x1a\x8f\x3a\x88\xe0\x1f\x24\xd9\x90\xdb\x97\x30\x71\xba\x13\x7a\xef\xfb\x24\xef\xbd\xc3\xca\x37\x12\xe5\x92\x03\x60\x65\xa1\x27\xab\x09\x1a\x97\x3c\xad\xef\x3a\x71\x79\xeb\xb3\x5b\x39\x3f\x02\x7c\x5c\x3f\x17\x92\xce\x91\x5c\x22\xc3\x07\x1a\x06\x07\x90\x31\x51\x80\x3e\xdf\xc9\x70\x9e\x12\x99\x70\xd4\x03\x76\x5a\x29\xee\x25\x7d\x81\xfb\x38\x88\xa3\xe9\xf7\x88\xe4\x0c\xb4\x62\xa4\x00\x6b\xbb\x93\xd7\x4d\x8d\x92\x03\x78\x4a\x69\xf5\x44\x86\x1c\xa0\x8f\xdf\x8f\xf3\x0e\x80\xb3\x52\x6c\x42\xcb\xca\xf5\xe7\x6b\xb9\x91\xf0\xef\x16\xc0\xa4\xd1\x10\x5d\x85\x8b\xb0\x6d\xdf\x9c\x39\xb5\x14\x60\xbe\x5c\xfe\x65\x23\x7d\xad\xff\x02\x00\x00\xff\xff\x14\x74\xa9\x1b\x25\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x41\x6f\xdb\x38\x13\xbd\xfb\x57\x0c\xfc\x21\xb7\x4f\x89\xed\x6e\xda\x42\x40\x0e\x86\xad\xd6\x05\x92\xd4\xb0\x9c\x5d\xe4\x64\x30\xd4\x38\x26\x42\x91\xdc\x99\x91\x1b\x6d\xd1\xff\xbe\xa0\x95\x2a\x52\x9a\x14\x59\xec\x56\x07\x1f\x66\xde\xbc\x79\x7e\x1c\x72\x92\x24\x19\xa8\x60\x7e\x47\x62\xe3\x5d\x0a\xfb\xf1\xe0\xce\xb8\x22\x85\x1c\x69\x6f\x34\x4e\xb5\xf6\x95\x93\x41\x89\xa2\x0a\x25\x2a\x1d\x00\x38\x55\x62\x0a\x25\x0a\x19\xcd\x09\x23\xed\x91\x1e\xc2\x1c\x94\xc6\x14\xee\xaa\x1b\x4c\xb8\x66\xc1\x72\xf0\xb4\x83\x0a\x81\x4f\xda\x36\x73\x0c\xd6\xd7\x25\xfe\xab\x16\x00\x56\xdd\xa0\xe5\x58\x09\x70\xf7\x9e\x13\x15\xc2\x0f\xe5\x1c\x50\x47\x04\xe1\xde\x44\x29\x0b\xc3\xe2\xa9\x3e\x37\xa5\x91\x14\x46\x03\x00\x16\x52\x82\xb7\x75\xc3\x23\x75\xc0\x14\x56\xde\x5a\xe3\x6e\xaf\x42\xa1\x04\x0f\x71\xea\x46\x1a\x28\x40\xa9\xee\xaf\x9c\xda\x2b\x63\xd5\x8d\xc5\x14\xc6\x91\x0e\x2d\x6a\xf1\xd4\x60\x4a\x25\x7a\x77\xde\xd1\xf9\xb2\x52\x00\xc1\x32\xd8\x96\xbe\xeb\x4c\xfc\x5e\x70\x27\x7e\xb6\xd7\xe0\x67\x2d\x00\xbe\x1b\x12\xbf\x40\xc6\x93\x91\x7a\x66\x15\xf3\xe5\x81\x7f\xd8\xb8\x9b\x38\x5f\x60\xa2\xc9\x88\xd1\xca\x0e\x1f\xf0\xdc\x1b\x8f\xcb\x97\x05\x89\xb7\x48\x4a\x8c\x77\x1d\x55\x09\xdc\x61\x9d\xc2\x70\xf6\xc0\x3a\x2d\x0a\xef\xf8\xb3\xb3\xf5\xb0\xc5\x00\xf8\x10\x2b\x3d\xa5\x30\xcc\xee\x0d\x0b\x0f\x7f\x20\x38\x68\x23\x6f\xf1\x38\xce\x03\x39\x14\xe4\x63\xe3\x4f\xb4\x77\x42\xde\x26\xc1\x2a\x87\xaf\xe4\x04\xc0\xed\x16\xb5\xa4\x30\xbc\xf4\xb9\xde\x61\x51\x59\x7c\x7d\xcb\x52\xb1\x20\xfd\x17\xbd\x62\x87\xbc\x37\x3b\x87\x93\xec\x75\xf3\x9c\x82\x35\xae\xba\x7f\xc8\xef\xbd\xad\x4a\x6c\x2d\xfe\x1f\x94\xf1\x5c\xc0\x38\x90\x32\x00\x7b\xf8\x82\xa0\x95\x03\x56\x5b\xb4\x35\x54\x8c\xb0\x25\x5f\x26\xac\x29\xce\x25\x98\x52\xdd\x22\x83\x72\xc5\x89\x27\x20\x54\x45\xe2\x9d\xad\x21\x1a\xa9\x8c\x43\xe2\xc1\x77\x1b\x9a\xe9\x93\x32\x24\x85\xa1\x56\x1e\x96\x41\xea\xb9\xa1\x14\xbe\x7e\x7b\x08\x3e\xd6\xa6\x4f\x8a\x9f\x9d\x14\x68\x44\xa4\x30\x3c\xfa\x9a\x5f\xe7\xeb\xec\x62\x33\xcf\x3e\x4c\xaf\xce\xd7\x9b\x55\xf6\xf1\x53\xbe\x5e\x5d\x7f\x3b\x22\xe5\xf4\x0e\xe9\xa4\x34\x44\x9e\xb0\x48\xfa\x54\xe9\x7e\x74\xfc\xee\x78\xf2\x68\xb4\xa2\xdb\xde\xdc\x25\x89\x46\x92\xa8\xfc\xec\x44\xca\xd0\xcb\x30\xea\x8a\x30\x09\x9e\xe4\x6c\x3c\x9a\x9c\x8e\x7a\xd9\xe8\xbf\x45\x49\x02\xe1\x16\x29\xb6\x56\x45\x41\xc8\x9c\xc4\x87\x82\xcf\x8e\xbe\x2e\x57\xd9\x87\x6c\xb5\xca\xe6\x9b\xe9\x7c\xbe\xca\xf2\x7c\xb3\xbe\x5e\x66\xf9\xb7\xa3\x67\x79\x2a\xc6\xe6\x6a\xb1\x28\xa9\xf8\xd0\xb6\x07\x6c\xfe\x59\x42\xc8\xde\x56\xf1\x02\x9d\x8d\x4f\xb9\x87\x10\xcb\x89\x36\x61\x87\x94\x70\x65\x04\xf9\x6c\x7d\x9e\x6f\xb2\xd9\x7c\x91\xc5\xdf\x7c\xba\xf9\xe3\xd3\x7a\xb1\x99\x66\xf9\x66\x72\xfa\x76\xf3\x71\x76\xb1\xc9\x17\xd3\x37\xef\x7f\xfb\xff\x23\x6e\xf5\x2a\xd4\x13\xb6\xf1\xe4\xfd\x77\xdc\xe4\xf4\xed\x4b\x6c\x2f\xa2\x3a\x6c\xb3\xc5\x74\xb6\x98\x4e\x46\x9b\xe5\xe7\xf3\xeb\xf1\x9b\xd1\xe9\x73\x64\x3f\x80\x5a\x17\xa2\x39\x15\x69\xec\x9c\x71\x0c\xfe\x59\x21\x4b\x2f\x06\xa0\x43\x95\xc2\x78\x34\x2a\x7b\xd1\x12\x4b\x4f\x75\x0a\xef\x46\x17\xa6\x4d\xc4\xa3\xe8\x4d\x4d\x33\xb5\x3b\x91\xc0\x9d\xea\x76\xbe\x97\x9e\x24\x72\x77\x47\x26\x3e\xa9\x5e\xbc\xf6\x36\x85\xf5\x6c\xd9\x51\xac\x0a\xe3\x90\x79\x49\xfe\x06\xbb\x12\x23\xfd\x47\x94\xbe\xea\xa0\x64\x97\xc2\x49\xac\xaa\xff\xea\x67\x0e\x4d\x9f\x6a\x02\x60\xbd\xc3\xa8\x76\xb1\x5e\x2f\xf3\x4e\xc6\x38\x23\x46\xd9\x39\x5a\x55\xe7\xa8\xbd\x2b\xb8\xd9\x7a\x2d\x21\x92\xf1\x45\x9b\x9a\x74\x52\x62\x4a\xf4\x95\xb4\xb9\x71\x27\xc7\x95\xd6\xc8\xbc\xde\x11\xf2\xce\xdb\xa2\x9f\xdd\x2a\x63\x2b\xc2\x4e\xf6\x4d\x9b\xb5\x66\x8f\xff\xd8\x89\x58\xf4\x0b\x8c\x78\xfb\x13\x27\xc6\xa3\x5f\x6e\xc5\xe1\xe9\x89\xeb\xd7\x3b\xc1\x7b\xe9\x4f\xb3\x2a\xe2\x66\x5c\x79\x2f\x1f\x8c\xc5\x66\x2b\xa7\x20\x54\x61\x17\x56\xb9\x29\x5f\x7a\x17\x61\xcf\x27\xaf\x18\xe9\x70\x03\xba\x7f\x47\x59\xeb\xbf\x2c\xc9\xec\x8d\xc5\x5b\xcc\x58\x2b\x7b\x58\xd6\x29\x6c\x95\xe5\x47\x8e\x66\xbf\x5c\xc4\xa5\xf2\xcc\xcd\x78\xba\x0c\xa0\x59\x3f\xcb\xe6\xc8\xe2\x3b\xfb\x77\x00\x00\x00\xff\xff\xf2\x89\x3e\x71\x68\x0a\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3f\x4b\x04\x31\x10\xc5\xfb\x7c\x8a\x61\xfb\x28\xe2\x15\x92\x56\xb1\x13\x16\x4e\xec\xe7\x72\x4f\x0d\x9b\x6c\xc2\xcc\xec\xc2\x7e\x7b\xd9\xdc\x59\x1c\x5c\x97\xbc\x79\x7f\x7e\xde\x7b\xc7\x2d\x7d\x41\x34\xd5\x39\xd0\xfa\xe4\xa6\x34\x9f\x03\x1d\x21\x6b\x8a\x70\x05\xc6\x67\x36\x0e\x8e\x68\xe6\x82\x40\x05\x26\x29\xaa\x57\xc8\x0a\xb9\xca\xda\x38\x22\xd0\xb4\x9c\xe0\x75\x53\x43\x71\x44\x99\x4f\xc8\xba\x27\xa9\x5f\x64\x86\x41\x1f\x52\x7d\xbc\x34\x0d\x1f\x37\x55\xc3\x1d\x63\xcc\x8b\x1a\xa4\x3b\xd2\xbe\x30\x98\x2c\x18\x9c\x36\xc4\xbd\x58\x91\x11\xad\xca\x75\xe4\x45\x3d\xb7\x76\x87\xb1\x55\xb1\x4e\xe2\xfb\x33\xd0\xe1\xf0\xdc\x23\x17\x92\x5f\xb3\xa6\xfd\xdf\xa4\x5a\x8d\x35\x07\xfa\x7c\x1d\xbb\x62\x2c\x3f\xb0\xb1\xa7\xfe\x7d\xa9\xbd\x73\x49\x79\x1b\x6b\x4e\x71\x0b\x34\x0a\xbe\x21\x6f\x0b\xe7\xa3\x71\x9c\xdc\x5f\x00\x00\x00\xff\xff\x7b\xf5\x71\x2a\x57\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x4b\xc4\x30\x10\x85\xef\xf9\x15\xc3\xde\xd3\xc5\x9b\xe4\xa6\x1e\xbc\xaf\xe0\x3d\x4d\x9f\xbb\x63\xdb\xa4\xcc\x4c\x2a\xfa\xeb\xa5\xb6\x2a\xb8\xb0\x2c\x78\x4a\x98\xe4\x7d\x8f\xf9\xbc\xf7\x2e\x4e\xfc\x0c\x51\x2e\x39\x90\xb4\x31\x35\xb1\xda\xa9\x08\x7f\x44\xe3\x92\x9b\xfe\x56\x1b\x2e\xfb\xf9\xc6\xf5\x9c\xbb\x40\x0f\x43\x55\x83\x1c\xca\x00\x37\xc2\x62\x17\x2d\x06\x47\x94\xe3\x88\x40\xfa\xae\x86\x31\x8c\x30\xe1\xa4\x5e\x21\x33\xc4\x49\x1d\xa0\xc1\x79\x8a\x13\x3f\x4a\xa9\x93\x2e\x09\x4f\xbb\x9d\x23\x12\x68\xa9\x92\xb0\xcd\x72\xe9\xa0\xfb\x0d\xe0\x88\x66\x48\xbb\x3d\x1d\x61\xd7\x31\xa6\xd2\xe9\x2f\xec\x1c\xb2\x9c\x03\xeb\x7a\x79\x8b\x96\x4e\xee\x7f\x26\xee\x39\x77\x9c\x8f\xd7\x0b\x29\x03\x0e\x78\x59\xbe\x7d\xaf\x73\xa1\xd2\x11\x9d\xbb\xbf\x5c\xa0\xb5\x7d\x45\xb2\x2f\xe9\x6b\xf6\x09\x32\x73\xc2\x5d\x4a\xa5\x66\xfb\x89\xff\xc9\xad\x63\x9d\x62\x42\xa0\xbe\xb6\xf0\x2b\xdf\x7d\x06\x00\x00\xff\xff\xdb\x55\x9e\x61\x2a\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4f\x8f\xd3\x30\x10\xc5\xef\xfe\x14\xd6\xde\xdd\x15\xe2\x82\x72\x84\x03\xf7\x95\xe0\xee\xd8\x43\x77\x88\xe3\xb1\x66\xec\xac\x96\x4f\x8f\xd2\xa4\x85\x34\xf1\xd2\x40\x39\xb5\xb5\xec\xf7\x9b\x3f\xef\xd5\x26\xfc\x0a\x2c\x48\xb1\xd1\xdc\x5a\x77\xb0\x25\x3f\x13\xe3\x0f\x9b\x91\xe2\xa1\xfb\x20\x07\xa4\xc7\xe1\x9d\xea\x30\xfa\x46\x7f\x0a\x45\x32\xf0\x13\x05\xf8\x88\xd1\x63\x3c\xaa\x1e\xb2\xf5\x36\xdb\x46\x69\x1d\x6d\x0f\x8d\xee\x4a\x0b\xc6\x26\x14\xe0\x01\xd8\x8c\x3f\x03\x64\x63\x7d\x8f\x51\x31\x05\x78\x82\x6f\xe3\x6d\x9b\xf0\x33\x53\x49\x6f\x90\x95\xd6\x2b\xf0\x85\x23\xaf\x92\xa1\x6f\x2e\xfa\x09\x67\x86\x94\xf6\x3b\xb8\x2c\x8d\x32\xbb\x20\x5f\x04\xb8\xd2\x85\x52\xc6\x18\xf5\xf7\xd3\xda\x18\xd3\xb9\xfc\xf7\x62\x1c\xc5\xcc\x14\x02\xb0\xe2\x12\x60\x51\xb8\x8c\x2f\x8c\x7e\x78\x50\x5a\x33\x08\x15\x76\x30\x9f\x45\xf2\x20\x4a\xeb\x01\xb8\x9d\x8f\x8e\x90\x4f\x9f\x01\x65\xfa\xf2\x62\xb3\x7b\xde\x21\xf7\x28\xd9\xe6\x72\xa5\x9a\x76\x88\xd8\x1e\x24\x59\x77\x5d\xd8\x1f\x0b\x8a\x90\x5f\x88\x3b\x8c\xc7\x79\x8e\x5b\xe2\xd3\x9d\x44\x01\x1d\x9e\x08\x46\xbb\x69\xc8\x0e\x3d\xef\x45\x6e\x10\x20\xfa\x44\x18\xf3\xa4\x9d\xc8\xd7\x34\xcf\x83\xae\x69\x7b\x14\x47\x03\xf0\x6b\xbd\x9b\x0b\x2b\x60\x7d\x5c\x4b\xce\x3f\xba\xb0\x9e\xd9\x8a\x19\xef\x1f\xd6\x25\xe0\x57\x52\xc7\x1e\x6f\x63\x5c\xa5\xf5\x6d\xc0\xfd\x63\xfb\xbb\xdf\xcc\x18\x99\x6a\x64\x57\x8e\x5e\x5b\xe0\x66\xf3\xfe\xb7\xc5\x6f\xb4\x73\xbf\xa5\xaf\xc5\x97\x0b\x9f\x5e\x9e\x10\xeb\x4d\x9e\xff\xdd\x6e\x2b\xe3\x67\x00\x00\x00\xff\xff\x99\x4e\xc0\xe4\xc9\x06\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _runtimesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd0\x31\x8e\x84\x30\x0c\x05\xd0\x3e\xa7\xc8\x05\xc2\x6a\xbb\x55\xda\xbd\xc1\x14\xd3\x5b\xc4\x02\x8b\xc4\xa0\x38\xc0\x1c\x7f\x04\x1a\x26\x40\xed\xf2\x7f\x4b\xef\x4b\x86\x89\x9e\x98\x85\x46\xf6\x96\xc7\x80\xcd\xf0\x27\x0d\x8d\x3f\xcb\xaf\x19\x88\x83\xb7\x8f\x99\x0b\x25\xfc\x8f\x20\x62\x12\x16\x08\x50\xc0\x1b\x6b\x19\x12\x7a\xcb\x0b\x05\x02\xd3\x03\x87\x88\xf9\x9b\x9d\x73\x46\x87\x76\xf8\x9a\x30\x53\x42\x2e\x10\xef\x3b\xd7\xa3\xc6\x68\x9b\x67\xae\x2b\x7b\xd2\x60\xe3\xcc\x50\xa8\xad\xf2\x51\x68\xe0\x12\xa9\xeb\x4b\xb5\x3f\x59\x85\x9e\xe8\xf4\x8e\x3d\x69\xb0\xeb\x2a\x55\xdd\x82\x0a\x0a\x92\x30\x74\x78\x92\x8f\x46\x8d\xcf\x37\x3c\xab\xd1\xdb\xfd\x8a\x6f\xcd\x3b\x00\x00\xff\xff\xc7\xad\x48\x21\x9f\x03\x00\x00")

func runtimesYamlBytes() ([]byte, error) {
	return bindataRead(
		_runtimesYaml,
		"runtimes.yaml",
	)
}

func runtimesYaml() (*asset, error) {
	bytes, err := runtimesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "runtimes.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\x5d\x6f\xd3\x4c\x10\x85\xef\xfd\x2b\x46\x96\x72\xf5\x6a\x9d\x7e\xbc\x42\x95\xef\x42\xea\x42\x05\x94\x2a\x4e\x41\xbd\x8a\x26\xeb\x49\xbc\xca\x7a\x77\x35\x3b\x8e\x30\xa5\xff\x1d\x6d\x92\x7e\x49\x20\x10\x82\x3b\x7b\x76\xe6\x39\x33\xe7\x28\xa5\x32\x0c\xe6\x13\x71\x34\xde\x95\xd0\x92\xed\x0a\x8d\x22\x96\x0a\xe3\xc7\xdb\xe3\x6c\x63\x5c\x53\xc2\x5b\xb2\xdd\xb4\x45\x96\xac\x23\xc1\x06\x05\xcb\x0c\xc0\x61\x47\x25\x08\x23\xad\xcc\x46\x69\x6e\x0e\xb5\x18\x50\x53\x09\x9b\x7e\x49\x2a\x0e\x51\xa8\xcb\x62\x20\x9d\x46\x74\x82\x94\xd0\x8a\x84\x58\x8e\xc7\xa3\xbb\x77\x37\xaf\xab\xd9\x55\x35\xaf\xea\xc5\xe4\xfa\xf2\x7e\x34\x8e\x82\x62\xf4\x78\xd7\x18\xc7\xcf\xe0\xea\xf4\xff\xe2\xa4\x38\xfe\xaf\x0f\xbb\x8f\xa3\x42\xd6\x5f\xb3\xbf\x78\xc0\xbf\x5b\xfe\x47\x8b\x03\x44\x92\x04\x05\x58\x5b\xbf\x44\x5b\xec\xc5\xce\x69\x85\xbd\x95\x19\xad\x4d\x14\x1e\x4a\xc8\x47\x77\xf5\x6d\x3d\xaf\x3e\x2c\xce\xab\x8b\xc9\xcd\xfb\xf9\x62\x56\xbd\xb9\xac\xe7\xb3\xdb\xc5\x6c\xf2\xf9\x7e\x94\x67\x00\x5b\xb4\x3d\xc5\xa9\x77\x42\x4e\x4a\xf8\xa6\x76\xdc\x86\x82\xf5\x43\x97\x4a\xbb\x7f\x80\xe0\x9b\x89\x73\x3e\x2d\xe9\x5d\x7c\xa8\x02\x04\xf6\x1d\x49\x4b\x7d\x4c\xa6\x05\x9f\xae\xcc\xcf\x8e\xce\x4e\xf2\x9f\xb4\x44\xcd\x18\xa8\x84\x5c\xb8\xa7\x7d\x53\x60\xbf\x35\x0d\xf1\x23\x36\x39\xc8\x8e\x84\xe2\xa5\x5b\x33\xc5\xe7\x7a\xfd\xd2\x9a\xd8\x52\x53\x13\x6f\x8d\xa6\xa7\x17\x00\x72\xb8\xb4\xd4\xa4\x58\x7a\x3a\x90\x8d\x67\x23\xc3\xd4\x62\x8c\x57\xbb\xc8\xf2\xbd\x59\x4a\xdb\x3e\x0a\xb1\xd2\x6c\xc4\x68\xb4\xfb\x55\x4c\x87\xeb\x47\x26\x53\xf0\xd1\x88\xdf\x79\xc9\xe8\x74\x4b\x3c\xee\x0c\xb3\x67\x6a\x94\x35\x4b\x46\x1e\xd4\x21\xaa\x87\x7b\x05\xd7\x25\xe4\xa7\xc5\x69\xf1\x6a\x5f\x12\x6f\x89\x9f\xdb\xa6\x60\x43\x89\x38\x3d\x28\x4f\x9a\xc6\xbb\xf8\xd1\xd9\xe1\x81\xe1\x43\x9a\xf0\x5c\x42\x5e\x7d\x31\x51\x62\xfe\x62\xd0\xf9\x86\x14\x7b\x4b\xc5\x93\x51\xc9\x5a\xed\x9d\xb0\xb7\x2a\x58\x74\xf4\x0b\x16\x00\xad\x56\xa4\x53\x5a\x57\xbe\xd6\x2d\x35\xbd\xa5\xdf\x93\xe9\x30\x19\xf7\xe7\xfc\xf8\x32\x39\x13\x2e\xb0\x33\x76\xb8\xf6\xd6\xe8\xa4\x7b\xcd\xb4\x22\x3e\xef\xd1\xd6\x82\x7a\x93\x67\xdf\x03\x00\x00\xff\xff\x54\x2e\x47\x2d\x6b\x04\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"runtimes.yaml":                                 runtimesYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"runtimes.yaml":     &bintree{runtimesYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
