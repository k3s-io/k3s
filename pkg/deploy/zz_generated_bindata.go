// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/traefik.yaml
//go:build !no_stage
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x4f\x8f\x13\x31\x0c\xc5\xef\xf9\x14\x51\x8f\x48\xe9\x0a\x71\x41\x73\x84\x03\xf7\x95\xe0\xee\x26\x8f\x6e\x68\x26\x8e\x62\xa7\xfc\xf9\xf4\x68\x66\xba\x62\xe8\xa8\x55\xa7\x80\xd8\x9b\x65\xc5\x3f\x3f\x3f\xcb\xa1\x12\x3f\xa1\x4a\xe4\xdc\xd9\xba\x23\xbf\xa5\xa6\x4f\x5c\xe3\x0f\xd2\xc8\x79\x7b\x78\x2b\xdb\xc8\x0f\xc7\xd7\xe6\x10\x73\xe8\xec\xfb\xd4\x44\x51\x1f\x39\xc1\xf4\x50\x0a\xa4\xd4\x19\x6b\x33\xf5\xe8\xec\xe1\x8d\x38\x9f\xb8\x05\xe7\x39\x6b\xe5\x94\x50\x5d\x4f\x99\xf6\xa8\xa6\xb6\x04\xe9\x8c\xb3\x54\xe2\x87\xca\xad\xc8\x50\xe8\xac\x67\xae\x21\xe6\x79\x3f\x63\x6d\x85\x70\xab\x1e\xa7\x47\x09\x24\x10\x63\xed\x11\x75\x77\xca\xed\xa1\x13\xa0\x82\x14\x63\xd8\x4a\x18\xc2\x45\x8f\xcd\x66\x89\xc4\x11\x59\xcf\x90\x33\x54\x21\xf5\x4f\xab\xa1\x99\xc3\xb9\xcc\xcd\xab\xcd\x8a\xda\x07\x51\xd2\x26\x63\x42\x50\x8f\xd1\xcf\x73\x33\xec\xa4\xef\x26\xf0\x33\x67\xaa\xe3\x70\xc1\xc7\x14\x65\x0a\xbe\xde\x85\x5e\x68\x5b\xeb\xdd\x89\x45\xde\x73\xbb\xb4\x99\xdb\x8c\xa4\x1e\x52\x68\x21\x6b\xb6\xdd\x61\xe6\x05\x8b\x4a\x91\x25\x2d\x10\x7a\xce\x82\x73\x45\xe3\x5e\x9d\x33\xf7\x5f\xd0\xbb\x98\x43\xcc\xfb\xd5\x87\xc4\x09\x8f\xf8\x3c\xbc\x7e\x1e\xe0\x4a\x67\x63\xed\xf2\x74\x6f\xea\x23\x6d\xf7\x05\x5e\xc7\x9b\x9d\x10\x1f\x05\xf5\xb6\x5a\xfb\x6b\x09\x9d\x3d\xb4\x1d\x9c\x7c\x17\x45\xff\x5f\x1c\x73\x03\xdf\x05\x24\xec\x49\xf9\xaf\x1a\x38\x4d\xd5\x9d\x35\x78\x29\xce\xfd\xa1\x65\xc8\x1a\xfd\x48\x76\x15\x14\xae\x89\xbb\xd3\xd2\xdf\xbc\xc4\x37\x45\x1e\x66\x73\x54\xe2\xf0\x19\x5c\x94\xf1\x4f\xfc\xfd\x19\x00\x00\xff\xff\x2f\x06\x3f\x61\x0a\x07\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x51\x6f\xdb\x38\x12\x7e\xf7\xaf\x20\x74\xc8\xcb\xe1\xe4\xc4\x97\x6b\x2f\xd5\x5b\x1a\xbb\x6d\x70\x8d\x6b\xd8\x4e\x81\xe2\xb0\x08\xc6\xd4\xd8\xe2\x86\xe2\x70\x49\xca\x89\xb7\x9b\xff\xbe\xa0\x24\xcb\xa2\xad\xa4\x49\xb6\xab\x17\x5b\x22\xe7\x9b\xe1\xc7\xe1\x37\x43\xd0\xe2\x2b\x1a\x2b\x48\x25\x6c\x3d\xe8\xdd\x0a\x95\x26\x6c\x86\x66\x2d\x38\x9e\x73\x4e\x85\x72\xbd\x1c\x1d\xa4\xe0\x20\xe9\x31\xa6\x20\xc7\x84\x71\x32\x98\x2a\x5b\xbf\x5b\x0d\x1c\x13\x76\x5b\x2c\x30\xb6\x1b\xeb\x30\xef\xc5\x71\xdc\x6b\x43\x9b\x05\xf0\x3e\x14\x2e\x23\x23\x7e\x07\x27\x48\xf5\x6f\xcf\x6c\x5f\xd0\x71\xe3\xf4\x42\x16\xd6\xa1\x99\x92\xc4\xc0\xa3\x84\x05\x4a\xeb\xff\xb1\xd2\x85\x51\xe8\xb0\x34\x5d\x10\x39\xeb\x0c\x68\x2d\xd4\xaa\xf2\x11\xa7\xb8\x84\x42\x3a\xdb\x84\x5a\x05\x94\x6c\x23\x36\x85\x44\x9b\xf4\x62\x06\x5a\x7c\x34\x54\xe8\x12\x39\x66\x51\xd4\x63\xcc\xa0\xa5\xc2\x70\xac\xbf\xa1\x4a\x35\x09\x55\x82\xc5\xcc\x56\xa4\x54\x2f\x9a\xd2\xea\x4f\xb3\x7e\xff\xba\x46\xb3\xa8\x6d\xa5\xb0\xae\xfc\x73\x07\x8e\x67\x87\xfe\x52\x61\x39\xad\xd1\x6c\x6a\x1e\x9e\xf0\x2e\xc5\x0f\xd1\xff\x12\xdb\xef\x85\x4a\x85\x5a\x05\xa4\x83\x52\xe4\x4a\xcb\x9a\xf9\x2e\xc8\x60\x33\xa0\x70\x54\xe8\x14\x1c\x26\x2c\x72\xa6\xc0\xe8\xe7\xef\x1d\x49\x9c\xe2\xb2\x8c\xaf\x66\xf3\x89\xb5\xf6\x18\x3b\x4c\xac\x47\x90\x6d\xb1\xf8\x15\xb9\x2b\x13\xa3\xf3\x08\xbc\x3a\xf1\x77\x84\x93\x5a\x8a\xd5\x15\xe8\xd7\x1c\xa7\xed\xf4\x0b\x32\xb8\x14\x12\x13\xf6\x47\xc9\x69\x3f\x79\x73\xca\xbe\x97\x7f\xfd\x83\xc6\x90\xb1\xcd\x6b\x86\x20\x5d\xd6\xbc\x1a\x84\x74\xd3\xbc\xed\xb6\x83\x1d\x7d\xbf\xf8\x7c\x3d\x9b\x8f\xa6\x37\xc3\x2f\x57\xe7\x97\xe3\x87\x23\x26\x54\x0c\x69\x6a\xfa\x60\x34\x30\xa1\xdf\x56\x7f\x76\x9e\x58\x79\x02\x98\x50\x16\x79\x61\xb0\xf5\x7d\x09\x52\xba\xcc\x50\xb1\xca\xba\x51\x9a\xb9\x0f\xbb\x40\xc9\x3a\xcb\x8e\xd1\xf1\xe3\x9a\x8a\xe3\x31\xa5\xf8\xa9\xfc\xdc\x76\xea\x9c\x64\x6f\x4f\x5a\x1f\x0c\x4a\x82\x94\x0d\xde\xd8\xee\x10\x3a\x9c\x69\x43\x39\xba\x0c\x0b\xcb\x92\x77\x83\x37\xa7\xcd\xc0\x92\xcc\x1d\x98\x94\xf5\xab\x48\xfc\x71\x94\xeb\x3e\x27\xb5\x6c\xa6\x70\xe0\x19\xb2\xd3\x5d\x04\x92\x48\xf7\xc2\x60\x5a\x63\x90\x2e\x40\x82\xe2\x15\x3f\x55\x08\x22\xd7\x64\x5c\xb8\x58\x5e\x58\x47\xf9\xf1\x3f\xfb\x5e\x63\xd0\x1c\x24\x11\x68\x6d\x77\x47\x77\x88\x5a\xd2\x26\xc7\xd7\x29\xf3\xde\xa1\x3c\xb3\x31\x68\x5d\x4f\xa9\x0c\xf7\x8f\x6a\x05\x1c\xf9\xdc\x1b\x8e\x67\x51\xcf\x6a\xe4\xde\xfa\x1f\x06\xb5\x14\x1c\x6c\xc2\x06\x3d\xc6\xfc\x69\x76\xb8\xda\x54\xc0\x6e\xa3\x31\x61\x53\x92\x52\xa8\xd5\x75\xa9\x0b\x95\x8e\xb4\xbf\x24\x35\x57\x39\xdc\x5f\x2b\x58\x83\x90\xb0\xf0\xc9\x5d\xc2\xa1\x44\xee\xc8\x54\x73\x72\xaf\x73\x9f\x5b\x81\x77\x87\xee\x30\xd7\xb2\x01\x6e\xb3\x53\x6e\x48\x60\xff\xd8\xe2\xb7\xcb\xab\x72\x45\x90\x11\x6e\x73\x21\xc1\xda\x71\xc5\x43\xc5\x63\xcc\x2b\x55\x89\xb9\x11\x4e\x70\x90\x51\x6d\x62\x03\xe1\x18\xef\x6d\x4a\x49\x0d\x49\x34\x6d\x6d\xf5\x4f\xcc\x6e\x71\xe3\x59\xae\xe1\xce\xd3\x94\x94\xfd\xa2\xe4\x26\x6a\x65\x36\x69\x6f\x49\x26\x61\xd1\xe8\x5e\x58\x67\xa3\x03\x00\x45\x29\xc6\x5e\x29\xf7\xf4\x99\x93\x72\x86\x64\xac\x25\x28\x7c\x26\x26\x63\xb8\x5c\x22\x77\x09\x8b\xc6\x34\xe3\x19\xa6\x85\xc4\xe7\xbb\xcc\xc1\x33\xf4\x33\x7c\x79\x0f\xb3\x20\x21\xfc\xb3\x40\x07\x7b\x2e\xc9\x26\x4c\x0a\x55\xdc\x37\x5c\x6b\x92\xb4\xda\xcc\xb4\x57\xbf\x0b\x52\x3e\x4b\x7d\x51\x6d\x33\x9f\xc3\xfd\xec\x16\xef\xaa\xbc\xdb\x3e\x5b\xcb\xff\xf9\x25\x86\x4e\xbc\x5c\xf9\x43\xd1\x9a\x7d\x97\xa1\xba\x56\x16\x9c\xb0\x4b\x51\x25\xf1\x90\xc6\xe4\xb6\x0b\x69\x4d\x2d\xb3\xf0\x70\x31\x8f\x64\xf9\xd3\xb9\xca\x98\xdf\x56\x10\x0a\x4d\x63\x11\x1f\x28\x41\xf5\x88\x1c\x56\x98\xb0\xa3\xef\xb3\x6f\xb3\xf9\xe8\xea\x66\x38\xfa\x70\x7e\xfd\x79\x7e\x33\x1d\x7d\xbc\x9c\xcd\xa7\xdf\x1e\x8e\x0c\x28\x9e\xa1\x39\xce\x85\xaf\x23\x98\xc6\x35\xc4\xf6\x37\x19\xf4\xdf\xf5\xff\x13\x02\x4e\x0a\x29\x27\x24\x05\xdf\x24\xec\x72\x39\x26\x37\x31\x68\xb1\xac\x98\xd5\x13\x74\x35\x0d\x07\x22\x17\x6e\x6f\x8d\x39\xe6\x64\x36\x09\x1b\xfc\xf7\xe4\x4a\x04\x12\xff\x5b\x81\x76\x7f\x36\xd7\x45\xc2\x06\x27\x27\x79\x27\x46\x00\x01\x66\x65\x13\xf6\x7f\x16\xc5\x5e\xcb\xa3\x7f\xb1\x28\x10\xdf\x6d\x4d\x8d\xd8\x2f\x8d\xc9\x9a\x64\x91\xe3\x95\x3f\xc1\x41\xa6\x6c\x99\xf5\xa5\x3c\xae\x26\xb5\xfc\xe7\x7e\xfe\x04\x5c\x96\x04\xf2\x1e\xac\x05\x52\x7f\xa6\x13\xe6\x3b\xa4\x43\xe0\xb2\x0e\xc4\x2f\xc4\xaf\xcb\xc7\x8f\xdd\xf8\xc2\x13\x2c\xa7\x49\x9e\x09\x19\x97\xb0\x56\x2d\xdc\x96\x93\x30\x7c\x6d\xc8\x11\x27\x99\xb0\xeb\xe1\xe4\xa5\x38\xb1\xe3\xba\x13\x6b\x7e\xf1\x04\x56\x50\xa1\xb7\x68\x39\x3a\x23\x78\x77\x64\x6d\xb4\xb2\x39\xf1\xf2\x4d\xca\xe1\xbd\x6b\x67\x10\x48\x49\x77\x13\x23\xd6\x42\xe2\x0a\x47\x96\x83\x2c\x25\x39\xf1\xdd\x83\x6d\xb3\xce\x41\xc3\x42\x48\xe1\x04\xee\xe5\x20\xa4\x69\xf8\x21\x66\xe3\xd1\xfc\xe6\xfd\xe5\x78\x78\x33\x1b\x4d\xbf\x5e\x5e\x8c\x82\xe1\xd4\x90\xde\x37\x00\x29\x3b\x36\x6e\x4a\xe4\x3e\x08\x89\x75\x9b\x1a\x6e\xa3\x14\x6b\x54\x68\xed\xc4\xd0\x02\xdb\x78\x99\x73\xfa\x23\xba\xd0\x85\xae\xf2\x65\xaf\x17\x64\x75\x3a\x24\xec\xec\xe4\xec\x24\xf8\x6c\x79\x86\x9e\xe4\x4f\xf3\xf9\xa4\x35\x20\x94\x70\x02\xe4\x10\x25\x6c\x66\xc8\x49\xa5\x36\x09\x7b\x31\x8d\x46\x50\xda\x8c\x0d\xda\x63\x4e\xe4\x48\x85\xdb\x0d\xb6\xc6\x6c\xc1\x39\x5a\x3b\xcf\x0c\xda\x8c\x64\x1a\x8e\x2e\x41\xc8\xc2\x60\x6b\xf4\x34\xe8\x68\xc5\x8b\xa9\x08\xfb\xe0\x16\x13\x83\xb3\xc1\xab\x99\x78\x82\x88\x7f\xff\xcd\x3c\xa4\xca\x6e\x15\x78\x58\xdd\xa0\xea\x81\x4a\x40\x5e\x20\x60\x7c\x7b\x47\x09\x79\xeb\xae\x27\x25\x15\x0e\x73\xbb\x9f\xd2\x65\x53\xb0\x55\xd5\xbd\x32\x56\x6d\x41\xe7\x60\x6d\xd8\x34\xfe\x9d\x96\x87\xa3\xcf\xd4\xce\xe7\x2c\x2d\x3e\x10\x52\xdf\xb1\x78\x55\x00\x59\x9f\xc1\x47\xaf\x77\xf5\x7d\xb1\xa3\x23\x6f\x15\xec\x47\x5b\xf2\x83\xeb\xf6\xee\x92\xe2\x1b\x8e\x2a\x3f\x23\xaf\x85\x51\xc7\xb0\xe5\x06\xf4\xa3\xd7\xee\x67\x74\xf8\xdb\x5e\xb6\xee\x5d\x5b\x48\xcf\xbd\x0b\x84\xdd\x7a\x97\xcf\xda\xc7\xe5\x24\x69\xdf\x37\xc7\xb3\x87\xa3\x5e\xab\x32\xc5\x7b\x75\x47\xb7\x0b\xca\x7e\xf9\x89\x3b\x8a\xcb\x23\x06\x55\x55\x88\x3b\xea\x87\x0e\xcb\x4c\x68\xf2\x67\x00\x00\x00\xff\xff\x12\x94\x21\x57\x1e\x13\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4f\x6f\xdb\x36\x14\xbf\xeb\x53\xbc\x69\xcd\x61\x43\x29\x27\xeb\x80\x0c\x2c\x76\x70\x13\x27\x0b\x90\xd8\x86\xed\x6d\x28\x8a\xc2\xa0\xa9\xe7\x98\x0d\x45\x12\x24\xe5\xd6\xcd\xf2\xdd\x07\x8a\xb2\x23\x39\x6e\x62\x63\xdb\x6d\xba\x08\x7c\x7c\xbf\xf7\xff\x0f\x99\x11\x7f\xa0\x75\x42\x2b\x0a\xcb\x93\xe4\x4e\xa8\x9c\xc2\x18\xed\x52\x70\xec\x72\xae\x4b\xe5\x93\x02\x3d\xcb\x99\x67\x34\x01\x50\xac\x40\x0a\x52\x73\x26\x89\x61\x7e\x41\x8c\xd5\x4b\x11\xf0\x68\x89\x8b\x38\xc2\x6a\x60\x64\x77\x86\x71\xa4\x70\x57\xce\x90\xb8\x95\xf3\x58\x24\x84\x90\xa4\xa9\xd9\xce\x18\xcf\x58\xe9\x17\xda\x8a\xaf\xcc\x0b\xad\xb2\xbb\x5f\x5c\x26\x74\x67\x63\xd3\x99\x2c\x9d\x47\x3b\xd2\x12\xf7\x37\xc8\x06\x6e\x5b\x4a\x74\x34\x21\xc0\x8c\xb8\xb4\xba\x34\x8e\xc2\x87\x34\xfd\x98\x00\x58\x74\xba\xb4\x1c\x2b\x8a\xd2\x39\xba\xf4\x35\xa4\x26\x98\xe5\x3c\x2a\xbf\xd4\xb2\x2c\x90\x4b\x26\x8a\xea\x86\x6b\x35\x17\xb7\x05\x33\xae\x82\x2f\xd1\xce\x2a\xe8\x2d\xfa\x70\x2d\x85\xab\xfe\x9f\x99\xe7\x8b\xf4\xe3\xcb\x2a\x51\xe5\x46\x0b\xe5\x77\xaa\x8d\x44\x9d\x6f\xe9\xfa\x71\x2f\xc1\x4b\x0c\x52\x5b\x40\x6e\x91\x79\xac\x84\xee\xb6\xcf\x79\x6d\xd9\x2d\xd6\xa1\x7f\x2a\xb4\xbe\xe7\x92\x39\x87\x7b\x46\xe0\x1f\x25\xfa\x9d\x50\xb9\x50\xb7\xfb\xe7\x7b\x26\x54\x9e\x84\xa4\x8f\x70\x1e\x98\xd7\xee\x3d\xa3\x38\x01\x78\x5a\x60\xfb\x94\x95\x2b\x67\x9f\x90\xfb\xaa\xb2\x76\xb6\xcd\x7f\xd5\x2c\xcc\x18\xf7\x18\xae\x73\x34\x52\xaf\x0a\x3c\xa0\x4f\xbf\xad\xca\x19\xe4\xb4\x4a\xbb\x91\x82\x33\x47\xe1\x24\x01\x70\x28\x91\x7b\x6d\xc3\x0d\x40\x11\x52\x7b\xcd\x66\x28\x5d\x24\x84\x30\x9b\x67\x74\x79\x2c\x8c\x64\x1e\x6b\x78\xc3\xc8\xf0\xc9\x96\xa4\x97\x64\x01\xac\x4d\x0c\x9f\xb1\x42\x5b\xe1\x57\x67\xa1\x22\xfb\x95\xc7\x69\xf4\x84\x84\x66\x26\xdc\x0a\x2f\x38\x93\x69\xcd\xef\x5a\x09\xea\x1f\x96\x9d\xf0\x79\x2d\xd1\x56\xd5\xd3\xb0\x18\x80\xc0\x1d\xae\x28\xa4\x67\xb5\xbe\x6e\x9e\x6b\xe5\x06\x4a\xae\xd2\x06\x17\x80\x36\x01\xad\x2d\x85\xb4\xf7\x45\x38\xef\xd2\x1d\x42\x2a\xcb\x43\x85\x65\x21\x33\x56\xa1\xc7\xaa\x41\xb8\x56\xde\x6a\x49\x8c\x64\x0a\x0f\x90\x0b\x80\xf3\x39\x72\x4f\x21\xed\xeb\x31\x5f\x60\x5e\x4a\x3c\x44\x71\xc1\x42\x5f\xfc\x5b\x1a\x83\x1b\x4c\x28\xb4\x9b\x08\x92\x97\x8a\x35\x7e\xa2\x60\xb7\x48\xe1\xe8\x7e\xfc\x7e\x3c\xe9\xdd\x4c\xcf\x7b\x17\xdd\xdf\xaf\x27\xd3\x51\xef\xf2\x6a\x3c\x19\xbd\x7f\x38\xb2\x4c\xf1\x05\xda\xce\x6e\x41\x74\x79\x9c\x1d\x67\x3f\xbd\x69\x0b\x1c\x96\x52\x0e\xb5\x14\x7c\x45\xe1\x6a\xde\xd7\x7e\x68\xd1\xe1\x26\xe1\xc1\xde\xa2\x60\x2a\x7f\x4c\x37\x79\xc9\x50\x02\xce\x33\xeb\x1b\x67\x42\xe2\xe2\x68\x90\x3a\xe8\x79\x27\x52\xeb\x5f\xf6\xc9\x69\xb5\xe1\x88\x2b\xe0\x26\xd4\x9e\x6b\xea\x8e\xa1\x8a\x08\x12\x99\x1a\x91\x2f\x02\xff\x90\xf9\x05\x6d\x29\xd8\x70\xa0\x5a\x3e\x15\x36\x1c\x9c\x4f\xfb\xdd\x9b\xde\x78\xd8\x3d\xeb\x35\x84\x2d\x99\x2c\xf1\xc2\xea\x82\xb6\x72\x3b\x17\x28\xf3\x7a\xbe\x3e\xa1\x47\xdd\xeb\x1e\xcf\x36\x63\x26\x69\x7a\x75\x80\x43\x91\x7e\xc3\x4c\x5b\xdb\x93\x82\xa9\xe3\xbb\x3d\x2a\xdb\x1b\xed\x71\x68\x8e\x23\xbd\x9a\x1b\xcf\x8e\xcd\xb0\x43\x94\xd2\xbe\xd9\xf3\xcd\x35\xb8\xd5\x2a\xc2\x91\x1c\xe7\xac\x94\x9e\x54\xd7\x14\x52\x6f\x4b\x4c\x93\x66\x1d\x42\x5d\xa7\x01\xd0\xd0\x14\x7d\xaf\x57\xde\x8d\xce\x91\xc2\x9f\x4c\xf8\x0b\x6d\x2f\x84\x75\xfe\x4c\x2b\x57\x16\x68\x13\x1b\xdf\x23\xeb\xa2\x3d\x47\x89\x1e\x2b\xcf\xeb\x3d\xb6\x0e\x59\xb2\xf5\xb6\x7b\x76\x3d\x6c\x0a\xf4\x1b\x9b\x61\x0d\x6c\xd4\x2a\x85\xbf\x48\x15\x90\xfb\x3a\x37\xd5\x04\x09\x15\x70\xc3\x4c\x4a\x3f\xd4\xd4\xfb\x4d\xe6\xaa\xfb\x94\xa6\xeb\xce\x1d\x76\x27\xbf\x4d\x2f\x06\xa3\x69\x7f\xd0\x9f\x5e\x5f\x8d\x27\xbd\xf3\x69\x7f\x70\xde\x1b\xa7\xaf\x1f\x31\xc1\x3a\x97\xd2\x0f\xe9\xd1\xfd\x1a\x77\x3d\x38\xeb\x5e\x4f\xc7\x93\xc1\xa8\x7b\xd9\xab\xa4\x3c\x1c\x55\xaf\x91\xf0\x3d\xd4\xff\x78\x7e\xa8\xd6\x97\x0f\x2f\x80\xda\xd8\xef\xbf\xeb\xcc\x84\xea\xb8\x45\x75\xfa\xbc\x10\x12\xe1\x16\xbd\x36\xde\x41\x5a\x50\x47\x0d\x4d\x41\x9b\xd8\xbe\xb9\x7e\x9c\x03\xcc\x21\xbc\xd2\xc6\x83\x50\xad\x5a\x34\x3f\xb4\x8e\x6c\xe6\xb4\x2c\x7d\x15\x87\x5f\x5f\x0d\x86\x93\xee\xe8\xb2\xc5\xf0\xf6\x6d\xeb\xe8\xda\x70\x27\xbe\xe2\x95\x7a\xb7\xf2\xe8\xf6\x41\x17\x6d\xf4\x52\xcb\x50\x39\x2f\x21\xd1\x31\x5e\xfb\xa7\x62\xb7\x15\x77\xb9\xb0\x40\x0a\x38\x3e\x3d\x3d\x05\x62\xe0\xd5\x7d\xd3\x91\x18\x54\xbe\x28\x74\x0e\xa7\xc7\x27\xdb\xb7\x9d\x2c\xab\xf6\x3c\xb3\xb9\xfe\xac\xfe\x0f\xf5\xb3\xa1\xb6\x05\x10\x3b\xdf\x11\xe0\x05\x4a\x83\x76\xa8\xf3\x6c\xc5\x0a\xb9\x89\xe2\x56\x17\x07\x52\x6c\xf4\xa1\xce\x77\xbe\xa8\x62\x6f\x47\x69\xc4\xd4\x4c\xcd\x67\xd3\xb7\x57\xf0\x16\x08\x0e\x5a\xbb\x85\xb0\x56\x5b\xcc\x89\x14\x33\xcb\xec\x8a\xcc\x4a\xb7\x9a\xe9\x2f\xf4\x24\x7b\xf3\x73\x76\xb2\xe7\xde\xfd\x3b\x00\x00\xff\xff\xc9\xbd\x34\xf2\x91\x0e\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x31\x6b\xf4\x30\x0c\xc6\xf1\xdd\x9f\x42\x78\x7e\x93\x97\x6e\xc5\x6b\x87\xee\x1d\xba\x94\x1b\x94\xf8\x21\x27\xce\xb1\x83\x24\xe7\x68\x3f\x7d\xb9\x70\xdc\x58\x68\x27\x0d\x7f\x7e\x0f\xe8\x22\x35\x27\x7a\x29\xdd\x1c\xfa\xd6\x0a\x02\x6f\xf2\x0e\x35\x69\x35\x91\x4e\x3c\x8f\xdc\xfd\xdc\x54\xbe\xd8\xa5\xd5\xf1\xf2\x6c\xa3\xb4\xff\xfb\x53\x58\xe1\x9c\xd9\x39\x05\xa2\xca\x2b\x12\xd9\xa7\x39\xd6\xc4\xcb\xa2\x58\xd8\x91\x87\x15\xae\x32\xdb\xa0\xe0\x0c\x0d\x44\x85\x27\x14\xbb\x11\xfa\x61\xfd\xb1\x30\x78\x1b\x76\xc1\x35\x51\x74\xed\x88\xbf\x71\xc8\xe2\x7f\x71\x9c\x57\xa9\x0f\xa8\xbd\xc0\x52\x18\x88\x37\x79\xd5\xd6\x37\x4b\xf4\x11\xef\x7f\xdd\x7d\x3c\x05\x22\x85\xb5\xae\x33\x8e\xbe\xb5\x6c\xf1\x1f\xc5\xda\x32\xec\xc8\x3b\x74\x3a\xd2\x02\xbf\x95\x22\x76\xdc\x2b\xfb\x7c\x8e\xa7\xf0\x1d\x00\x00\xff\xff\xe5\x1d\x7a\x17\x89\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4e\xc4\x40\x0c\x45\xfb\x39\xc5\x5c\x60\x82\xe8\x90\x3b\xa0\xa0\x5f\x24\x7a\x67\xf2\x59\x4c\x92\x71\x64\x7b\x22\xc1\xe9\xd1\x8a\x88\x06\xd8\xf6\x4b\xff\xbd\x57\x4a\x49\xbc\xc9\x0b\xcc\x45\x1b\x65\x1b\xb9\x0e\xdc\xe3\x4d\x4d\x3e\x39\x44\xdb\x30\xdf\xf9\x20\x7a\xb3\xdf\xa6\x59\xda\x44\xf9\x71\xe9\x1e\xb0\x93\x2e\x78\x90\x36\x49\x3b\xa7\x15\xc1\x13\x07\x53\xca\xb9\xf1\x0a\xca\x2b\xc2\xa4\x7a\x71\xd8\x0e\x23\xff\xf0\xc0\x4a\x17\x70\x99\xb0\xe0\xcc\xa1\x96\x4c\x17\x9c\xf0\x7a\x79\xf1\x26\x4f\xa6\x7d\xbb\x52\x90\x72\xfe\x15\xf0\xe3\xfb\x5b\xe0\x7d\x7c\x47\x0d\xa7\x54\x8e\xef\x33\x6c\x97\x8a\xfb\x5a\xb5\xb7\xf8\x27\xf7\x98\x7d\xe3\x0a\xca\x73\x1f\x51\xbe\xf9\xe9\x2b\x00\x00\xff\xff\xa5\xb5\x26\x22\x2f\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4e\x04\x31\x0c\x46\xfb\x9c\x22\x17\xf0\x22\x3a\x94\x0e\x1a\xfa\x45\xa2\xf7\x64\x3e\xc0\xcc\x8e\x13\xd9\xce\x08\x38\x3d\x1a\xb4\xfc\x34\x4b\x6f\xbf\xef\x3d\x22\x4a\xdc\xe5\x11\xe6\xd2\xb4\x64\x9b\xb8\x1e\x78\xc4\x4b\x33\xf9\xe0\x90\xa6\x87\xe5\xc6\x0f\xd2\xae\xb6\xeb\xb4\x88\xce\x25\x1f\xdb\x09\x77\xa2\xb3\xe8\x73\x5a\x11\x3c\x73\x70\x49\x39\x2b\xaf\x28\x79\x45\x98\x54\x27\x87\x6d\x30\xda\x51\x64\xe0\x19\x76\x3e\xf1\xce\x15\x25\x2f\x63\x02\xf9\xbb\x07\xd6\x64\xed\x84\x23\x9e\x76\x08\x77\xb9\xb7\x36\xfa\x3f\x26\x29\xe7\x5f\x91\x9f\x5d\xbc\x05\x74\x6f\x20\xee\xf2\x67\x1c\x1a\x52\xbf\xde\xbf\x35\x7c\x4c\xaf\xa8\xe1\x25\xd1\x19\xf4\x00\xdb\xa4\xe2\xb6\xd6\x36\x34\x2e\xa4\x5c\xd6\xff\x0c\x00\x00\xff\xff\x2a\x39\xe6\xe4\x44\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x4d\x6a\xc4\x30\x0c\x85\xf7\x3e\x85\x2e\xe0\x74\xb2\x2b\xde\x75\x59\x68\x61\x20\x65\xf6\x1a\x8f\x3a\x88\xe0\x1f\x24\xd9\x90\xdb\x97\x30\x71\xba\x13\x7a\xef\xfb\x24\xef\xbd\xc3\xca\x37\x12\xe5\x92\x03\x60\x65\xa1\x27\xab\x09\x1a\x97\x3c\xad\xef\x3a\x71\x79\xeb\xb3\x5b\x39\x3f\x02\x7c\x5c\x3f\x17\x92\xce\x91\x5c\x22\xc3\x07\x1a\x06\x07\x90\x31\x51\x80\x3e\xdf\xc9\x70\x9e\x12\x99\x70\xd4\x03\x76\x5a\x29\xee\x25\x7d\x81\xfb\x38\x88\xa3\xe9\xf7\x88\xe4\x0c\xb4\x62\xa4\x00\x6b\xbb\x93\xd7\x4d\x8d\x92\x03\x78\x4a\x69\xf5\x44\x86\x1c\xa0\x8f\xdf\x8f\xf3\x0e\x80\xb3\x52\x6c\x42\xcb\xca\xf5\xe7\x6b\xb9\x91\xf0\xef\x16\xc0\xa4\xd1\x10\x5d\x85\x8b\xb0\x6d\xdf\x9c\x39\xb5\x14\x60\xbe\x5c\xfe\x65\x23\x7d\xad\xff\x02\x00\x00\xff\xff\x14\x74\xa9\x1b\x25\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\x1b\x47\x0c\xbd\xeb\x57\x10\x2a\x7c\x1c\x4b\x4a\x91\xb4\x58\xc0\x07\x23\x5a\xa7\x05\x62\x57\xd0\x2a\x05\x7c\x32\xc6\xb3\x94\x35\xf0\x7c\x95\xe4\x2a\xd9\x1a\xfe\xef\xc5\x68\x95\xcd\xae\x63\x07\x29\xda\xcc\x91\x8f\x7c\x7c\x43\x0e\x39\x4a\xa9\x89\x4e\xf6\x4f\x24\xb6\x31\x14\xb0\x5f\x4c\xee\x6d\xa8\x0b\xa8\x90\xf6\xd6\xe0\xb9\x31\xb1\x09\x32\xf1\x28\xba\xd6\xa2\x8b\x09\x40\xd0\x1e\x0b\xf0\x28\x64\x0d\x2b\x46\xda\x23\x1d\xcd\x9c\xb4\xc1\x02\xee\x9b\x5b\x54\xdc\xb2\xa0\x9f\x3c\xcd\xa0\x53\xe2\x59\x9f\x66\x89\xc9\xc5\xd6\xe3\x7f\x4a\x01\xe0\xf4\x2d\x3a\xce\x91\x00\xf7\xbf\xb2\xd2\x29\x7d\x15\xce\x09\x4d\xf6\x60\x74\x68\x24\x52\xe7\xed\xb5\x98\xdd\xfb\x41\xf8\xcb\x04\x00\x82\x3e\x39\x2d\x78\x0c\x1d\x08\xce\xe7\x05\xd1\xf9\xb8\x51\x82\x6f\xa5\x00\xf8\xac\x33\x9f\x44\x36\x92\x95\xf6\xad\xd3\xcc\x57\x07\xfe\x69\x77\x69\x15\x62\x8d\xca\x90\x15\x6b\xb4\x9b\x1e\xfd\x79\xd4\xb5\xab\x97\x05\x49\x74\x48\x5a\x6c\x0c\x03\x55\x0a\xee\xb1\x2d\x60\xfa\xf6\xc8\x7a\x5e\xd7\x31\xf0\x1f\xc1\xb5\xd3\xde\x07\x20\xa6\x1c\x19\xa9\x80\x69\xf9\xc9\xb2\xf0\xf4\x2b\x82\x83\x36\x8a\x0e\x4f\x73\x9b\x28\xa0\x20\x9f\xda\x38\x33\x31\x08\x45\xa7\x92\xd3\x01\xbf\x93\x13\x00\xb7\x5b\x34\x52\xc0\xf4\x2a\x56\x66\x87\x75\xe3\xf0\xfb\x53\x7a\xcd\x82\xf4\x7f\xe4\xda\x47\xd7\x78\xec\xcb\xf5\x13\xf8\x5c\x63\xb0\x01\xc4\x27\xe0\x08\x1f\x11\x8c\x0e\xc0\x7a\x8b\xae\x85\x86\x11\xb6\x14\xbd\x62\x43\xf9\x8d\x81\xf5\xfa\x0e\x19\x74\xa8\x67\x91\x80\x50\xd7\x2a\x06\xd7\x42\x2e\x8a\xb6\x01\x89\x27\x9f\xaf\xd4\xbd\x24\xf1\x49\xd5\x96\x7a\x75\xe8\x93\xb4\x4b\x4b\x05\x3c\x3c\x1e\x8d\x5f\x62\x8b\x27\xc1\xcf\x76\x1d\x3a\x11\x05\x9c\x3c\x54\xd7\xd5\xa6\xbc\xbc\x59\x96\x17\xe7\x1f\xde\x6f\x6e\xd6\xe5\xbb\xdf\xab\xcd\xfa\xfa\xf1\x84\x74\x30\x3b\xa4\x99\xb7\x44\x91\xb0\x56\x63\xa6\x62\x3f\x3f\x7d\x73\xba\xe8\x09\x35\xdd\x8d\x5e\x90\x52\x06\x49\xb2\xee\xb3\x99\xf8\x34\x42\x18\x4d\x43\xa8\x52\x24\x39\x5b\xcc\x5f\xbd\x9e\x8f\xd0\xdc\x37\x87\xa2\x12\xe1\x16\x29\x67\xd6\x75\x4d\xc8\xac\xa4\x4d\xc8\x67\x27\x0f\xab\x75\x79\x51\xae\xd7\xe5\xf2\xe6\x7c\xb9\x5c\x97\x55\x75\xb3\xb9\x5e\x95\xd5\xe3\xc9\xb3\x3c\x0d\x63\x37\x24\x2c\x5a\x1a\x3e\xa4\x1d\x39\x76\x17\x53\x84\x1c\x5d\x93\x47\xe1\x6c\xf1\x9a\x7b\x8f\x6c\x6e\xc8\xe0\xe0\x76\xd9\xf8\x57\x83\x2c\x23\x1b\x80\x49\x4d\x01\x8b\xf9\xdc\x8f\xac\x1e\x7d\xa4\xb6\x80\x5f\xe6\x97\xb6\x07\xb2\x88\x51\xbd\xba\x6e\xed\x44\x12\x0f\xa2\xfb\xbe\xae\x22\x49\xe6\x1e\x16\x2b\xaf\x85\x28\xd1\x44\x57\xc0\xe6\xed\x6a\xa0\x58\xd7\x36\x20\xf3\x8a\xe2\x2d\x0e\x25\x66\xfa\x77\x28\x63\xd5\x49\xcb\xae\x80\x59\x8e\x6a\xff\x1e\x23\x87\xa4\x4f\x35\x01\xb0\xd9\x61\x56\xfb\xdb\x66\xb3\xaa\x06\x88\x0d\x56\xac\x76\x4b\x74\xba\xad\xd0\xc4\x50\x73\x01\x23\xbd\x48\x36\xd6\x3d\xf4\x6a\x00\x89\xf5\x18\x1b\xe9\xb1\xc5\x00\xe3\xc6\x18\x64\xde\xec\x08\x79\x17\x5d\x3d\x46\xb7\xda\xba\x86\x70\x80\xfe\xdc\xa3\xce\xee\xf1\x5f\x57\x22\x07\xfd\x80\x42\xbc\xf9\x46\x25\x16\xf3\x1f\x5e\x8a\xc3\xd0\xe5\x2f\x24\x06\xc1\x4f\x32\x7e\xcd\xba\xce\xdb\x7d\x1d\xa3\x5c\x58\x87\xdd\xcf\x52\x80\x50\x83\x43\xb7\x26\x9c\xf3\x55\x0c\xd9\xed\x79\xf0\x03\x23\x1d\x26\x60\x78\x1d\xed\x5c\xfc\xb8\x22\xbb\xb7\x0e\xef\xb0\x64\xa3\xdd\xe1\xc3\x29\x60\xab\x1d\x7f\xe1\xe8\xf6\xea\x65\x5e\xa6\xcf\x4c\xc6\xd3\x25\x08\xdd\xda\x5d\x75\x2d\xcb\x1b\xe6\x9f\x00\x00\x00\xff\xff\x23\x10\x3e\xbf\xc3\x08\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3f\x4b\x04\x31\x10\xc5\xfb\x7c\x8a\x61\xfb\x28\xe2\x15\x92\xd6\x5a\x38\x50\xec\xe7\x72\x0f\x0d\x97\x4d\xc2\xcc\xec\x82\xdf\x5e\x76\xf6\x9a\x83\xed\x92\x37\xef\xcf\x2f\xc6\x18\x78\x94\x6f\x88\x96\xde\x12\xad\x2f\xe1\x56\xda\x35\xd1\x27\x64\x2d\x19\x61\x86\xf1\x95\x8d\x53\x20\x6a\x3c\x23\xd1\x0c\x93\x92\x35\x2a\x64\x85\xdc\x65\x1d\x9c\x91\xe8\xb6\x5c\x10\xf5\x4f\x0d\x73\x20\xaa\x7c\x41\xd5\x2d\x49\x7e\x91\x06\x83\x3e\x95\xfe\xbc\x37\x4d\x1f\x0f\x55\xd3\x81\x31\xd7\x45\x0d\xe2\x8e\xb2\x2d\x4c\x26\x0b\xa6\xa0\x03\x79\x2b\x56\x54\x64\xeb\x72\x1f\x79\xd3\xc8\x63\x1c\x30\x8e\x2e\xe6\x24\xd1\x9f\x89\x4e\xa7\x57\x8f\xec\x24\xbf\x66\x43\xfd\x3f\xa4\x5b\xcf\xbd\x26\xfa\x7a\x3f\xbb\x62\x2c\x3f\xb0\xb3\xa7\x76\xdf\x7f\x00\x00\x00\xff\xff\x7e\x3b\x1f\x83\x35\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x4b\xc4\x30\x10\x85\xef\xf9\x15\xc3\xde\xd3\xc5\x9b\xe4\xa6\x1e\xbc\xaf\xe0\x3d\x4d\x9f\xbb\x63\xdb\xa4\xcc\x4c\x2a\xfa\xeb\xa5\xb6\x2a\xb8\xb0\x2c\x78\x4a\x98\xe4\x7d\x8f\xf9\xbc\xf7\x2e\x4e\xfc\x0c\x51\x2e\x39\x90\xb4\x31\x35\xb1\xda\xa9\x08\x7f\x44\xe3\x92\x9b\xfe\x56\x1b\x2e\xfb\xf9\xc6\xf5\x9c\xbb\x40\x0f\x43\x55\x83\x1c\xca\x00\x37\xc2\x62\x17\x2d\x06\x47\x94\xe3\x88\x40\xfa\xae\x86\x31\x8c\x30\xe1\xa4\x5e\x21\x33\xc4\x49\x1d\xa0\xc1\x79\x8a\x13\x3f\x4a\xa9\x93\x2e\x09\x4f\xbb\x9d\x23\x12\x68\xa9\x92\xb0\xcd\x72\xe9\xa0\xfb\x0d\xe0\x88\x66\x48\xbb\x3d\x1d\x61\xd7\x31\xa6\xd2\xe9\x2f\xec\x1c\xb2\x9c\x03\xeb\x7a\x79\x8b\x96\x4e\xee\x7f\x26\xee\x39\x77\x9c\x8f\xd7\x0b\x29\x03\x0e\x78\x59\xbe\x7d\xaf\x73\xa1\xd2\x11\x9d\xbb\xbf\x5c\xa0\xb5\x7d\x45\xb2\x2f\xe9\x6b\xf6\x09\x32\x73\xc2\x5d\x4a\xa5\x66\xfb\x89\xff\xc9\xad\x63\x9d\x62\x42\xa0\xbe\xb6\xf0\x2b\xdf\x7d\x06\x00\x00\xff\xff\xdb\x55\x9e\x61\x2a\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x21\xbb\x72\x38\xdc\x72\xf0\xd8\x0e\xdd\x03\xb4\x3b\x6d\xb3\x09\x6b\x59\x14\x48\x2a\x41\xfb\xeb\x0b\xa7\x6e\x82\xa4\x76\x90\xb4\xdd\x24\x41\x7c\x1f\x1f\xf9\x20\xd3\x13\x8a\x12\xa7\xca\x4b\x0d\xcd\x12\x8a\x6d\x58\xe8\x0d\x8c\x38\x2d\xbb\xff\xba\x24\xfe\xb3\xfd\xeb\x3a\x4a\x6d\xe5\xef\x63\x51\x43\x59\x71\xc4\x3b\x4a\x2d\xa5\xb5\xeb\xd1\xa0\x05\x83\xca\x79\x9f\xa0\xc7\xca\x77\xa5\xc6\x00\x99\x14\x65\x8b\x12\x86\x6b\x44\x0b\xd0\xf6\x94\x9c\x70\xc4\x15\x3e\x0f\xbf\x21\xd3\x83\x70\xc9\x17\xc8\xce\xfb\x2f\xe0\x03\x47\x5f\xd5\xb0\xaf\x0e\xfa\x99\x46\x86\x96\xfa\x05\x1b\xd3\xca\x85\x9b\x20\x8f\x8a\x32\xe3\xc2\xb9\x10\x82\xfb\xfe\xb4\x26\xc6\xf4\xd9\xfe\x3f\x0d\x0d\x27\x13\x8e\x11\xc5\x49\x89\x78\xd2\xb8\x0e\x15\xc1\x2f\x16\xce\x7b\x41\xe5\x22\x0d\x8e\x6f\x89\x5b\x54\xe7\xfd\x16\xa5\x1e\x9f\xd6\x68\x57\xd6\x42\x8f\x9a\xa1\x39\x17\x88\xa4\xb6\x3f\xec\xc0\x9a\xcd\x84\x56\x42\xdb\xb1\x74\x94\xd6\xa3\xdf\x29\xf1\x8f\x3f\x99\x23\x35\x74\x33\x61\x42\x10\x53\x9b\x99\x92\xe9\xfe\x96\xb9\x9d\xd3\x1c\xfc\x1f\xb5\x7f\xb8\xb4\xf9\x88\xcf\xec\xee\xf7\xb3\x7d\x0a\x38\x06\x7b\xf0\x78\x1d\xe3\x2c\xdc\x97\x01\xef\x01\x00\x00\xff\xff\x46\xd3\x6d\x9d\x0f\x04\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\x4f\x6f\xd3\x40\x10\xc5\xef\xfe\x14\x23\x4b\x39\xa1\x75\xda\xc2\xa1\xf8\x16\x52\x17\x2a\xa0\x54\x71\x0a\xea\x29\x9a\xac\x27\xf1\x2a\xeb\xdd\xd5\xec\x38\x22\x94\x7e\x77\xb4\x71\xfa\x4f\xaa\x04\x42\x70\x5b\xed\xcc\xfc\xde\xcc\x7b\x4a\xa9\x0c\x83\xf9\x4a\x1c\x8d\x77\x25\xb4\x64\xbb\x42\xa3\x88\xa5\xc2\xf8\xf1\xf6\x38\xdb\x18\xd7\x94\xf0\x81\x6c\x37\x6d\x91\x25\xeb\x48\xb0\x41\xc1\x32\x03\x70\xd8\x51\x09\xc2\x48\x2b\xb3\x51\x9a\x9b\xc3\x5f\x0c\xa8\xa9\x84\x4d\xbf\x24\x15\x77\x51\xa8\xcb\x62\x20\x9d\x46\x74\x82\x94\xd0\x8a\x84\x58\x8e\xc7\xa3\xdb\x8f\xd7\xef\xaa\xd9\x65\x35\xaf\xea\xc5\xe4\xea\xe2\x6e\x34\x8e\x82\x62\xf4\x78\xdf\x18\xc7\x4f\xe0\xea\xe4\xa8\x78\x5d\x1c\xbf\xea\xc3\xfe\x71\x54\xc8\xfa\x47\xf6\x0f\x0f\xf8\x7f\xcb\xbf\xb4\x38\x40\x24\x49\x50\x80\xb5\xf5\x4b\xb4\xc5\x20\x76\x46\x2b\xec\xad\xcc\x68\x6d\xa2\xf0\xae\x84\x7c\x74\x5b\xdf\xd4\xf3\xea\xf3\xe2\xac\x3a\x9f\x5c\x7f\x9a\x2f\x66\xd5\xfb\x8b\x7a\x3e\xbb\x59\xcc\x26\xdf\xee\x46\x79\x06\xb0\x45\xdb\x53\x9c\x7a\x27\xe4\xa4\x84\x9f\x6a\xcf\x0d\xbe\x99\x38\xe7\xd3\x4a\xde\xc5\x41\x0b\x20\xb0\xef\x48\x5a\xea\x63\x32\x28\xf8\x74\x51\x7e\x7a\x74\x7a\x92\xbf\xd8\x10\x35\x63\xa0\x12\x72\xe1\x9e\x86\x96\xc0\x7e\x6b\x1a\xe2\x07\x64\xf2\x8a\x1d\x09\xc5\x0b\xb7\x66\x8a\x0f\x05\x80\xd0\x2f\xad\x89\x2d\x35\x35\xf1\xd6\x68\x7a\xac\x00\x90\xc3\xa5\xa5\x26\x05\xd0\xd3\x81\x6c\x3c\x1b\xd9\x4d\x2d\xc6\x78\xb9\x0f\x27\x1f\x6c\x51\xda\xf6\x51\x88\x95\x66\x23\x46\xa3\x1d\x56\x31\x1d\xae\x1f\x98\x43\x9a\x39\xa3\xd3\x2d\xf1\xb8\x33\xcc\x9e\xa9\x51\xd6\x2c\x19\x79\xa7\x0e\x71\xdc\xdf\x29\xb8\x2e\x21\x3f\x29\xde\x16\x6f\x86\x2f\xf1\x96\xf8\xa9\x59\x0a\x36\x94\x12\x98\x1e\x34\x27\x4d\xe3\x5d\xfc\xe2\xec\xee\x9e\xe1\x43\x9a\xf0\x5c\x42\x5e\x7d\x37\x51\x62\xfe\x6c\xd0\xf9\x86\x14\x7b\x4b\xc5\xa3\x45\xc9\x54\xed\x9d\xb0\xb7\x2a\x58\x74\xf4\x1b\x16\x00\xad\x56\xa4\x53\x4a\x97\xbe\xd6\x2d\x35\xbd\xa5\x3f\x93\xe9\x30\x59\xf6\xf7\xfc\xf8\x3c\x33\x13\xce\xb1\x33\x76\x77\xe5\xad\xd1\x49\xf7\x8a\x69\x45\x7c\xd6\xa3\xad\x05\xf5\x26\xcf\x7e\x05\x00\x00\xff\xff\x38\x7c\x74\xdd\x4f\x04\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
