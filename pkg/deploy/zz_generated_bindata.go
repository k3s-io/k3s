// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/runtimes.yaml
// manifests/traefik.yaml
//go:build !no_stage
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8f\x13\x31\x0c\x85\xef\xf3\x2b\xa2\x1e\x91\xd2\x15\xe2\x82\xe6\x08\x07\xee\x2b\xc1\xdd\x4d\x1e\xdd\xd0\x4c\x1c\xd9\x4e\x61\xf9\xf5\x68\x3a\x5d\x51\x3a\xdb\xd2\x16\x10\x7b\x8b\xac\xf8\xf3\xf3\x73\x62\xaa\xe9\x13\x44\x13\x97\xde\xc9\x8a\xc2\x92\x9a\x3d\xb0\xa4\xef\x64\x89\xcb\x72\xf3\x56\x97\x89\xef\xb6\xaf\xbb\x4d\x2a\xb1\x77\xef\x73\x53\x83\xdc\x73\x46\x37\xc0\x28\x92\x51\xdf\x39\x57\x68\x40\xef\x36\x6f\xd4\x87\xcc\x2d\xfa\xc0\xc5\x84\x73\x86\xf8\x81\x0a\xad\x21\x9d\xb4\x0c\xed\x3b\xef\xa8\xa6\x0f\xc2\xad\xea\x98\xe8\x5d\x60\x96\x98\xca\x61\xbd\xce\x39\x81\x72\x93\x80\xfd\xa5\x0c\x52\x68\xe7\xdc\x16\xb2\xda\xc7\xd6\xb0\x09\x20\x20\xc3\xee\xd8\x6a\x1c\x8f\xb3\x1a\x8b\xc5\x1c\x89\x2d\x8a\x1d\x21\x0f\x50\x95\x2c\x3c\x5c\x0d\x2d\x1c\x8f\x65\x2e\x5e\x2d\xae\xc8\xbd\x53\x23\x6b\xba\x0b\x28\x64\x9b\xc2\x61\xec\x00\x3b\xe9\xbb\x08\xfc\xc4\x99\xf2\x38\x9e\xf0\x31\x27\x9d\x0e\x5f\x6f\x42\xcf\xb4\x5d\xeb\xdd\x9e\x45\x21\x70\x3b\x37\x99\x51\xef\x65\x86\xd2\x00\xad\x34\x93\xf7\x3b\x16\xd5\xaa\x73\x5a\x24\x0c\x5c\x14\xc7\xca\x9e\x9f\x6f\x4c\x1a\x78\x0b\x79\xdc\x3f\xe9\xe7\x1e\x60\x89\x95\x53\x31\xcd\x73\x07\x4f\xcd\xc4\xfb\xee\xf6\x1f\xfb\x2e\x95\x98\xca\xfa\xea\x8f\xcb\x19\xf7\xf8\x3c\xde\x7e\xea\xf2\x4c\xe5\xce\xb9\xf9\xaa\xb8\xa8\x8e\xb6\xd5\x17\x04\xdb\xed\x88\x09\xf1\x51\x21\x97\xe5\xba\x9f\xc3\xee\xdd\xa6\xad\xe0\xf5\x51\x0d\xc3\x7f\x71\xcc\x8f\x7c\x1f\x91\xb1\x26\xe3\xbf\x6a\xe0\xd4\x55\x7f\x54\xe0\xa5\x38\xf7\x87\x96\xa1\x58\x0a\x3b\xb2\x17\x50\x3c\x27\xee\x46\x4b\x7f\xf1\x12\xdf\x0c\x65\xec\xcd\x53\x4d\xe3\xf2\x39\x29\xe3\x9f\xf8\xfb\x23\x00\x00\xff\xff\xde\xc0\x02\x82\x7a\x07\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x6f\xe3\xb0\x0d\x7f\xcf\xa7\x10\x0c\xf4\x65\x98\xd3\x66\xdd\xdd\x3a\xbd\xf5\x92\xf4\x2e\x58\x9b\x0b\x92\xf4\x80\x62\x18\x0a\x45\x66\x62\xad\xb2\xa8\x49\x72\xda\xec\xd6\xef\x3e\xc8\xff\x62\x25\x6e\xaf\xed\x6e\x79\x89\x6d\x8a\xa4\xf8\x13\xf9\x23\xc5\xb4\xf8\x01\xc6\x0a\x54\x94\x6c\x07\xbd\x07\xa1\x12\x4a\x16\x60\xb6\x82\xc3\x25\xe7\x98\x2b\xd7\xcb\xc0\xb1\x84\x39\x46\x7b\x84\x28\x96\x01\x25\x1c\x0d\x24\xca\x56\xef\x56\x33\x0e\x94\x3c\xe4\x2b\x88\xed\xce\x3a\xc8\x7a\x71\x1c\xf7\xda\xa6\xcd\x8a\xf1\x3e\xcb\x5d\x8a\x46\xfc\x9b\x39\x81\xaa\xff\x70\x61\xfb\x02\x4f\x1b\xa7\x43\x99\x5b\x07\x66\x8e\x12\x02\x8f\x92\xad\x40\x5a\xff\x44\x0a\x17\x46\x81\x83\x42\x75\x85\xe8\xac\x33\x4c\x6b\xa1\x36\xa5\x8f\x38\x81\x35\xcb\xa5\xb3\xcd\x56\xcb\x0d\xd1\x7a\xc7\x26\x97\x60\x69\x2f\x26\x4c\x8b\xaf\x06\x73\x5d\x58\x8e\x49\x14\xf5\x08\x31\x60\x31\x37\x1c\xaa\x6f\xa0\x12\x8d\x42\x15\xc6\x62\x62\x4b\x50\xca\x17\x8d\x49\xf9\xd0\xc4\xef\x5f\xb7\x60\x56\x95\xae\x14\xd6\x15\x0f\x8f\xcc\xf1\xf4\xd8\x5f\x22\x2c\xc7\x2d\x98\x5d\x85\xc3\x2b\xde\xa5\xf8\xa5\xf5\xff\x09\xed\x2f\x42\x25\x42\x6d\x02\xd0\x99\x52\xe8\x0a\xcd\x0a\xf9\x2e\x93\xc1\x61\xb0\xdc\x61\xae\x13\xe6\x80\x92\xc8\x99\x1c\xa2\xdf\x7f\x76\x28\x61\x0e\xeb\x62\x7f\x15\x9a\xaf\xc4\xda\x23\xe4\x38\xb1\x5e\xb0\x6c\xf3\xd5\x3f\x81\xbb\x22\x31\x3a\x4b\xe0\xc3\x89\xbf\x07\x1c\xd5\x5a\x6c\x6e\x98\xfe\x48\x39\xd5\xcb\x87\x68\x60\x2d\x24\x50\xf2\x9f\x02\xd3\x3e\xfd\x74\x4e\x7e\x16\x8f\xfe\x07\xc6\xa0\xb1\xcd\x6b\x0a\x4c\xba\xb4\x79\x35\xc0\x92\x5d\xf3\xb6\x3f\x0e\x72\xf2\x73\x78\x7d\xbb\x58\x8e\xe7\xf7\xa3\xef\x37\x97\x93\xe9\xf3\x09\x11\x2a\x66\x49\x62\xfa\xcc\x68\x46\x84\xfe\x5c\x3e\xec\x3d\x91\xa2\x02\x88\x50\x16\x78\x6e\xa0\xf5\x7d\xcd\xa4\x74\xa9\xc1\x7c\x93\x76\x5b\x69\xd6\x3e\xef\x37\x8a\xd6\x59\x72\x0a\x8e\x9f\x56\x50\x9c\x4e\x31\x81\x6f\xc5\xe7\xb6\x53\xe7\x24\xf9\x7c\xd6\xfa\x60\x40\x22\x4b\xc8\xe0\x93\xed\xde\x42\x87\x33\x6d\x30\x03\x97\x42\x6e\x09\xfd\xeb\xe0\xd3\x79\x23\x58\xa3\x79\x64\x26\x21\xfd\x72\x27\xbe\x1c\xe5\xb6\xcf\x51\xad\x9b\x25\x9c\xf1\x14\xc8\xf9\x7e\x07\x12\x51\xf7\xc2\xcd\xb4\x64\x2c\x59\x31\xc9\x14\xdf\xe3\x23\x32\x8d\xc6\x85\xa1\xf2\xdc\x3a\xcc\x4e\xff\xd0\xf7\x7c\x60\x44\x52\xae\x2e\x37\xfc\xea\x7a\xcf\x48\x60\x8e\x52\x8e\x69\x6d\xf7\x85\x3e\x02\x2d\x71\x97\xc1\xc7\x78\xfc\xa0\x84\x2f\x6c\xcc\xb4\xae\x96\x94\x8a\x87\x85\x5d\x1a\x8e\x7c\xa6\x8e\xa6\x8b\xa8\x67\x35\x70\x5a\xb0\xdb\x56\xf8\xfd\x7d\x13\xd6\xa1\xd9\x5d\x8b\x4c\x38\x4a\x3c\x92\x9e\x06\x1c\x6c\x76\xa5\x0f\xb7\xd3\x40\xc9\x1c\xa5\x14\x6a\x73\x5b\x10\x4a\x49\x40\xed\x2f\xb4\x02\x34\x63\x4f\xb7\x8a\x6d\x99\x90\x6c\xe5\xab\x62\xe0\xcd\x81\x04\xee\xd0\x94\x6b\x32\x4f\x90\xd7\xad\x18\xba\xa3\x70\x90\x69\xd9\x18\x6e\x03\x55\x9c\x64\xa0\xff\x12\x0e\x75\xa4\x65\x92\x09\x34\xc2\xed\x86\x92\x59\x3b\x2d\x21\x29\x21\x8d\x79\x49\x47\x31\x37\xc2\x09\xce\x64\x54\xa9\xd8\x80\x71\xa6\x07\xe7\x53\x40\x83\x12\x4c\x9b\x94\xfd\x2f\x26\x0f\xb0\xf3\x80\x57\xe6\x2e\x93\x04\x95\xfd\xae\xe4\x2e\x6a\x95\x04\x6a\xaf\x89\x86\x92\x68\xfc\x24\xac\xb3\xd1\x91\x01\x85\x09\xc4\x9e\x62\x0f\x88\x9d\xa3\x72\x06\x65\xac\x25\x53\xf0\x46\x9b\x84\xc0\x7a\x0d\xdc\x51\x12\x4d\x71\xc1\x53\x48\x72\x09\x6f\x77\x99\x31\x8f\xd0\xef\xf0\xe5\x3d\x2c\x82\x84\x38\xce\x58\xb4\x94\x48\xa1\xf2\xa7\x06\x66\x8d\x12\x37\xbb\x85\xf6\x8c\x39\x44\xe5\x13\xd4\x37\xe2\x36\xe8\x19\x7b\x5a\x3c\xc0\x63\x99\x72\xf5\xaf\xd6\xfc\x9b\x8f\x2e\x74\xe2\x29\xce\x97\x46\x6b\xf5\x63\x0a\xea\x56\x59\xe6\x84\x5d\x8b\x32\x7f\x47\x38\x45\x57\xc7\xd0\x5a\x5a\x24\xe0\x71\x1c\x2f\x24\xf8\xeb\x69\x4a\x88\x3f\x51\x26\x14\x98\x46\x23\x3e\xe2\x83\xf2\x27\x32\xb6\xf1\xa9\x7b\xf2\x73\x71\xb7\x58\x8e\x6f\xee\x47\xe3\xab\xcb\xdb\xeb\xe5\xfd\x7c\xfc\x75\xb2\x58\xce\xef\x9e\x4f\x0c\x53\x3c\x05\x73\x9a\x09\xdf\x7c\x20\x89\x2b\x1b\xf5\x3f\x1d\xf4\x07\x83\xfe\x9f\xa3\xd0\xe6\x2c\x97\x72\x86\x52\xf0\x1d\x25\x93\xf5\x14\xdd\xcc\x80\x85\xa2\xd1\x96\xbf\x60\x18\x6a\x60\xf0\xa4\x71\x10\x66\x06\x19\x9a\x1d\x25\x83\xbf\x9c\xdd\x88\xa0\x33\xfc\x2b\x07\x7b\xb8\x9a\xeb\x9c\x92\xc1\xd9\x59\xd6\x69\x23\x30\xc1\xcc\xc6\x52\xf2\x77\x12\xc5\xbe\x05\x44\x7f\x24\x51\xc0\xc2\x75\x2b\x8e\xc8\x3f\x1a\x95\x2d\xca\x3c\x83\x1b\x5f\xbf\x41\xb2\xd4\xe0\xfa\x09\x20\x2e\x17\xb5\xfc\x67\x7e\xfd\x8c\xb9\x94\x06\x3c\x1f\xc4\xc2\x12\x5f\xd1\x94\xf8\xc1\xea\xd8\x70\xd1\x10\xe2\x77\xda\xaf\xfa\xc8\xaf\xdd\xf8\x0e\x14\x84\xd3\xe4\xcf\x0c\x8d\xa3\xa4\xd5\x42\xeb\xbe\x12\x6e\x5f\x1b\x74\xc8\x51\x52\x72\x3b\x9a\xbd\xd7\x4e\xec\xb8\xee\xb4\xb5\x1c\xbe\x62\x2b\x68\xec\xb5\xb5\x0c\x9c\x11\xbc\x7b\x67\x6d\x6b\xc5\x4c\xe3\xc9\x1b\x95\x83\x27\xd7\xce\x20\x26\x25\x3e\xce\x8c\xd8\x0a\x09\x1b\x18\x5b\xce\x64\x41\xc8\xd4\x0f\x1d\xb6\x8d\x3a\x67\x9a\xad\x84\x14\x4e\xc0\x41\x0e\xb2\x24\x09\x3f\xc4\x64\x3a\x5e\xde\x7f\x99\x4c\x47\xf7\x8b\xf1\xfc\xc7\x64\x38\x0e\xc4\x89\x41\x7d\xa8\xc0\xa4\xec\x38\xb8\x39\xa2\xbb\x12\x12\xaa\xe9\x36\x3c\x46\x29\xb6\xa0\xc0\xda\x99\xc1\x15\xb4\xed\xa5\xce\xe9\xaf\xe0\x42\x17\xba\xcc\x97\x83\x11\x92\x54\xe9\x40\xc9\xc5\xd9\xc5\x59\xf0\xd9\xf2\x14\x3c\xc8\xdf\x96\xcb\x59\x4b\x20\x94\x70\x82\xc9\x11\x48\xb6\x5b\x00\x47\x95\x58\x1a\x8e\x70\x1a\x8c\xc0\xa4\x91\x0d\xda\x32\x27\x32\xc0\xdc\xed\x85\x2d\x99\xcd\x39\x07\x6b\x97\xa9\x01\x9b\xa2\x4c\x42\xe9\x9a\x09\x99\x1b\x68\x49\xcf\x83\x41\x58\xbc\x1b\x8a\x70\x7c\x6e\x21\x31\xb8\x18\x7c\x18\x89\x57\x80\xf8\xd3\xff\x19\x87\x44\xd9\x9a\x81\x47\xe5\xc5\xab\x12\x94\x04\xf2\x0e\x02\xe3\xf5\xd5\x26\xc4\xad\xbb\xa5\x14\x50\x38\xc8\xec\x61\x4a\x17\x23\x41\xcd\xaa\x07\x9d\xac\x3c\x82\x4e\x61\xa5\xd8\xdc\x17\x3a\x35\x8f\xa5\x6f\xe4\xce\xb7\x84\x16\x1f\x11\xa9\x9f\x57\x3c\x2b\x30\x59\xd5\xe0\x8b\xb7\xc2\xea\x9a\xd9\x31\x9a\xb7\x7a\xf6\x8b\xb3\xf9\xd1\x2d\x7d\x7f\xb7\xf1\x33\x47\x99\x9f\x91\xe7\xc2\xa8\x43\x6c\xb9\x61\xfa\xc5\xdb\xfa\x1b\x46\xfd\x7a\x92\xad\x26\xd7\x96\xa5\xb7\x5e\x0a\xc2\x59\xbd\xcb\x67\xe5\x63\x32\xa3\xed\x6b\xea\x74\xf1\x7c\xd2\x16\xda\x03\xe9\xfd\xf5\x64\xb1\x2c\x96\x34\xcd\x2b\x3e\x68\x4d\xba\xdd\x73\x0e\x3b\x54\xdc\xd1\x7f\x5e\x50\x28\x1b\x47\xdc\xd1\x62\x74\xd8\x89\x0e\x55\x84\xbe\x62\x99\x90\xbb\xba\x08\xc3\x00\x26\xb3\xab\xcb\x9b\xc9\xf5\xdd\xec\xfb\xf5\x64\x78\xf7\x7c\xd2\xfb\x6f\x00\x00\x00\xff\xff\x8e\xe7\x15\x43\xa9\x13\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\xb8\x69\xcb\xcb\x50\xca\x0e\x0a\x2c\x03\xdf\xbc\xd8\x69\x03\x38\xb6\x61\xbb\x1d\x8a\xa2\x30\x68\xe9\x6c\xb3\xa1\x48\x82\xa4\xdc\x6a\x59\xbe\xfb\x40\x52\x76\xe4\x24\x4d\x6c\x6c\xd3\x8b\xa0\xe3\xdd\xef\x8e\xf7\xbb\x3f\x62\x9a\x7f\x44\x63\xb9\x92\x14\xb6\xe7\xc9\x2d\x97\x05\x85\x19\x9a\x2d\xcf\xb1\x97\xe7\xaa\x92\x2e\x29\xd1\xb1\x82\x39\x46\x13\x00\xc9\x4a\xa4\x20\x54\xce\x04\xd1\xcc\x6d\x88\x36\x6a\xcb\xbd\x3d\x1a\x62\xa3\x1d\x61\x8d\x61\x54\xb7\x9a\xe5\x48\xe1\xb6\x5a\x22\xb1\xb5\x75\x58\x26\x84\x90\xa4\xed\xd9\x2c\x59\x9e\xb1\xca\x6d\x94\xe1\x7f\x31\xc7\x95\xcc\x6e\x7f\xb7\x19\x57\x9d\x7d\x4c\x97\xa2\xb2\x0e\xcd\x54\x09\x3c\x3e\x20\xe3\xb5\x4d\x25\xd0\xd2\x84\x00\xd3\xfc\x9d\x51\x95\xb6\x14\x3e\xa7\xe9\x97\x04\xc0\xa0\x55\x95\xc9\x31\x48\xa4\x2a\xd0\xa6\x6f\x20\xd5\x3e\x2c\xeb\x50\xba\xad\x12\x55\x89\xb9\x60\xbc\x0c\x27\xb9\x92\x2b\xbe\x2e\x99\x8e\x7a\xaa\xb0\x1d\xa1\xd6\x01\x6a\x8b\x66\x19\x60\xd6\xe8\xfc\xa1\xe0\x36\xbc\xbf\x31\x97\x6f\xd2\x2f\xaf\xbb\x47\x59\x68\xc5\xa5\x7b\x36\x84\xbd\xbf\x43\x5f\xbf\x1e\x05\xbc\x45\x8f\x7a\x60\x98\x1b\x64\x0e\x03\xe8\xf3\xf1\x59\xa7\x0c\x5b\x63\x43\xc3\x53\xd0\xe6\x3c\x17\xcc\x5a\xb4\xc7\x65\xe0\x5f\x91\xfe\x07\x97\x05\x97\xeb\xe3\xb9\x5f\x72\x59\x24\xbe\x00\xa6\xb8\xf2\xca\xbb\xeb\xbd\xe0\x38\x01\x78\x5a\x6c\xc7\x94\x98\xad\x96\x5f\x31\x77\xa1\xca\x9e\x6d\xa1\xff\xab\x71\x98\xd6\xf6\x21\x5d\x7d\xd4\x42\xd5\x25\x9e\xd0\xb3\x3f\x76\x65\x35\xe6\x34\xd0\x1e\x75\xdf\x73\xcf\x79\x3d\xe4\x25\x77\x14\xba\x09\x80\x75\x86\x39\x5c\xd7\x5e\x0b\xc0\xd5\x1a\x29\x4c\x95\x10\x5c\xae\x3f\xe8\x82\x39\x0c\x72\xd3\x96\x44\x55\x80\x92\x7d\xff\x20\xd9\x96\x71\xc1\x96\x02\x29\x9c\x7b\x38\x14\x98\x3b\x65\xa2\x4e\xe9\xab\x66\xc8\x96\x28\xec\xce\x88\x69\xfd\xc2\x35\x1c\x96\x5a\xec\x5d\xb4\xef\xef\x1f\x71\x80\xf4\x1a\x16\xc0\xee\xf6\xfe\xd1\x86\x2b\xc3\x5d\x7d\xe9\x8b\x7d\x14\x92\x99\xc6\x24\x11\x3f\x33\x48\x6e\xb8\xe3\x39\x13\x69\xa3\x6f\x0f\xb8\x1f\x9d\x46\x7c\x48\xa5\x12\x68\x42\x61\xb6\x22\x06\x20\x70\x8b\x35\x85\xf4\xb2\xf1\xd7\x2b\x0a\x25\xed\x58\x8a\x3a\x6d\x69\x01\x28\xed\xad\x95\xa1\x90\x0e\xbe\x73\xeb\x6c\xfa\x0c\x48\x88\xdc\x17\x6f\xe6\x49\x37\x12\x1d\x86\xde\xcb\x95\x74\x46\x09\xa2\x05\x93\x78\x02\x2e\x00\xae\x56\x98\x3b\x0a\xe9\x48\xcd\xf2\x0d\x16\x95\xc0\x53\x1c\x97\xcc\xb7\xdc\x7f\xe5\xd1\x5f\x83\x71\x89\x66\x9f\x41\xf2\x5a\x1f\xc4\x87\x97\x6c\xed\x09\x3e\xbb\x9b\x7d\x9a\xcd\x07\x37\x8b\xfe\xe0\xaa\xf7\x61\x38\x5f\x4c\x07\xef\xae\x67\xf3\xe9\xa7\xfb\x33\xc3\x64\xbe\x41\xd3\x79\x1e\x89\x6e\xbb\x59\x37\x7b\xdb\x4d\x0f\x21\x27\x95\x10\x13\x25\x78\x5e\x53\xb8\x5e\x8d\x94\x9b\x18\xb4\xb8\xa7\xdc\x47\x5c\x96\x4c\x16\x0f\x84\x93\xd7\x42\x25\x60\x1d\x33\xae\xf5\x4d\x48\xdc\x50\x2d\x51\x07\x5d\xde\x89\xd2\xe6\x95\x7d\xb5\x4a\xee\x35\xe2\x7e\xb9\xf1\xd5\x67\xdb\xbe\x63\xb2\xa2\x05\x89\x4a\xad\xdc\x97\x5e\x7f\xc2\xdc\x86\x1e\x38\xd8\x6b\xa0\xdc\x3e\x05\x9b\x8c\xfb\x8b\x51\xef\x66\x30\x9b\xf4\x2e\x07\x2d\xb0\x2d\x13\x15\x5e\x19\x55\xd2\x03\x76\x57\x1c\x45\xd1\x0c\xef\x27\xf2\xe8\x7b\xd7\xe5\xd9\x7e\x86\x25\xed\x5b\x9d\x70\xa1\x28\xbf\x61\xfa\xd0\xdb\x93\x92\x69\xf2\xfb\x78\x0e\x1f\xae\xcb\x87\x89\x3c\x8b\xf2\x30\x39\x5e\x9c\xc9\x7e\x41\x49\xa9\x5c\xbb\xeb\x0b\x5c\xb1\x4a\xb8\x8f\x21\xd6\x79\x18\xaf\x69\xb0\x88\xa5\xd5\x5e\xc1\x8f\x7a\x89\x5b\xd2\x18\x93\x70\x4c\x21\x75\xa6\xc2\x34\x69\xd7\x29\x34\x75\xec\x0d\x5a\x81\xc4\xd4\x34\xeb\xf6\x46\x15\x48\xe1\x4f\xc6\xdd\x95\x32\x57\xdc\x58\x77\xa9\xa4\xad\x4a\x34\x89\x89\xff\x45\xbb\x9a\xee\xa3\x40\x87\x21\x31\xcd\x0e\xdd\x65\x34\x79\xf4\x8f\xf9\xe2\x6a\xda\xd7\xef\x0f\xb6\xd2\xce\xb0\x55\xca\x14\xfe\x26\x21\x21\x77\x0d\x75\x61\xc4\xf8\x02\xb9\x61\x3a\xa5\x9f\x1b\xe9\xdd\x9e\xd8\x70\x9e\xd2\x74\xd7\xd9\x93\xde\xfc\xfd\xe2\x6a\x3c\x5d\x8c\xc6\xa3\xc5\xf0\x7a\x36\x1f\xf4\x17\xa3\x71\x7f\x30\x4b\xdf\x3c\xd8\xf8\xe8\x6c\x4a\x3f\xa7\x67\x77\x3b\xbb\xe1\xf8\xb2\x37\x5c\xcc\xe6\xe3\x69\xef\xdd\x20\xa0\xdc\x9f\x85\x3f\x21\xff\xdc\x37\xef\xf8\x7d\x1f\xf6\x9b\xf3\x7f\x1f\x4d\xb0\x3f\xff\xd4\x59\x72\xd9\xb1\x9b\xc8\x25\x3a\x20\x58\xc5\xd5\x75\x5b\x70\x03\xa4\x84\xee\xc5\xc5\x05\x10\x0d\xe9\x2f\x77\x1f\xc7\xc3\x45\xff\x7a\x7a\x1f\x99\xcf\x37\xa5\x2a\xe0\xa2\xdb\x6d\x1f\x75\xb2\x2c\x0d\x6b\x90\x99\x42\x7d\x93\x47\x38\x32\x25\x10\xb3\x7a\x0c\xbf\x41\xa1\xd1\x4c\x54\x91\xd5\xac\x14\x7b\x98\x47\x24\x7a\x51\xe4\x79\xa2\x8a\x67\x37\x6e\xa4\x36\xa2\x11\xdd\x28\xb5\xd7\xea\x8f\x47\xf4\x23\x23\x38\x6d\x2c\x97\xdc\x18\x65\xb0\x20\x82\x2f\x0d\x33\x35\x59\x56\xb6\x5e\xaa\xef\xf4\x3c\x7b\xfb\x5b\x76\x7e\xec\x5c\xfe\x27\x00\x00\xff\xff\x8c\xfd\xcb\xef\x1a\x0d\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x31\x6b\xf4\x30\x0c\xc6\xf1\xdd\x9f\x42\x78\x7e\x93\x97\x6e\xc5\x6b\x87\xee\x1d\xba\x94\x1b\x94\xf8\x21\x27\xce\xb1\x83\x24\xe7\x68\x3f\x7d\xb9\x70\xdc\x58\x68\x27\x0d\x7f\x7e\x0f\xe8\x22\x35\x27\x7a\x29\xdd\x1c\xfa\xd6\x0a\x02\x6f\xf2\x0e\x35\x69\x35\x91\x4e\x3c\x8f\xdc\xfd\xdc\x54\xbe\xd8\xa5\xd5\xf1\xf2\x6c\xa3\xb4\xff\xfb\x53\x58\xe1\x9c\xd9\x39\x05\xa2\xca\x2b\x12\xd9\xa7\x39\xd6\xc4\xcb\xa2\x58\xd8\x91\x87\x15\xae\x32\xdb\xa0\xe0\x0c\x0d\x44\x85\x27\x14\xbb\x11\xfa\x61\xfd\xb1\x30\x78\x1b\x76\xc1\x35\x51\x74\xed\x88\xbf\x71\xc8\xe2\x7f\x71\x9c\x57\xa9\x0f\xa8\xbd\xc0\x52\x18\x88\x37\x79\xd5\xd6\x37\x4b\xf4\x11\xef\x7f\xdd\x7d\x3c\x05\x22\x85\xb5\xae\x33\x8e\xbe\xb5\x6c\xf1\x1f\xc5\xda\x32\xec\xc8\x3b\x74\x3a\xd2\x02\xbf\x95\x22\x76\xdc\x2b\xfb\x7c\x8e\xa7\xf0\x1d\x00\x00\xff\xff\xe5\x1d\x7a\x17\x89\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4e\xc4\x40\x0c\x45\xfb\x39\xc5\x5c\x60\x82\xe8\x90\x3b\xa0\xa0\x5f\x24\x7a\x67\xf2\x59\x4c\x92\x71\x64\x7b\x22\xc1\xe9\xd1\x8a\x88\x06\xd8\xf6\x4b\xff\xbd\x57\x4a\x49\xbc\xc9\x0b\xcc\x45\x1b\x65\x1b\xb9\x0e\xdc\xe3\x4d\x4d\x3e\x39\x44\xdb\x30\xdf\xf9\x20\x7a\xb3\xdf\xa6\x59\xda\x44\xf9\x71\xe9\x1e\xb0\x93\x2e\x78\x90\x36\x49\x3b\xa7\x15\xc1\x13\x07\x53\xca\xb9\xf1\x0a\xca\x2b\xc2\xa4\x7a\x71\xd8\x0e\x23\xff\xf0\xc0\x4a\x17\x70\x99\xb0\xe0\xcc\xa1\x96\x4c\x17\x9c\xf0\x7a\x79\xf1\x26\x4f\xa6\x7d\xbb\x52\x90\x72\xfe\x15\xf0\xe3\xfb\x5b\xe0\x7d\x7c\x47\x0d\xa7\x54\x8e\xef\x33\x6c\x97\x8a\xfb\x5a\xb5\xb7\xf8\x27\xf7\x98\x7d\xe3\x0a\xca\x73\x1f\x51\xbe\xf9\xe9\x2b\x00\x00\xff\xff\xa5\xb5\x26\x22\x2f\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4e\x04\x31\x0c\x46\xfb\x9c\x22\x17\xf0\x22\x3a\x94\x0e\x1a\xfa\x45\xa2\xf7\x64\x3e\xc0\xcc\x8e\x13\xd9\xce\x08\x38\x3d\x1a\xb4\xfc\x34\x4b\x6f\xbf\xef\x3d\x22\x4a\xdc\xe5\x11\xe6\xd2\xb4\x64\x9b\xb8\x1e\x78\xc4\x4b\x33\xf9\xe0\x90\xa6\x87\xe5\xc6\x0f\xd2\xae\xb6\xeb\xb4\x88\xce\x25\x1f\xdb\x09\x77\xa2\xb3\xe8\x73\x5a\x11\x3c\x73\x70\x49\x39\x2b\xaf\x28\x79\x45\x98\x54\x27\x87\x6d\x30\xda\x51\x64\xe0\x19\x76\x3e\xf1\xce\x15\x25\x2f\x63\x02\xf9\xbb\x07\xd6\x64\xed\x84\x23\x9e\x76\x08\x77\xb9\xb7\x36\xfa\x3f\x26\x29\xe7\x5f\x91\x9f\x5d\xbc\x05\x74\x6f\x20\xee\xf2\x67\x1c\x1a\x52\xbf\xde\xbf\x35\x7c\x4c\xaf\xa8\xe1\x25\xd1\x19\xf4\x00\xdb\xa4\xe2\xb6\xd6\x36\x34\x2e\xa4\x5c\xd6\xff\x0c\x00\x00\xff\xff\x2a\x39\xe6\xe4\x44\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x4d\x6a\xc4\x30\x0c\x85\xf7\x3e\x85\x2e\xe0\x74\xb2\x2b\xde\x75\x59\x68\x61\x20\x65\xf6\x1a\x8f\x3a\x88\xe0\x1f\x24\xd9\x90\xdb\x97\x30\x71\xba\x13\x7a\xef\xfb\x24\xef\xbd\xc3\xca\x37\x12\xe5\x92\x03\x60\x65\xa1\x27\xab\x09\x1a\x97\x3c\xad\xef\x3a\x71\x79\xeb\xb3\x5b\x39\x3f\x02\x7c\x5c\x3f\x17\x92\xce\x91\x5c\x22\xc3\x07\x1a\x06\x07\x90\x31\x51\x80\x3e\xdf\xc9\x70\x9e\x12\x99\x70\xd4\x03\x76\x5a\x29\xee\x25\x7d\x81\xfb\x38\x88\xa3\xe9\xf7\x88\xe4\x0c\xb4\x62\xa4\x00\x6b\xbb\x93\xd7\x4d\x8d\x92\x03\x78\x4a\x69\xf5\x44\x86\x1c\xa0\x8f\xdf\x8f\xf3\x0e\x80\xb3\x52\x6c\x42\xcb\xca\xf5\xe7\x6b\xb9\x91\xf0\xef\x16\xc0\xa4\xd1\x10\x5d\x85\x8b\xb0\x6d\xdf\x9c\x39\xb5\x14\x60\xbe\x5c\xfe\x65\x23\x7d\xad\xff\x02\x00\x00\xff\xff\x14\x74\xa9\x1b\x25\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4f\x6f\xdb\xc8\x0f\xbd\xfb\x53\x10\xfe\x21\xb7\x9f\xe2\x3f\xdd\xb4\x85\x80\x1c\x0c\x5b\xad\x0b\x24\xa9\x61\x39\xbb\xc8\xc9\x98\x8c\xe8\x78\x90\xd1\xcc\x2c\x49\xb9\xd5\x16\xfd\xee\x8b\xb1\x52\x45\x4a\x93\xa2\x8b\xdd\xea\xa0\x03\xf9\xf8\xf8\xf4\x86\x23\x26\x49\x32\x50\xc1\xfc\x8e\xc4\xc6\xbb\x14\x0e\x93\xc1\xbd\x71\x45\x0a\x39\xd2\xc1\x68\x9c\x69\xed\x2b\x27\x83\x12\x45\x15\x4a\x54\x3a\x00\x70\xaa\xc4\x14\x4a\x14\x32\x9a\x13\x46\x3a\x20\x3d\x84\x39\x28\x8d\x29\xdc\x57\xb7\x98\x70\xcd\x82\xe5\xe0\x69\x07\x15\x02\x8f\xda\x36\x0b\x0c\xd6\xd7\x25\xfe\xab\x16\x00\x56\xdd\xa2\xe5\x58\x09\x70\xff\x96\x13\x15\xc2\x77\xe5\x1c\x50\x47\x04\xe1\xc1\x44\x29\x4b\xc3\xe2\xa9\xbe\x30\xa5\x91\x14\xc6\x03\x00\x16\x52\x82\x77\x75\xc3\x23\x75\xc0\x14\xd6\xde\x5a\xe3\xee\xae\x43\xa1\x04\x8f\x71\xea\x46\x1a\x28\x40\xa9\x3e\x5f\x3b\x75\x50\xc6\xaa\x5b\x8b\x29\x4c\x22\x1d\x5a\xd4\xe2\xa9\xc1\x94\x4a\xf4\xfe\xa2\xa3\xf3\x65\xa5\x00\x82\x65\xb0\x2d\x7d\xd7\x99\xf8\xbc\xe0\x4e\x7c\x6c\xaf\xc1\x8f\x5a\x00\x7c\x33\x24\x3e\x81\x8c\x27\x23\xf5\xdc\x2a\xe6\xab\x23\xff\xb0\x71\x37\x71\xbe\xc0\x44\x93\x11\xa3\x95\x1d\x3e\xe0\xb9\x37\x1e\x57\x2f\x0b\x12\x6f\x91\x94\x18\xef\x3a\xaa\x12\xb8\xc7\x3a\x85\xe1\xfc\x81\x75\x56\x14\xde\xf1\x47\x67\xeb\x61\x8b\x01\xf0\x21\x56\x7a\x4a\x61\x98\x7d\x36\x2c\x3c\xfc\x8e\xe0\xa8\x8d\xbc\xc5\xd3\x38\x0f\xe4\x50\x90\x4f\x8d\x1f\x69\xef\x84\xbc\x4d\x82\x55\x0e\x7f\x92\x13\x00\x77\x3b\xd4\x92\xc2\xf0\xca\xe7\x7a\x8f\x45\x65\xf1\xe7\x5b\x96\x8a\x05\xe9\xbf\xe8\x75\xf0\xb6\x2a\xb1\xb5\xeb\x7f\x50\x46\x8f\xc1\x38\x90\x32\x00\x7b\xf8\x84\xa0\x95\x03\x56\x3b\xb4\x35\x54\x8c\xb0\x23\x5f\x26\xac\x29\xce\x18\x98\x52\xdd\x21\x83\x72\xc5\xc8\x13\x10\xaa\x22\xf1\xce\xd6\x10\x4d\x51\xc6\x21\xf1\xe0\xdb\x27\x35\x93\x24\x65\x48\x0a\x43\xad\x3a\x2c\x83\xd4\x0b\x43\x29\x7c\xf9\xfa\x10\x7c\xac\x4d\x9f\x14\x3f\x7b\xea\xd0\x88\x48\x61\x78\xf2\x25\xbf\xc9\x37\xd9\xe5\x76\x91\xbd\x9b\x5d\x5f\x6c\xb6\xeb\xec\xfd\x87\x7c\xb3\xbe\xf9\x7a\x42\xca\xe9\x3d\xd2\xa8\x34\x44\x9e\xb0\x48\xfa\x54\xe9\x61\x7c\xfa\xe6\x74\xfa\x68\x9a\xa2\xbb\xde\x0c\x25\x89\x46\x92\xa8\xfc\x7c\x24\x65\xe8\x65\x18\x75\x45\x98\x04\x4f\x72\x3e\x19\x4f\xcf\xc6\xbd\x6c\x3c\x39\x8b\x92\x04\xc2\x1d\x52\x6c\xad\x8a\x82\x90\x39\x89\x97\x9e\xcf\x4f\xbe\xac\xd6\xd9\xbb\x6c\xbd\xce\x16\xdb\xd9\x62\xb1\xce\xf2\x7c\xbb\xb9\x59\x65\xf9\xd7\x93\x67\x79\x2a\xc6\xe6\x9a\xb0\x28\xa9\xf8\xd8\xb6\x07\x6c\xbe\x2c\x21\x64\x6f\xab\x78\x19\xce\x27\x67\xdc\x43\x88\xe5\x44\x9b\xb0\x47\x4a\xb8\x32\x82\x7c\xbe\xb9\xc8\xb7\xd9\x7c\xb1\xcc\xe2\x3b\x9f\x6d\xff\xf8\xb0\x59\x6e\x67\x59\xbe\x9d\x9e\xbd\xde\xbe\x9f\x5f\x6e\xf3\xe5\xec\xd5\xdb\xdf\xfe\xff\x88\x5b\xff\x14\xea\x09\xdb\x64\xfa\xf6\x1b\x6e\x7a\xf6\xfa\x25\xb6\x17\x51\x1d\xb6\xf9\x72\x36\x5f\xce\xa6\xe3\xed\xea\xe3\xc5\xcd\xe4\xd5\xf8\xec\x39\xb2\xef\x40\xad\x0b\xd1\x9c\x8a\x34\x76\xce\x38\x06\xff\xac\x90\xa5\x17\x03\xd0\xa1\x4a\x61\x32\x1e\x97\xbd\x68\x89\xa5\xa7\x3a\x85\x37\xe3\x4b\xd3\x26\xe2\x51\xf4\xa6\xa6\x99\xda\xbd\x48\xe0\x4e\x75\x3b\xdf\x2b\x4f\x12\xb9\xbb\x23\x13\x7f\x8f\x5e\xbc\xf6\x36\x85\xcd\x7c\xd5\x51\xac\x0a\xe3\x90\x79\x45\xfe\x16\xbb\x12\x23\xfd\x7b\x94\xbe\xea\xa0\x64\x9f\xc2\x28\x56\xd5\x7f\xf5\x33\xc7\xa6\x4f\x35\x01\xb0\xde\x63\x54\xbb\xdc\x6c\x56\x79\x27\x63\x9c\x11\xa3\xec\x02\xad\xaa\x73\xd4\xde\x15\xdc\x6c\xb0\x96\x10\xc9\xf8\xa2\x4d\x4d\x3b\x29\x31\x25\xfa\x4a\xda\xdc\xa4\x93\xe3\x4a\x6b\x64\xde\xec\x09\x79\xef\x6d\xd1\xcf\xee\x94\xb1\x15\x61\x27\xfb\xaa\xcd\x5a\x73\xc0\x7f\xec\x44\x2c\xfa\x05\x46\xbc\xfe\x81\x13\x93\xf1\x2f\xb7\xe2\xf8\xeb\x89\xab\xd4\x3b\xc1\xcf\xd2\x9f\x66\x55\xc4\x2d\xb7\xf6\x5e\xde\x19\x8b\xcd\x86\x4d\x41\xa8\xc2\x2e\xac\x72\x33\xbe\xf2\x2e\xc2\x9e\x4f\x5e\x33\xd2\xf1\x06\x74\x3f\x47\x59\xeb\x3f\xad\xc8\x1c\x8c\xc5\x3b\xcc\x58\x2b\x7b\x5c\xbc\x29\xec\x94\xe5\x47\x8e\x66\xbf\x5c\xc6\xa5\xf2\xcc\xcd\x78\xba\x0c\xa0\x59\x3f\xab\xe6\xc8\xe2\x7f\xf6\xef\x00\x00\x00\xff\xff\x73\x53\x17\xa1\x34\x0a\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3f\x4b\x04\x31\x10\xc5\xfb\x7c\x8a\x61\xfb\x28\xe2\x15\x92\x56\xb1\x13\x16\x4e\xec\xe7\x72\x4f\x0d\x9b\x6c\xc2\xcc\xec\xc2\x7e\x7b\xd9\xdc\x59\x1c\x5c\x97\xbc\x79\x7f\x7e\xde\x7b\xc7\x2d\x7d\x41\x34\xd5\x39\xd0\xfa\xe4\xa6\x34\x9f\x03\x1d\x21\x6b\x8a\x70\x05\xc6\x67\x36\x0e\x8e\x68\xe6\x82\x40\x05\x26\x29\xaa\x57\xc8\x0a\xb9\xca\xda\x38\x22\xd0\xb4\x9c\xe0\x75\x53\x43\x71\x44\x99\x4f\xc8\xba\x27\xa9\x5f\x64\x86\x41\x1f\x52\x7d\xbc\x34\x0d\x1f\x37\x55\xc3\x1d\x63\xcc\x8b\x1a\xa4\x3b\xd2\xbe\x30\x98\x2c\x18\x9c\x36\xc4\xbd\x58\x91\x11\xad\xca\x75\xe4\x45\x3d\xb7\x76\x87\xb1\x55\xb1\x4e\xe2\xfb\x33\xd0\xe1\xf0\xdc\x23\x17\x92\x5f\xb3\xa6\xfd\xdf\xa4\x5a\x8d\x35\x07\xfa\x7c\x1d\xbb\x62\x2c\x3f\xb0\xb1\xa7\xfe\x7d\xa9\xbd\x73\x49\x79\x1b\x6b\x4e\x71\x0b\x34\x0a\xbe\x21\x6f\x0b\xe7\xa3\x71\x9c\xdc\x5f\x00\x00\x00\xff\xff\x7b\xf5\x71\x2a\x57\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x4b\xc4\x30\x10\x85\xef\xf9\x15\xc3\xde\xd3\xc5\x9b\xe4\xa6\x1e\xbc\xaf\xe0\x3d\x4d\x9f\xbb\x63\xdb\xa4\xcc\x4c\x2a\xfa\xeb\xa5\xb6\x2a\xb8\xb0\x2c\x78\x4a\x98\xe4\x7d\x8f\xf9\xbc\xf7\x2e\x4e\xfc\x0c\x51\x2e\x39\x90\xb4\x31\x35\xb1\xda\xa9\x08\x7f\x44\xe3\x92\x9b\xfe\x56\x1b\x2e\xfb\xf9\xc6\xf5\x9c\xbb\x40\x0f\x43\x55\x83\x1c\xca\x00\x37\xc2\x62\x17\x2d\x06\x47\x94\xe3\x88\x40\xfa\xae\x86\x31\x8c\x30\xe1\xa4\x5e\x21\x33\xc4\x49\x1d\xa0\xc1\x79\x8a\x13\x3f\x4a\xa9\x93\x2e\x09\x4f\xbb\x9d\x23\x12\x68\xa9\x92\xb0\xcd\x72\xe9\xa0\xfb\x0d\xe0\x88\x66\x48\xbb\x3d\x1d\x61\xd7\x31\xa6\xd2\xe9\x2f\xec\x1c\xb2\x9c\x03\xeb\x7a\x79\x8b\x96\x4e\xee\x7f\x26\xee\x39\x77\x9c\x8f\xd7\x0b\x29\x03\x0e\x78\x59\xbe\x7d\xaf\x73\xa1\xd2\x11\x9d\xbb\xbf\x5c\xa0\xb5\x7d\x45\xb2\x2f\xe9\x6b\xf6\x09\x32\x73\xc2\x5d\x4a\xa5\x66\xfb\x89\xff\xc9\xad\x63\x9d\x62\x42\xa0\xbe\xb6\xf0\x2b\xdf\x7d\x06\x00\x00\xff\xff\xdb\x55\x9e\x61\x2a\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x21\xbb\x72\x38\xdc\x72\xf0\xd8\x0e\xdd\x03\xb4\xbb\x2c\xb1\x09\x6b\x59\x14\x48\x39\x41\xfb\xeb\x0b\xc7\x4e\xd2\xc4\x76\xe0\xb4\xe9\x66\x0b\xe2\xfb\x48\xbe\x07\xd9\x84\x2f\xc0\x82\x14\x0b\xcd\xa5\x75\x4b\xdb\xe4\x0d\x31\x7e\xd8\x8c\x14\x97\xd5\x7f\x59\x22\xfd\xd9\xfe\x55\x15\x46\x5f\xe8\xc7\xd0\x48\x06\x5e\x51\x80\x07\x8c\x1e\xe3\x5a\xd5\x90\xad\xb7\xd9\x16\x4a\xeb\x68\x6b\x28\x74\xd5\x94\x60\x6c\x42\x01\xde\x02\x9b\xf6\x37\x40\x36\xd6\xd7\x18\x15\x53\x80\x15\xbc\xb6\xb7\x6d\xc2\x27\xa6\x26\x5d\x21\x2b\xad\x07\xe0\x23\x47\xde\x25\x43\x5d\x1c\xf5\x13\xf6\x0c\x69\xca\x37\x70\x59\x0a\x65\x6e\x82\x3c\x0b\xf0\xc4\x14\x4a\x19\x63\xd4\xf7\xb7\x35\xb2\xa6\x43\xfb\xff\xc4\x38\x8a\x99\x29\x04\x60\xc5\x4d\x80\xb3\xc6\xa5\xad\x30\x7a\xb1\x50\x5a\x33\x08\x35\xec\xa0\x3f\x8b\xe4\x41\x94\xd6\x5b\xe0\xb2\x3f\x5a\x43\x9e\x59\x6b\x6b\x90\x64\xdd\xa5\x40\x40\xc9\xfb\x8f\x9d\xcd\x6e\x33\xa2\x15\x21\xef\x88\x2b\x8c\xeb\x7e\xde\x31\xf1\xee\x4e\xa2\x80\x0e\xf7\x04\xa3\x5d\xb7\x0c\x87\x9e\x6f\x45\x8e\x10\x20\xfa\x44\x18\x73\xa7\x9d\xc8\x4f\x69\xb6\x0b\x39\x69\xff\xd0\xc5\xe9\xcc\x4f\x98\x79\xff\xb0\x9f\x03\x4e\x49\x6f\x67\x9c\xc7\xb8\x48\xfb\x75\xc0\xfd\x63\xff\x35\x07\xa6\x4d\xf0\x64\xe4\x07\x49\x1b\xc6\x60\x76\xa8\x7e\xcd\xf8\x91\x71\xee\x67\xfa\x50\xfc\xdc\xf0\xae\x72\x8f\x18\x3a\x79\x78\x1d\xe6\xb5\xf1\x19\x00\x00\xff\xff\x20\xa2\xda\xb0\x09\x06\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _runtimesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd0\x31\x8e\x84\x30\x0c\x05\xd0\x3e\xa7\xc8\x05\xc2\x6a\xbb\x55\xda\xbd\xc1\x14\xd3\x5b\xc4\x02\x8b\xc4\xa0\x38\xc0\x1c\x7f\x04\x1a\x26\x40\xed\xf2\x7f\x4b\xef\x4b\x86\x89\x9e\x98\x85\x46\xf6\x96\xc7\x80\xcd\xf0\x27\x0d\x8d\x3f\xcb\xaf\x19\x88\x83\xb7\x8f\x99\x0b\x25\xfc\x8f\x20\x62\x12\x16\x08\x50\xc0\x1b\x6b\x19\x12\x7a\xcb\x0b\x05\x02\xd3\x03\x87\x88\xf9\x9b\x9d\x73\x46\x87\x76\xf8\x9a\x30\x53\x42\x2e\x10\xef\x3b\xd7\xa3\xc6\x68\x9b\x67\xae\x2b\x7b\xd2\x60\xe3\xcc\x50\xa8\xad\xf2\x51\x68\xe0\x12\xa9\xeb\x4b\xb5\x3f\x59\x85\x9e\xe8\xf4\x8e\x3d\x69\xb0\xeb\x2a\x55\xdd\x82\x0a\x0a\x92\x30\x74\x78\x92\x8f\x46\x8d\xcf\x37\x3c\xab\xd1\xdb\xfd\x8a\x6f\xcd\x3b\x00\x00\xff\xff\xc7\xad\x48\x21\x9f\x03\x00\x00")

func runtimesYamlBytes() ([]byte, error) {
	return bindataRead(
		_runtimesYaml,
		"runtimes.yaml",
	)
}

func runtimesYaml() (*asset, error) {
	bytes, err := runtimesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "runtimes.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\x4f\x8f\xd3\x30\x10\xc5\xef\xf9\x14\xa3\x48\x3d\x21\x27\x6d\x2f\xac\x72\x2b\xdd\x2c\xac\x80\x65\xd5\x74\x41\x7b\xaa\x5c\x7b\xda\x58\x75\x6c\x6b\x3c\xa9\x08\xcb\x7e\x77\xe4\xb6\xfb\x4f\x02\x81\x10\xdc\x92\xf1\xcc\xef\xcd\xbc\x27\x84\xc8\x64\x30\x9f\x91\xa2\xf1\xae\x82\x16\x6d\x57\x28\xc9\x6c\xb1\x30\xbe\xdc\x4f\xb2\x9d\x71\xba\x82\x77\x68\xbb\x79\x2b\x89\xb3\x0e\x59\x6a\xc9\xb2\xca\x00\x9c\xec\xb0\x02\x26\x89\x1b\xb3\x13\x8a\xf4\xa9\x16\x83\x54\x58\xc1\xae\x5f\xa3\x88\x43\x64\xec\xb2\x18\x50\xa5\x11\x95\x20\x15\xb4\xcc\x21\x56\x65\x39\xba\x7b\x7f\xf3\xa6\x5e\x5c\xd5\xcb\xba\x59\xcd\xae\x2f\xef\x47\x65\x64\xc9\x46\x95\x87\xc6\x58\x3e\x83\x8b\xe9\xeb\x62\x5c\x4c\xc7\x93\x57\x7d\x38\x7e\x16\xbc\xfd\x96\xfd\xc3\x13\xfe\xdf\xfa\x3f\x5f\x1d\x20\x22\x27\x2c\xc0\xd6\xfa\xb5\xb4\xc5\x51\xee\x1c\x37\xb2\xb7\xbc\xc0\xad\x89\x4c\x43\x05\xf9\xe8\xae\xb9\x6d\x96\xf5\xc7\xd5\x79\x7d\x31\xbb\xf9\xb0\x5c\x2d\xea\xb7\x97\xcd\x72\x71\xbb\x5a\xcc\xbe\xdc\x8f\xf2\x0c\x60\x2f\x6d\x8f\x71\xee\x1d\xa3\xe3\x0a\xbe\x8b\x03\x57\x63\xb0\x7e\xe8\x52\xe9\xf0\x0f\x10\xbc\x9e\x39\xe7\xd3\x9a\xde\xc5\x87\x2a\x40\x20\xdf\x21\xb7\xd8\xc7\x64\x5b\xf0\xe9\xce\xfc\x6c\x7c\x36\xcd\x7f\xd1\x12\x15\xc9\x80\x15\xe4\x4c\x3d\x1e\x9b\x02\xf9\xbd\xd1\x48\x8f\xd8\xe4\x21\x39\x64\x8c\x97\x6e\x4b\x18\x9f\xeb\xf5\x6b\x6b\x62\x8b\xba\x41\xda\x1b\x85\x4f\x2f\x00\xe8\xe4\xda\xa2\x4e\xc1\xf4\x78\x22\x1b\x4f\x86\x87\xb9\x95\x31\x5e\x1d\x42\xcb\x8f\x66\x09\x65\xfb\xc8\x48\x42\x91\x61\xa3\xa4\x3d\xae\x62\x3a\xb9\x7d\x64\x12\x06\x1f\x0d\xfb\x83\x97\x24\x9d\x6a\x91\xca\xce\x10\x79\x42\x2d\xac\x59\x93\xa4\x41\x9c\xc2\x7a\xb8\x97\xe5\xb6\x82\x7c\x5a\x4c\x26\xc5\x64\x7c\x2c\xb2\xb7\x48\xcf\x8d\x13\xb0\xc3\xc4\x9c\x9f\xb4\x67\x5a\x7b\x17\x3f\x39\x3b\x3c\x50\x7c\x48\x13\x9e\x2a\xc8\xeb\xaf\x26\x72\xcc\x5f\x0c\x3a\xaf\x51\x90\xb7\x58\x3c\x59\x95\xcc\x55\xde\x31\x79\x2b\x82\x95\x0e\x7f\xc3\x02\xc0\xcd\x06\x55\xca\xeb\xca\x37\xaa\x45\xdd\x5b\xfc\x33\x99\x4e\x26\xeb\xfe\x9e\x1f\x5f\x66\x67\xc2\x85\xec\x8c\x1d\xae\xbd\x35\x2a\xe9\x5e\x13\x6e\x90\xce\x7b\x69\x1b\x96\x6a\x97\x67\x3f\x02\x00\x00\xff\xff\x2a\x6a\xdc\x23\x71\x04\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"runtimes.yaml":                                 runtimesYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"runtimes.yaml":     &bintree{runtimesYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
