// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/traefik.yaml
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xc1\xab\xdb\x30\x0c\xc6\xef\xfe\x2b\x4c\x2f\x85\x81\x5b\xc6\x2e\x23\xc7\xed\xb0\x7b\x61\xbb\x2b\xb6\xd6\x7a\x75\x2c\x23\xc9\x29\xdb\x5f\x3f\xd2\xf4\x3d\x4a\xf2\x5a\x92\xde\x44\x90\x7e\xdf\xa7\xc8\x1f\x94\xf8\x0b\x59\x22\xe5\xc6\x72\x0b\x7e\x07\x55\x4f\xc4\xf1\x1f\x68\xa4\xbc\x3b\x7f\x95\x5d\xa4\x7d\xff\xd9\x9c\x63\x0e\x8d\xfd\x9e\xaa\x28\xf2\x81\x12\x9a\x0e\x15\x02\x28\x34\xc6\xda\x0c\x1d\x36\xf6\xfc\x45\x9c\x4f\x54\x83\xf3\x94\x95\x29\x25\x64\xd7\x41\x86\x23\xb2\xe1\x9a\x50\x1a\xe3\x2c\x94\xf8\x83\xa9\x16\x19\x06\x9d\xf5\x44\x1c\x62\xbe\xd7\x33\xd6\x32\x0a\x55\xf6\x78\x6b\x4a\x08\x82\x62\xac\xed\x91\xdb\xdb\xb7\x23\xea\x08\x60\x04\xc5\x6b\x59\x4b\x18\xca\x99\xc6\x66\x33\x47\x62\x8f\x59\x27\xc8\x3b\x54\x01\xf5\xa7\xd5\xd0\x4c\x61\x6a\x73\xfb\x69\xbb\x62\x76\x2f\x0a\x5a\x27\x88\xd1\xcb\x22\x88\x20\xf7\xd1\x4f\x3d\xa4\x28\xfa\xf1\x56\x43\x79\x59\x8d\x07\xef\xa9\x3e\xfa\x7b\x8b\x40\x65\x78\x74\xa2\x98\xb5\xa7\x54\xbb\x47\xb7\x7d\x37\xfe\x9a\x5d\xcc\xa1\x50\x7c\x76\xe6\x99\xd0\x65\x76\x77\xe7\xcc\xeb\x29\xf9\x16\x73\x88\xf9\xb8\x3a\x2c\x94\xf0\x80\xbf\x87\xee\xb7\x35\x9f\x28\x1b\x6b\xe7\xf1\x5c\xa4\x23\xb5\xfd\x83\x5e\xaf\xb9\x1c\x11\x3f\x05\x79\xd9\xec\xd8\x24\x05\xfc\xd0\x59\x5b\x74\xf2\x57\x14\x3b\xf3\x3f\x00\x00\xff\xff\x37\xa3\x5f\x88\x54\x04\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x41\x68\xc8\xdb\xe4\xc4\xcb\xda\x65\x7c\x4b\x63\xb7\x0d\xd0\xb8\x86\xed\x14\x28\x86\x21\xa0\xc9\xb3\xc5\x85\xe2\x71\x24\xe5\xc6\xeb\xf2\xbf\x0f\xd4\x2f\x8b\x8e\x92\xa5\x59\xe7\x17\x8b\x3c\xde\x77\xd4\xc7\xe3\x77\x27\x66\xe4\x27\xb0\x4e\xa2\xa6\x64\x3b\x1a\xdc\x4a\x2d\x28\x59\x80\xdd\x4a\x0e\xe7\x9c\x63\xa1\xfd\x20\x07\xcf\x04\xf3\x8c\x0e\x08\xd1\x2c\x07\x4a\x38\x5a\x10\xda\xd5\x63\x67\x18\x07\x4a\x6e\x8b\x15\xa4\x6e\xe7\x3c\xe4\x83\x34\x4d\x07\x5d\x68\xbb\x62\x7c\xc8\x0a\x9f\xa1\x95\x7f\x31\x2f\x51\x0f\x6f\xcf\xdc\x50\xe2\xf1\x76\xb4\x02\xcf\x9a\xc8\x17\xaa\x70\x1e\xec\x1c\x15\x44\x61\x15\x5b\x81\x72\xe1\x89\x94\x71\xac\x06\x0f\xa5\xff\x0a\xd1\x3b\x6f\x99\x31\x52\x6f\xaa\x40\xa9\x80\x35\x2b\x94\x77\xed\x7e\xab\x5d\xd1\x66\xdb\xb6\x50\xe0\xe8\x20\x25\xcc\xc8\x77\x16\x0b\x53\x22\xa7\x24\x49\x06\x84\x58\x70\x58\x58\x0e\xf5\x1c\x68\x61\x50\xea\x12\x2c\x25\xae\x62\xa6\x1a\x18\x14\xd5\x43\x4b\x42\x18\x6e\xc1\xae\x6a\x5f\x25\x9d\x2f\x1f\xbe\x30\xcf\xb3\x87\xf1\x84\x74\x1c\xb7\x60\x77\x35\x19\x4f\x44\x57\xf2\x5f\xd1\xff\x3b\xe5\x6f\xa4\x16\x52\x6f\x22\xe6\x99\xd6\xe8\x4b\xf7\x9a\xfe\x3e\xdc\xe8\x44\x58\xe1\xb1\x30\x82\x79\xa0\x24\xf1\xb6\x80\xe4\xfb\x1f\x20\x2a\x98\xc3\xba\xdc\x5f\x4d\xe9\x13\x2f\x3c\x20\xe4\x61\x76\x3d\x82\xec\x8a\xd5\x1f\xc0\x7d\x99\x1d\xbd\x97\xe1\xc5\x57\xa0\xbd\x5d\x17\xa8\xd7\x72\x73\xc5\xcc\x4b\x2e\x56\xb3\xfc\x02\x2d\xac\xa5\x02\x4a\xfe\x2e\x39\x1d\xd2\x57\xa7\xe4\x6b\xf9\x18\x7e\x60\x2d\x5a\xd7\x0e\x33\x60\xca\x67\xed\xd0\x02\x13\xbb\x76\xb4\x3f\x0e\x72\xf4\xf5\xe2\xc3\xf5\x62\x39\x99\xdf\x8c\x3f\x5e\x9d\x5f\x4e\xef\x8f\x88\xd4\x29\x13\xc2\x0e\x99\x35\x8c\x48\xf3\xba\x7a\xd8\x47\x22\xe5\x35\x20\x52\x3b\xe0\x85\x85\xce\xfc\x9a\x29\xe5\x33\x8b\xc5\x26\xeb\x47\x69\xd7\xde\xef\x37\x8a\xce\x3b\x72\x0c\x9e\x1f\xd7\x54\x1c\x4f\x51\xc0\xfb\x72\xba\x1b\xd4\x7b\x45\x5e\x9f\x74\x26\x2c\x28\x64\x82\x8c\x5e\xb9\xfe\x2d\xf4\x04\x33\x16\x73\xf0\x19\x14\x8e\xd0\x5f\x47\xaf\x4e\x5b\xc3\x1a\xed\x17\x66\x05\x19\x56\x3b\x09\x77\x52\x6d\x87\x1c\xf5\xba\x5d\xc2\x19\xcf\x80\x9c\xee\x77\xa0\x10\xcd\x20\xde\x4c\xc7\xc6\xc4\x8a\x29\xa6\x79\xc5\xcf\xfd\x83\xe4\x60\xc6\xb8\xe3\x36\x43\xc6\x60\x14\xee\x72\x78\x99\xf6\x1e\x5c\xb6\x33\x97\x32\x63\xea\x25\x95\xe3\xe1\x15\xac\x80\x93\x90\x53\xe3\xe9\x22\x19\x38\x03\x3c\x78\xff\x60\xc1\x28\xc9\x99\xa3\x64\x34\x20\x24\xdc\x52\x0f\x9b\x5d\x05\xec\x77\x06\x28\x99\xa3\x52\x52\x6f\xae\xcb\xfb\x5e\xe9\x43\x77\x86\xd6\x1c\xe4\xec\xee\x5a\xb3\x2d\x93\x8a\xad\x42\xd2\x96\x70\xa0\x80\x7b\xb4\xd5\x9a\x3c\x88\xd8\x87\xce\xc6\xfb\xb7\xee\x21\x37\xaa\x05\xee\xb2\x53\x12\x1d\xf9\x3f\xf6\xf2\xcd\xeb\x55\x39\x20\xd1\x4a\xbf\xbb\x50\xcc\xb9\x69\xc5\x43\xc5\x63\xca\x2b\xb5\x48\xb9\x95\x5e\x72\xa6\x92\xda\xc5\x45\x82\x30\x3d\x38\x94\x92\x1a\x54\x60\xbb\x9a\x19\x7e\x29\xb9\x85\x5d\x60\xb9\x86\x3b\x17\x02\xb5\xfb\xa8\xd5\x2e\xe9\x64\x2c\x9a\xe0\x89\x96\x92\x64\x72\x27\x9d\x77\xc9\x03\x00\x8d\x02\xd2\xa0\x80\x07\xba\xcb\x51\x7b\x8b\x2a\x35\x8a\x69\x78\x26\x26\x21\xb0\x5e\x03\xf7\x94\x24\x53\x5c\xf0\x0c\x44\xa1\xe0\xf9\x21\x73\x16\x18\xfa\x1e\xb1\x42\x84\x45\x94\x10\xe1\x17\xea\xd4\x41\x48\x74\x94\x28\xa9\x8b\xbb\x7a\x51\x78\x6b\x26\x35\xd8\x96\xea\xf4\xc1\x45\xa9\x7e\x32\x67\x1b\xa0\xe4\xe8\xeb\xe2\xf3\x62\x39\xb9\xba\x19\x4f\xde\x9e\x5f\x7f\x58\xde\xcc\x27\xef\x2e\x17\xcb\xf9\xe7\xfb\x23\xcb\x34\xcf\xc0\x1e\xe7\x32\xc8\x27\x88\xb4\x86\x68\xfe\xe9\x68\x78\x36\xfc\x39\x06\x9c\x15\x4a\xcd\x50\x49\xbe\xa3\xe4\x72\x3d\x45\x3f\xb3\xe0\xa0\x2c\x14\x8d\x16\x74\x2a\x7a\xab\x08\x32\x97\x3e\x9a\x09\xc9\x9c\xa3\xdd\x51\x32\xfa\xe5\xe4\x4a\x46\xca\xf6\x67\x01\xee\x70\x35\x37\x05\x25\xa3\x93\x93\xbc\x17\x23\x82\x60\x76\xe3\x28\xf9\x8d\x24\x69\x90\xb0\xe4\x47\x92\x44\x02\xdb\x94\x92\x84\xfc\xde\xba\x6c\x51\x15\x39\x5c\x85\x04\x8f\x52\xb8\x61\x36\x54\xb0\xb4\x5a\xd4\x89\x9f\x87\xf5\x33\xe6\x33\x1a\x49\x78\xf4\x2e\x4c\x84\x94\xa7\x24\x34\x06\x7b\x25\x46\x1b\xc7\x69\x4f\x75\x86\xd6\x53\xd2\xd1\xe6\x46\x06\x63\x5c\x63\xd1\x23\x47\x45\xc9\xf5\x78\xf6\xad\x38\xa9\xe7\xa6\x17\x6b\x79\xf1\x04\x56\x54\x31\x1a\xb4\x1c\xbc\x95\xbc\x7f\x67\x5d\xb4\xb2\x58\x06\xd9\x41\xed\xe1\xce\x77\x8f\x96\x29\x85\x5f\x66\x56\x6e\xa5\x82\x0d\x4c\x1c\x67\xaa\x94\x12\x1a\xaa\x99\xeb\xd2\xcd\x99\x61\x2b\xa9\xa4\x97\x70\x90\x1c\x4c\x88\x78\x22\x25\xd3\xc9\xf2\xe6\xcd\xe5\x74\x7c\xb3\x98\xcc\x3f\x5d\x5e\x4c\x22\xb3\xb0\x68\x0e\x1d\x98\x52\x3d\x07\x37\x47\xf4\x6f\xa5\x82\xba\x6d\x8a\x8f\x51\xc9\x2d\x68\x70\x6e\x66\x71\x05\x5d\xbc\xcc\x7b\xf3\x0e\x7c\x1c\xc2\x54\x89\x72\xd0\x9b\x90\x3a\x1d\x28\x39\x3b\x39\x3b\x89\xa6\x1d\xcf\x20\x90\xfc\x7e\xb9\x9c\x75\x0c\x52\x4b\x2f\x99\x1a\x83\x62\xbb\x05\x70\xd4\xc2\xd1\xb8\x37\x30\x60\x25\x8a\xd6\x36\xea\xda\xbc\xcc\x01\x0b\xbf\x37\x76\x6c\xae\xe0\x1c\x9c\x5b\x66\x16\x5c\x86\x4a\xc4\xd6\x35\x93\xaa\xb0\xd0\xb1\x9e\x46\x1d\x96\xfc\x66\x2a\xe2\xbe\xac\xc3\xc4\xe8\x6c\xf4\x62\x26\x9e\x20\xe2\xa7\xff\x99\x07\xa1\x5d\x23\x8d\xe3\xaa\xa3\xaf\x0d\x95\x72\x7c\x83\xb2\xf0\xa6\x67\x8e\x79\xeb\x17\xfa\x92\x0a\x0f\xb9\x3b\x4c\xe9\xb2\x98\x35\x72\x17\xd9\x9a\x23\xe8\x35\xd6\x8e\x6d\x23\xda\xeb\xb9\xb7\x3e\xda\xf8\xd7\x5f\x12\x3d\x3d\x5d\xa7\x3d\x79\xb4\xa9\x7b\xf0\x21\xb6\x6f\x5f\x43\x5d\xac\x32\x25\x09\xaa\x94\xf4\x98\x1d\xb7\xcc\x3c\xfa\x41\xf6\x8c\x1e\xb1\xe9\x86\xea\xee\xa7\x83\xf4\xdc\x6e\x32\xee\xf7\xfa\x62\xd6\x31\x2e\x67\xb4\xfb\x25\x32\x5d\xdc\x1f\x0d\x3a\x35\x22\x3d\xa8\x00\xa6\x2b\xed\x87\x85\x20\xed\x91\xf9\x47\x1c\x2a\x7d\x4e\x7b\x94\xdc\xc4\x82\x1f\xbb\xfc\x13\x00\x00\xff\xff\x74\xeb\x40\xff\x42\x11\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5b\x6f\xdb\xb6\x17\x7f\xd7\xa7\x38\x7f\xfd\x9b\x87\x0d\xa5\x9c\x74\x0f\x19\x58\xec\xc1\x4d\x9c\x2c\x40\x62\x1b\xb6\xb7\xa1\x28\x0a\x83\xa2\x8e\x63\x36\x14\x49\x90\x94\x5b\x37\xcb\x77\x1f\x28\xca\x8e\xe4\x38\x37\x6c\x7b\x9b\x5e\x04\x1e\x9e\xdf\xb9\x5f\xc8\x8c\xf8\x1d\xad\x13\x5a\x51\x58\x1d\x25\x37\x42\x15\x14\xa6\x68\x57\x82\x63\x9f\x73\x5d\x29\x9f\x94\xe8\x59\xc1\x3c\xa3\x09\x80\x62\x25\x52\x90\x9a\x33\x49\x0c\xf3\x4b\x62\xac\x5e\x89\x80\x47\x4b\x5c\xc4\x11\xd6\x00\x23\xbb\x33\x8c\x23\x85\x9b\x2a\x47\xe2\xd6\xce\x63\x99\x10\x42\x92\xb6\x66\x9b\x33\x9e\xb1\xca\x2f\xb5\x15\xdf\x99\x17\x5a\x65\x37\x3f\xbb\x4c\xe8\xde\xea\x28\x47\xcf\x36\x86\x9d\xc8\xca\x79\xb4\x13\x2d\xf1\xe5\x56\xd9\xc0\x6d\x2b\x89\x8e\x26\x04\x98\x11\xe7\x56\x57\xc6\x51\xf8\x94\xa6\x9f\x13\x00\x8b\x4e\x57\x96\x63\x4d\x51\xba\x40\x97\xbe\x85\xd4\x04\xdb\x9c\x47\xe5\x57\x5a\x56\x25\x72\xc9\x44\x59\xdf\x70\xad\x16\xe2\xba\x64\xc6\xd5\xf0\x15\xda\xbc\x86\x5e\xa3\x0f\xd7\x52\xb8\xfa\xff\x95\x79\xbe\x4c\x3f\x3f\xaf\x12\x55\x61\xb4\x50\x7e\xaf\xda\x48\xd4\xc5\x8e\xae\x1f\x5f\x24\x78\x85\x41\x6a\x07\xc8\x2d\x32\x8f\xb5\xd0\xfd\xf6\x39\xaf\x2d\xbb\xc6\x26\xfe\x0f\x85\x36\xf7\x5c\x32\xe7\xf0\x85\x11\xf8\xfb\xd9\xfe\x20\x54\x21\xd4\xf5\xcb\x93\x9e\x0b\x55\x24\x21\xf3\x13\x5c\x04\xe6\x8d\x8f\x4f\x68\x4f\x00\x1e\x56\xd9\x4b\x6a\xcb\x55\xf9\x17\xe4\xbe\x2e\xaf\xbd\x0d\xf4\x6f\xb5\x0d\x33\xc6\xf5\xb6\x5d\x7b\x8a\x46\xea\x75\x89\xaf\xe8\xd8\xc7\x55\x39\x83\x9c\xd6\xb9\x37\x52\x70\xe6\x28\x1c\x25\x00\x0e\x25\x72\xaf\x6d\xb8\x01\x28\x43\x7e\x2f\x59\x8e\xd2\x45\x42\x08\xb3\x79\x42\x97\xc7\xd2\x48\xe6\xb1\x81\xb7\x8c\x0c\x9f\xec\x48\x7a\x4e\x16\xc0\xc6\xc4\xf0\x19\x2b\xb4\x15\x7e\x7d\x12\xca\x72\x58\x7b\x9c\x46\x4f\x48\xe8\x68\xc2\xad\xf0\x82\x33\x99\x36\xfc\xae\x93\xa0\xe1\xeb\xb2\x13\x3e\xaf\x25\xda\xba\x7a\x5a\x16\x03\x10\xb8\xc1\x35\x85\xf4\xa4\xd1\xd7\x2f\x0a\xad\xdc\x48\xc9\x75\xda\xe2\x02\xd0\x26\xa0\xb5\xa5\x90\x0e\xbe\x09\xe7\x5d\xba\x47\x48\x6d\x79\xa8\xb0\x2c\x64\xc6\x2a\xf4\x58\x77\x09\xd7\xca\x5b\x2d\x89\x91\x4c\xe1\x2b\xe4\x02\xe0\x62\x81\xdc\x53\x48\x87\x7a\xca\x97\x58\x54\x12\x5f\xa3\xb8\x64\xa1\x2f\xfe\x29\x8d\xc1\x0d\x26\x14\xda\x6d\x04\xc9\x73\xc5\x1a\x3f\x51\xb2\x6b\xa4\x70\x70\x3b\xfd\x38\x9d\x0d\xae\xe6\xa7\x83\xb3\xfe\x6f\x97\xb3\xf9\x64\x70\x7e\x31\x9d\x4d\x3e\xde\x1d\x58\xa6\xf8\x12\x6d\x6f\xbf\x20\xba\x3a\xcc\x0e\xb3\x77\x87\x5d\x81\xe3\x4a\xca\xb1\x96\x82\xaf\x29\x5c\x2c\x86\xda\x8f\x2d\x3a\xdc\x26\x3c\xd8\x5b\x96\x4c\x15\xf7\xe9\x26\xcf\x19\x4a\xc0\x79\x66\x7d\xeb\x4c\x48\xdc\x1e\x2d\x52\x0f\x3d\xef\x45\x6a\xf3\xcb\xbe\x38\xad\xb6\x1c\x71\x0f\x5c\x85\xda\x73\x6d\xdd\x31\x54\x11\x41\x22\x53\x2b\xf2\x65\xe0\x1f\x33\xbf\xa4\x1d\x05\x5b\x0e\x54\xab\x87\xc2\xc6\xa3\xd3\xf9\xb0\x7f\x35\x98\x8e\xfb\x27\x83\x96\xb0\x15\x93\x15\x9e\x59\x5d\xd2\x4e\x6e\x17\x02\x65\xd1\xcc\xd7\x07\xf4\xa8\x7b\xd3\xe3\xd9\x76\xcc\x24\x6d\xaf\x5e\xe1\x50\xa4\x5f\x31\xd3\xd5\xf6\xa0\x60\x9a\xf8\xee\x8e\xca\xee\x5a\xbb\x1f\x9a\xd3\x48\xaf\xe7\xc6\x93\x63\x33\xec\x10\xa5\xb4\x6f\xf7\x7c\x7b\x17\xee\xb4\x8a\x70\xa4\xc0\x05\xab\xa4\x27\xf5\x35\x85\xd4\xdb\x0a\xd3\xa4\x5d\x87\xd0\xd4\x69\x00\xb4\x34\x45\xdf\x9b\x95\x77\xa5\x0b\xa4\xf0\x07\x13\xfe\x4c\xdb\x33\x61\x9d\x3f\xd1\xca\x55\x25\xda\xc4\xc6\x47\xc9\xa6\x68\x4f\x51\xa2\xc7\xda\xf3\x66\x8f\x6d\x42\x96\xec\xbc\xf2\x9e\x5c\x0f\xdb\x02\x7d\x64\x33\x6c\x80\xad\x5a\xa5\xf0\x27\xa9\x03\x72\xdb\xe4\xa6\x9e\x20\xa1\x02\xae\x98\x49\xe9\xa7\x86\x7a\xbb\xcd\x5c\x7d\x9f\xd2\x74\xd3\xb9\xe3\xfe\xec\xd7\xf9\xd9\x68\x32\x1f\x8e\x86\xf3\xcb\x8b\xe9\x6c\x70\x3a\x1f\x8e\x4e\x07\xd3\xf4\xed\x3d\x26\x58\xe7\x52\xfa\x29\x3d\xb8\xdd\xe0\x2e\x47\x27\xfd\xcb\xf9\x74\x36\x9a\xf4\xcf\x07\xb5\x94\xbb\x83\xfa\x49\x12\xbe\xbb\xe6\x1f\xcf\x77\xf5\xfa\xf2\xe1\x05\xd0\x18\xfb\xff\xff\xf5\x72\xa1\x7a\x6e\x59\x9f\xbe\x2e\x85\x44\xb8\x46\xaf\x8d\x77\x90\x96\xd4\x51\x43\x53\xd0\x26\xb6\x6f\xa1\xef\xe7\x00\x73\x08\x6f\xb4\xf1\x20\x54\xa7\x16\xcd\x0f\x9d\x23\xcb\x9d\x96\x95\xaf\xe3\xf0\xcb\x9b\xd1\x78\xd6\x9f\x9c\x77\x18\xde\xbf\xef\x1c\x5d\x17\xee\xc4\x77\xbc\x50\x1f\xd6\x1e\xdd\x4b\xd0\x65\x17\xbd\xd2\x32\x54\xce\x73\x48\x74\x8c\x37\xfe\xa9\xd8\x6d\xe5\x4d\x21\x2c\x90\x12\x0e\x8f\x8f\x8f\x81\x18\x78\x73\xdb\x76\x24\x06\x95\x2f\x4b\x5d\xc0\xf1\xe1\xd1\xee\x6d\x2f\xcb\xea\x3d\xcf\x6c\xa1\xbf\xaa\xff\x42\xfd\x64\xa8\x6d\x09\xc4\x2e\xf6\x04\x78\x89\xd2\xa0\x1d\xeb\x22\x5b\xb3\x52\x6e\xa3\xb8\xd3\xc5\x81\x14\x1b\x7d\xac\x8b\xbd\x2f\xaa\xd8\xdb\x51\x1a\x31\x0d\x53\xfb\xd9\xf4\xf8\x0a\xde\x01\xc1\xab\xd6\x6e\x29\xac\xd5\x16\x0b\x22\x45\x6e\x99\x5d\x93\xbc\x72\xeb\x5c\x7f\xa3\x47\xd9\x4f\xef\xb2\xa3\xe4\xaf\x00\x00\x00\xff\xff\x98\x24\x98\xe7\x75\x0e\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x31\x6b\xf4\x30\x0c\xc6\xf1\xdd\x9f\x42\x78\x7e\x93\x97\x6e\xc5\x6b\x87\xee\x1d\xba\x94\x1b\x94\xf8\x21\x27\xce\xb1\x83\x24\xe7\x68\x3f\x7d\xb9\x70\xdc\x58\x68\x27\x0d\x7f\x7e\x0f\xe8\x22\x35\x27\x7a\x29\xdd\x1c\xfa\xd6\x0a\x02\x6f\xf2\x0e\x35\x69\x35\x91\x4e\x3c\x8f\xdc\xfd\xdc\x54\xbe\xd8\xa5\xd5\xf1\xf2\x6c\xa3\xb4\xff\xfb\x53\x58\xe1\x9c\xd9\x39\x05\xa2\xca\x2b\x12\xd9\xa7\x39\xd6\xc4\xcb\xa2\x58\xd8\x91\x87\x15\xae\x32\xdb\xa0\xe0\x0c\x0d\x44\x85\x27\x14\xbb\x11\xfa\x61\xfd\xb1\x30\x78\x1b\x76\xc1\x35\x51\x74\xed\x88\xbf\x71\xc8\xe2\x7f\x71\x9c\x57\xa9\x0f\xa8\xbd\xc0\x52\x18\x88\x37\x79\xd5\xd6\x37\x4b\xf4\x11\xef\x7f\xdd\x7d\x3c\x05\x22\x85\xb5\xae\x33\x8e\xbe\xb5\x6c\xf1\x1f\xc5\xda\x32\xec\xc8\x3b\x74\x3a\xd2\x02\xbf\x95\x22\x76\xdc\x2b\xfb\x7c\x8e\xa7\xf0\x1d\x00\x00\xff\xff\xe5\x1d\x7a\x17\x89\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbb\x4e\xc4\x40\x0c\x45\xfb\xf9\x8a\xf9\x81\x09\xda\x0e\xb9\x03\x0a\xfa\x45\xa2\x77\x26\x97\xc5\x24\x19\x47\xb6\x27\x12\x7c\x3d\x5a\x11\xd1\xf0\x68\xaf\x74\xcf\x39\xa5\x94\xc4\x9b\x3c\xc3\x5c\xb4\x51\xb6\x91\xeb\xc0\x3d\x5e\xd5\xe4\x83\x43\xb4\x0d\xf3\xad\x0f\xa2\x37\xfb\x69\x44\xf0\x29\xcd\xd2\x26\xca\x0f\x4b\xf7\x80\x9d\x75\xc1\xbd\xb4\x49\xda\x25\xad\x08\x9e\x38\x98\x52\xce\x8d\x57\x50\x5e\x11\x26\xd5\x8b\xc3\x76\x18\xf9\xbb\x07\x56\xba\xd2\xcb\x84\x05\x17\x0e\xb5\x64\xba\xe0\x8c\x97\xeb\x8b\x37\x79\x34\xed\xdb\x3f\x19\x29\xe7\x1f\x01\xdf\xbe\xdf\x05\xde\xc7\x37\xd4\x70\x4a\xe5\xf8\x3e\xc1\x76\xa9\xb8\xab\x55\x7b\x8b\x3f\x72\x8f\xd9\x37\xae\xa0\x3c\xf7\x11\xe5\x8b\x9f\x3e\x03\x00\x00\xff\xff\x69\xfc\x98\x93\x34\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4e\xc4\x40\x0c\x46\xfb\x39\xc5\x5c\xc0\x41\xdb\xa1\xe9\xa0\xa1\x5f\x24\x7a\x67\xf2\x01\x26\x1b\x4f\x64\x7b\x22\xe0\xf4\x28\x68\xf9\x69\x76\x7b\xfb\x7d\xef\x11\x51\xe2\x55\x9e\x60\x2e\x4d\x4b\xb6\x91\xeb\xc0\x3d\x5e\x9b\xc9\x27\x87\x34\x1d\xe6\x5b\x1f\xa4\xdd\x6c\x87\x11\xc1\x87\x34\x8b\x4e\x25\x1f\xdb\x09\xf7\xa2\x93\xe8\x4b\x5a\x10\x3c\x71\x70\x49\x39\x2b\x2f\x28\x79\x41\x98\x54\x27\x87\x6d\x30\xda\x79\x64\xe0\x09\x76\x3e\xf1\x95\x2b\x4a\x9e\xfb\x08\xf2\x0f\x0f\x2c\xc9\xda\x09\x47\x3c\xef\x10\x5e\xe5\xc1\x5a\x5f\xaf\xe8\xa4\x9c\xff\x44\x7e\x77\xf1\x1e\xd0\x3d\x84\x78\x95\x7f\xe3\xd0\x90\xfa\xfd\xfe\xa3\xe1\x7d\x7c\x43\x0d\x2f\x89\xce\xa0\x47\xd8\x26\x15\x77\xb5\xb6\xae\x71\x21\xe5\xb2\xfe\x57\x00\x00\x00\xff\xff\xc7\x9e\x8d\xd1\x49\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4d\x6a\xc4\x30\x0c\x85\xf7\x3e\x85\x2e\xe0\x74\xb2\x2b\xde\x75\x59\x68\x61\x20\x65\xf6\x1a\x8f\x3a\x08\xe3\x1f\x24\x39\x90\xdb\x97\x30\x71\xba\x13\x7a\xef\xfb\x90\xbc\xf7\x0e\x1b\xdf\x48\x94\x6b\x09\x80\x8d\x85\x9e\xac\x26\x68\x5c\xcb\x94\xde\x75\xe2\xfa\xb6\xce\x77\x32\x9c\x5d\xe2\xf2\x08\xf0\x71\xfd\x5c\x48\x56\x8e\xe4\x32\x19\x3e\xd0\x30\x38\x80\x82\x99\x02\x1c\xd5\x29\x93\x09\x47\x3d\x0c\x4e\x1b\xc5\xbd\xa4\x2f\x70\x1f\x07\x71\x34\xfd\x1e\x91\x9c\x81\x36\x8c\x14\x20\xf5\x3b\x79\xdd\xd4\x28\x3b\x80\xa7\xd4\xde\x4e\x64\xc8\x01\xd6\xf1\xc0\xb8\x14\x80\x8b\x52\xec\x42\x4b\xe2\xf6\xf3\xb5\xdc\x48\xf8\x77\x0b\x60\xd2\x69\x88\xae\xc2\x55\xd8\xb6\x6f\x2e\x9c\x7b\x0e\x30\x5f\x2e\xff\xb2\x91\xbe\xd6\x7f\x01\x00\x00\xff\xff\x25\x03\x92\xf5\x2a\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x6b\x1b\x4d\x0c\xbe\xef\xaf\x10\xfb\x92\xe3\xd8\x6f\x29\x94\x32\xb7\x90\xb8\xa5\x90\xb8\x25\x76\x0b\x39\x05\x65\x56\xae\x07\xcf\x17\x92\xec\x76\x09\xf9\xef\x65\xb2\x8e\x6b\x27\x71\x09\xb4\x3a\x0a\x3d\x1f\x7a\x24\x63\x4c\x83\xc5\x7f\x23\x16\x9f\x93\x85\xcd\x9b\x66\xe5\x53\x67\x61\x46\xbc\xf1\x8e\x4e\x9d\xcb\xeb\xa4\x4d\x24\xc5\x0e\x15\x6d\x03\x90\x30\x92\x85\x48\xca\xde\x89\x11\xe2\x0d\xf1\xb6\x2d\x05\x1d\x59\x58\xad\x6f\xc9\x48\x2f\x4a\xb1\x79\xaa\x80\xa5\xc8\x78\x27\x73\x4e\x25\xe4\x3e\xd2\x5f\x49\x00\x04\xbc\xa5\x20\x15\x09\xb0\x7a\x2f\x06\x4b\x79\x06\x97\x42\xae\x4e\x08\x05\x72\x9a\x79\x98\x8e\xa8\x6e\x79\xb1\x07\x3f\x4e\x00\xa0\x14\x4b\x40\xa5\x2d\x74\xcf\x70\xad\x23\xa6\x6b\x85\x03\x81\x3f\x49\x00\x3c\xfa\xac\x55\xd8\x67\xf6\xda\x9f\x05\x14\x99\x3e\xf0\xb7\xc3\xd2\x26\xe5\x8e\x8c\x63\xaf\xde\x61\x68\xb7\xf3\x72\x70\xb5\xe9\x71\x43\x9a\x03\x31\xaa\xcf\x69\xcf\x95\x81\x15\xf5\x16\xda\xb3\x2d\xeb\x69\xd7\xe5\x24\x9f\x53\xe8\xdb\xdd\x0c\x40\x2e\x15\x99\xd9\x42\x3b\xf9\xe9\x45\xa5\x7d\x46\xf0\xe0\x8d\x73\xa0\x51\x3d\x13\x27\x52\x92\x91\xcf\x63\x97\x93\x72\x0e\xa6\x04\x4c\xf4\x4a\x4e\x00\x5a\x2c\xc8\xa9\x85\x76\x9a\x67\x6e\x49\xdd\x3a\xd0\xeb\x25\x23\x8a\x12\xff\x0b\xad\x4d\x0e\xeb\x48\xbb\xb8\xfe\x83\x58\x33\x06\x9f\x40\x63\x01\xc9\xf0\x83\xc0\x61\x02\xc1\x05\x85\x1e\xd6\x42\xb0\xe0\x1c\x8d\x38\xae\x3f\x06\x3e\xe2\x77\x12\xc0\xd4\x8d\x33\x03\x13\x76\x26\xa7\xd0\x43\x0d\x05\x7d\x22\x96\xe6\x71\xa5\xe1\x93\x34\x16\xd3\x79\xde\xb9\xa3\x58\xb4\x3f\xf7\x6c\xe1\xee\x7e\xdb\xfc\x8d\xb5\x4f\xc0\x2f\x5e\x1d\x06\x13\x16\x4e\xee\x66\xd7\xb3\xf9\xe4\xf2\xe6\x7c\xf2\xe1\xf4\xeb\xc5\xfc\xe6\x6a\xf2\xf1\xd3\x6c\x7e\x75\x7d\x7f\xc2\x98\xdc\x92\x78\x1c\x3d\x73\x66\xea\xcc\x21\x93\xdd\xfc\x3f\x7a\x3b\x7a\xb7\x23\x1c\x52\xb9\xac\x51\x1c\x7c\xd2\xcb\x2b\xc0\x10\xda\x17\xd4\xa5\x85\xb1\xc6\xd2\x34\xbf\x02\x00\x00\xff\xff\x88\xb8\x2a\x1c\x82\x04\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcd\x4a\x04\x31\x10\x84\xef\x79\x8a\x26\xf7\x28\xe2\x1e\x24\x57\xcf\xc2\x82\xe2\xbd\x37\x5b\x48\x98\xfc\xd1\xdd\x33\xe0\xdb\xcb\xc4\x41\x10\xe6\xd6\x54\x57\x7d\x55\x21\x04\xc7\x23\x7f\x42\x34\xf7\x16\x69\x7b\x72\x4b\x6e\xf7\x48\xef\x90\x2d\x27\xb8\x0a\xe3\x3b\x1b\x47\x47\xd4\xb8\x22\x52\x85\x49\x4e\x1a\x14\xb2\x41\x0e\x59\x07\x27\x44\x5a\xd6\x1b\x82\x7e\xab\xa1\x3a\xa2\xc2\x37\x14\xdd\x93\x34\x3f\xd2\x60\xd0\x87\xdc\x1f\x7f\x49\xfe\xed\x1f\xca\x9f\x18\x53\x59\xd5\x20\xd3\x91\xf7\x06\x6f\xb2\xc2\x3b\x1d\x48\x3b\x58\x51\x90\xac\xcb\x51\xf2\xa2\x81\xc7\x38\xd9\x38\xba\xd8\x5c\x12\xe6\x19\xe9\x72\x79\x9e\x91\x21\xdd\x7a\xea\x25\xd2\xc7\xeb\x75\x2a\xc6\xf2\x05\xbb\xfe\xb9\x7e\x02\x00\x00\xff\xff\x92\x19\xf9\x3e\x23\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x3f\x4f\xc4\x30\x0c\xc5\xf7\x7c\x0a\xeb\xf6\xf4\xc4\x86\xb2\x01\x03\xfb\x21\xb1\xbb\xa9\xb9\x33\x6d\xe3\xca\x76\x8a\xe0\xd3\xa3\x6b\xcb\x1f\x81\x74\x42\x62\xca\x4b\xe2\x9f\x9f\xde\x8b\x31\x06\x9c\xf8\x91\xd4\x58\x4a\x02\x6d\x31\x37\x58\xfd\x24\xca\x6f\xe8\x2c\xa5\xe9\xaf\xad\x61\xd9\xcf\x57\xa1\xe7\xd2\x25\xb8\x1b\xaa\x39\xe9\x41\x06\x0a\x23\x39\x76\xe8\x98\x02\x40\xc1\x91\x12\xd8\xab\x39\x8d\x69\x24\x57\xce\x16\x8d\x74\x26\x0d\x5a\x07\xb2\x14\x22\xe0\xc4\xf7\x2a\x75\xb2\x33\x11\x61\xb7\x0b\x00\x4a\x26\x55\x33\x6d\x6f\x93\x74\xb6\x88\x22\x1d\x7d\x53\x7b\x73\xf4\xed\x8e\x23\xd9\x84\x79\xf9\x9e\x49\xdb\x0d\x3d\x92\x2f\xe7\xc0\xb6\x8a\x17\xf4\x7c\x0a\xff\x0b\x79\xcb\xa5\xe3\x72\xfc\x7b\x56\x19\xe8\x40\x4f\xe7\xb1\x8f\xb4\x17\x2c\x03\xc0\xef\x5a\x2f\x1b\x58\x6d\x9f\x29\xfb\xd2\xe7\xca\x3e\x90\xce\x9c\xe9\x26\x67\xa9\xc5\x3f\xf1\x1f\x1c\x7c\xf5\x96\xa0\xaf\x2d\xc5\x75\x7f\x78\x0f\x00\x00\xff\xff\x39\x82\xcc\x46\x05\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x21\xbb\x72\x38\xdc\x72\xf0\xd8\x0e\xdd\x03\xb4\x3b\x6d\xb3\x09\x6b\x59\x14\x48\x2a\x41\xfb\xeb\x0b\xa7\x6e\x82\xa4\x76\x90\xb4\xdd\x24\x41\x7c\x1f\x1f\xf9\x20\xd3\x13\x8a\x12\xa7\xca\x4b\x0d\xcd\x12\x8a\x6d\x58\xe8\x0d\x8c\x38\x2d\xbb\xff\xba\x24\xfe\xb3\xfd\xeb\x3a\x4a\x6d\xe5\xef\x63\x51\x43\x59\x71\xc4\x3b\x4a\x2d\xa5\xb5\xeb\xd1\xa0\x05\x83\xca\x79\x9f\xa0\xc7\xca\x77\xa5\xc6\x00\x99\x14\x65\x8b\x12\x86\x6b\x44\x0b\xd0\xf6\x94\x9c\x70\xc4\x15\x3e\x0f\xbf\x21\xd3\x83\x70\xc9\x17\xc8\xce\xfb\x2f\xe0\x03\x47\x5f\xd5\xb0\xaf\x0e\xfa\x99\x46\x86\x96\xfa\x05\x1b\xd3\xca\x85\x9b\x20\x8f\x8a\x32\xe3\xc2\xb9\x10\x82\xfb\xfe\xb4\x26\xc6\xf4\xd9\xfe\x3f\x0d\x0d\x27\x13\x8e\x11\xc5\x49\x89\x78\xd2\xb8\x0e\x15\xc1\x2f\x16\xce\x7b\x41\xe5\x22\x0d\x8e\x6f\x89\x5b\x54\xe7\xfd\x16\xa5\x1e\x9f\xd6\x68\x57\xd6\x42\x8f\x9a\xa1\x39\x17\x88\xa4\xb6\x3f\xec\xc0\x9a\xcd\x84\x56\x42\xdb\xb1\x74\x94\xd6\xa3\xdf\x29\xf1\x8f\x3f\x99\x23\x35\x74\x33\x61\x42\x10\x53\x9b\x99\x92\xe9\xfe\x96\xb9\x9d\xd3\x1c\xfc\x1f\xb5\x7f\xb8\xb4\xf9\x88\xcf\xec\xee\xf7\xb3\x7d\x0a\x38\x06\x7b\xf0\x78\x1d\xe3\x2c\xdc\x97\x01\xef\x01\x00\x00\xff\xff\x46\xd3\x6d\x9d\x0f\x04\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x6f\xd3\x4e\x10\xc5\xef\xfe\x14\x23\x4b\x39\xae\xfd\x6f\x4f\xfd\xfb\x16\x52\x03\x15\x50\x50\x92\x82\x7a\x8a\xd6\xbb\x93\x78\x95\xf5\xae\x35\x33\x0e\x84\xd2\xef\x8e\x36\x6e\xd3\x20\x55\x2a\x42\x70\xcc\x64\xe6\xf7\xde\xbe\x67\xdd\xbb\xcf\x48\xec\x62\xa8\xa0\x45\xdf\x15\x46\x8b\x78\x2c\x5c\x2c\x77\x67\xd9\xd6\x05\x5b\xc1\x5b\xf4\xdd\xac\xd5\x24\x59\x87\xa2\xad\x16\x5d\x65\x00\x41\x77\x58\x81\x90\xc6\xb5\xdb\x2a\x43\xf6\x61\xc6\xbd\x36\x58\xc1\x76\x68\x50\xf1\x9e\x05\xbb\x8c\x7b\x34\xe9\xc4\x24\x48\x05\xad\x48\xcf\x55\x59\x4e\xee\xde\xdd\xbc\xaa\xe7\xd7\xf5\xb2\x5e\xac\xa6\x9f\xae\xee\x27\x25\x8b\x16\x67\xca\xc3\x22\x97\x27\x70\xf5\x7f\x71\x76\x51\x9c\x17\xb2\xf9\x9e\x29\xa5\xb2\xbf\xe4\xfb\xdf\x79\x3e\xf1\x0b\xc0\x28\x89\x05\xb0\xf1\xb1\xd1\xbe\x18\x35\x2e\x71\xad\x07\x2f\x73\xdc\x38\x16\xda\x57\x90\x4f\xee\x16\xb7\x8b\x65\xfd\x61\x75\x59\xbf\x9e\xde\xbc\x5f\xae\xe6\xf5\x9b\xab\xc5\x72\x7e\xbb\x9a\x4f\xbf\xdc\x4f\xf2\x0c\x60\xa7\xfd\x80\x3c\x8b\x41\x30\x48\x05\x3f\xd4\x81\x4b\x8d\x36\xa3\x02\x00\x06\xdd\x78\xb4\xe9\x8d\x03\x1e\x66\x7d\x24\xe1\xc7\xbf\xbf\x62\xc3\x68\x06\xc2\xc7\x01\x80\x78\x7e\xfa\xf1\x3c\xc0\x4e\x43\x88\xe9\xa1\x31\x1c\x77\x7b\x8a\x1d\x4a\x8b\x03\xa7\xd8\x93\x48\x05\xf9\xc5\x7f\x17\xe7\xf9\xb3\x0b\x6c\x48\xf7\x58\x41\x9e\xb0\xe3\x4a\x4f\x71\xe7\x2c\xd2\x11\x99\x1a\xa0\x80\x82\x7c\x15\x36\x84\x7c\xe2\xab\x1f\x1a\xef\xb8\x45\xbb\x40\xda\x39\x83\x2f\x38\x26\x17\xc9\xc9\x7e\xe6\x35\xf3\xf5\xa1\xf2\x7c\x4c\x5d\x19\x3f\xb0\x20\x29\x43\x4e\x9c\xd1\x7e\xb4\xe2\x3a\xbd\x39\x32\xc7\x6f\x24\x27\x1d\x4c\x8b\x54\x76\x8e\x28\x12\x5a\xe5\x5d\x43\x9a\xf6\xea\xa1\xe4\xf1\x52\xa2\x47\x3a\x4d\x46\xc1\x16\x53\x9b\xb3\x07\x81\xa9\xb5\x31\xf0\xc7\xe0\xf7\x8f\xc1\xc4\x3e\x5d\x44\xaa\x20\xaf\xbf\x39\x16\xce\x7f\x39\x0c\xd1\xa2\xa2\xe8\xb1\x78\xca\x23\x25\x68\x62\x10\x8a\x5e\xf5\x5e\x07\x7c\x81\x05\x80\xeb\x35\x9a\x54\xc9\x75\x5c\x98\x16\xed\xe0\xf1\xf7\x64\x3a\x9d\xf2\xf9\x33\xfe\xcf\x00\x00\x00\xff\xff\x25\xb1\xaa\x0d\x50\x04\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
