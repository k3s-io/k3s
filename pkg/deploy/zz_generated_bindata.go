// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/runtimes.yaml
// manifests/traefik.yaml
//go:build !no_stage
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8f\x13\x31\x0c\x85\xef\xf3\x2b\xa2\x1e\x91\xd2\x15\xe2\x82\xe6\x08\x07\xee\x2b\xc1\xdd\x4d\x1e\xdd\xd0\x4c\x1c\xd9\x4e\x61\xf9\xf5\x68\x3a\x5d\x51\x3a\xdb\xd2\x16\x10\x7b\x8b\xac\xf8\xf3\xf3\x73\x62\xaa\xe9\x13\x44\x13\x97\xde\xc9\x8a\xc2\x92\x9a\x3d\xb0\xa4\xef\x64\x89\xcb\x72\xf3\x56\x97\x89\xef\xb6\xaf\xbb\x4d\x2a\xb1\x77\xef\x73\x53\x83\xdc\x73\x46\x37\xc0\x28\x92\x51\xdf\x39\x57\x68\x40\xef\x36\x6f\xd4\x87\xcc\x2d\xfa\xc0\xc5\x84\x73\x86\xf8\x81\x0a\xad\x21\x9d\xb4\x0c\xed\x3b\xef\xa8\xa6\x0f\xc2\xad\xea\x98\xe8\x5d\x60\x96\x98\xca\x61\xbd\xce\x39\x81\x72\x93\x80\xfd\xa5\x0c\x52\x68\xe7\xdc\x16\xb2\xda\xc7\xd6\xb0\x09\x20\x20\xc3\xee\xd8\x6a\x1c\x8f\xb3\x1a\x8b\xc5\x1c\x89\x2d\x8a\x1d\x21\x0f\x50\x95\x2c\x3c\x5c\x0d\x2d\x1c\x8f\x65\x2e\x5e\x2d\xae\xc8\xbd\x53\x23\x6b\xba\x0b\x28\x64\x9b\xc2\x61\xec\x00\x3b\xe9\xbb\x08\xfc\xc4\x99\xf2\x38\x9e\xf0\x31\x27\x9d\x0e\x5f\x6f\x42\xcf\xb4\x5d\xeb\xdd\x9e\x45\x21\x70\x3b\x37\x99\x51\xef\x65\x86\xd2\x00\xad\x34\x93\xf7\x3b\x16\xd5\xaa\x73\x5a\x24\x0c\x5c\x14\xc7\xca\x9e\x9f\x6f\x4c\x1a\x78\x0b\x79\xdc\x3f\xe9\xe7\x1e\x60\x89\x95\x53\x31\xcd\x73\x07\x4f\xcd\xc4\xfb\xee\xf6\x1f\xfb\x2e\x95\x98\xca\xfa\xea\x8f\xcb\x19\xf7\xf8\x3c\xde\x7e\xea\xf2\x4c\xe5\xce\xb9\xf9\xaa\xb8\xa8\x8e\xb6\xd5\x17\x04\xdb\xed\x88\x09\xf1\x51\x21\x97\xe5\xba\x9f\xc3\xee\xdd\xa6\xad\xe0\xf5\x51\x0d\xc3\x7f\x71\xcc\x8f\x7c\x1f\x91\xb1\x26\xe3\xbf\x6a\xe0\xd4\x55\x7f\x54\xe0\xa5\x38\xf7\x87\x96\xa1\x58\x0a\x3b\xb2\x17\x50\x3c\x27\xee\x46\x4b\x7f\xf1\x12\xdf\x0c\x65\xec\xcd\x53\x4d\xe3\xf2\x39\x29\xe3\x9f\xf8\xfb\x23\x00\x00\xff\xff\xde\xc0\x02\x82\x7a\x07\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdd\x6e\xe3\xba\x11\xbe\xf7\x53\x10\x02\x72\x53\x54\x4e\x7c\x82\x3d\x4d\x75\x97\x63\x3b\xbb\x46\x13\xaf\x61\x3b\x0b\x04\x45\x11\xd0\xd4\xd8\x62\x43\x71\x58\x92\x72\xa2\xdd\xe6\xdd\x0b\xea\xcf\xa2\xac\x64\x93\xf4\xac\x6f\x22\x69\x38\x7f\x1f\x87\xdf\x0c\x43\x15\xff\x06\xda\x70\x94\x11\xd9\x8f\x06\x0f\x5c\xc6\x11\x59\x81\xde\x73\x06\x97\x8c\x61\x26\xed\x20\x05\x4b\x63\x6a\x69\x34\x20\x44\xd2\x14\x22\xc2\x50\x43\x2c\x4d\xf5\x6e\x14\x65\x10\x91\x87\x6c\x03\xa1\xc9\x8d\x85\x74\x10\x86\xe1\xa0\x6d\x5a\x6f\x28\x1b\xd2\xcc\x26\xa8\xf9\x77\x6a\x39\xca\xe1\xc3\x85\x19\x72\x3c\x6d\x9c\x8e\x45\x66\x2c\xe8\x25\x0a\xf0\x3c\x0a\xba\x01\x61\xdc\x13\x29\x5c\x68\x09\x16\x0a\xd5\x0d\xa2\x35\x56\x53\xa5\xb8\xdc\x95\x3e\xc2\x18\xb6\x34\x13\xd6\x34\xa1\x96\x01\x45\x75\xc4\x3a\x13\x60\xa2\x41\x48\xa8\xe2\x9f\x35\x66\xaa\xb0\x1c\x92\x20\x18\x10\xa2\xc1\x60\xa6\x19\x54\xdf\x40\xc6\x0a\xb9\x2c\x8c\x85\xc4\x94\xa0\x94\x2f\x0a\xe3\xf2\xa1\xc9\xdf\xbd\xee\x41\x6f\x2a\x5d\xc1\x8d\x2d\x1e\x1e\xa9\x65\xc9\xb1\xbf\x98\x1b\x86\x7b\xd0\x79\x85\xc3\x2b\xde\x05\xff\xa9\xf5\xff\x0b\xed\x3f\xb8\x8c\xb9\xdc\x79\xa0\x53\x29\xd1\x16\x9a\x15\xf2\x7d\x26\xbd\xcd\xa0\x99\xc5\x4c\xc5\xd4\x42\x44\x02\xab\x33\x08\xfe\xfc\xbd\x43\x01\x4b\xd8\x16\xf1\x55\x68\xbe\x92\xeb\x80\x90\xe3\xc2\x7a\xc1\xb2\xc9\x36\xff\x06\x66\x8b\xc2\xe8\x3d\x02\x1f\x2e\xfc\x03\xe0\x28\xb7\x7c\x77\x43\xd5\x47\x8e\x53\xbd\x7c\x8c\x1a\xb6\x5c\x40\x44\xfe\x5b\x60\x3a\x8c\x3e\x9d\x93\x1f\xc5\xa3\xfb\x81\xd6\xa8\x4d\xf3\x9a\x00\x15\x36\x69\x5e\x35\xd0\x38\x6f\xde\x0e\xdb\x41\x4e\x7e\x8c\xaf\x6f\x57\xeb\xe9\xf2\x7e\xf2\xf5\xe6\x72\x36\x7f\x3e\x21\x5c\x86\x34\x8e\xf5\x90\x6a\x45\x09\x57\xbf\x97\x0f\x07\x4f\xa4\x38\x01\x84\x4b\x03\x2c\xd3\xd0\xfa\xbe\xa5\x42\xd8\x44\x63\xb6\x4b\xfa\xad\x34\x6b\x9f\x0f\x81\xa2\xb1\x86\x9c\x82\x65\xa7\x15\x14\xa7\x73\x8c\xe1\x4b\xf1\xb9\xed\xd4\x5a\x41\x7e\x3f\x6b\x7d\xd0\x20\x90\xc6\x64\xf4\xc9\xf4\x87\xd0\xe3\x4c\x69\x4c\xc1\x26\x90\x19\x12\xfd\x7d\xf4\xe9\xbc\x11\x6c\x51\x3f\x52\x1d\x93\x61\x19\x89\x3b\x8e\x62\x3f\x64\x28\xb7\xcd\x12\x46\x59\x02\xe4\xfc\x10\x81\x40\x54\x03\x3f\x98\x96\x8c\xc6\x1b\x2a\xa8\x64\x07\x7c\x78\xaa\x50\x5b\x3f\x55\x96\x19\x8b\xe9\xe9\x5f\x86\x8e\x0f\x34\x8f\xcb\xd5\x65\xc0\xaf\xae\x77\x8c\x04\xfa\xa8\xe4\xa8\x52\xe6\x70\xd0\x27\xa0\x04\xe6\x29\x7c\x8c\xc7\x3b\x47\xf8\xc2\x84\x54\xa9\x6a\x49\xa9\xd8\x3d\xd8\xa5\xe1\xc0\x55\xea\x64\xbe\x0a\x06\x46\x01\x8b\x0a\x76\xdb\x73\x17\xdf\x17\x6e\x2c\xea\xfc\x9a\xa7\xdc\x46\xc4\x21\xe9\x68\xc0\xc2\x2e\x2f\x7d\xd8\x5c\x41\x44\x96\x28\x04\x97\xbb\xdb\x82\x50\x4a\x02\x6a\x7f\x89\x2a\x40\x53\xfa\x74\x2b\xe9\x9e\x72\x41\x37\xee\x54\x8c\x9c\x39\x10\xc0\x2c\xea\x72\x4d\xea\x08\xf2\xba\x95\x43\x7f\x16\x16\x52\x25\x1a\xc3\x6d\xa0\x8a\x9d\xf4\xf4\x5f\xc2\xa1\xce\xb4\x2c\x32\x8e\x9a\xdb\x7c\x2c\xa8\x31\xf3\x12\x92\x12\xd2\x90\x95\x74\x14\x32\xcd\x2d\x67\x54\x04\x95\x8a\xf1\x18\x67\xde\xd9\x9f\x02\x1a\x14\xa0\xdb\xa4\xec\x7e\x21\x79\x80\xdc\x01\x5e\x99\xbb\x8c\x63\x94\xe6\xab\x14\x79\xd0\x3a\x12\xa8\x9c\x26\xea\x88\x04\xd3\x27\x6e\xac\x09\x8e\x0c\x48\x8c\x21\x74\x14\xdb\x21\x76\x86\xd2\x6a\x14\xa1\x12\x54\xc2\x1b\x6d\x12\x02\xdb\x2d\x30\x1b\x91\x60\x8e\x2b\x96\x40\x9c\x89\x46\xd7\x39\x5a\x79\x9b\x74\x5c\x45\x68\x22\x22\xb8\xcc\x9e\x9a\xd4\x15\x0a\xdc\xe5\x2b\xe5\x58\x6c\x8c\xd2\x15\x8d\x6b\x8e\x6d\x20\x52\xfa\xb4\x7a\x80\xc7\xb2\x0c\xea\x5f\xad\xf9\x0f\x97\xa4\xef\xc4\xd1\x8e\x2b\xd7\xd6\xea\xc7\x04\xe4\xad\x34\xd4\x72\xb3\xe5\x65\x4d\x4d\x70\x8e\xb6\xce\xa1\xb5\xb4\x28\x8a\xe3\x3c\x5e\x28\xba\xd7\x4b\xe7\xad\xf1\xd7\x2f\x9d\x2d\xfa\x8e\xf2\x27\x49\xd4\xf1\x5f\xca\xfc\x91\xe6\xbf\x2c\x0b\x57\x2b\x94\x4b\xd0\x8d\x46\x78\xc4\x34\xe5\x8f\xa7\x74\xe7\x0e\xc5\xc9\x8f\xd5\xdd\x6a\x3d\xbd\xb9\x9f\x4c\xaf\x2e\x6f\xaf\xd7\xf7\xcb\xe9\xe7\xd9\x6a\xbd\xbc\x7b\x3e\xd1\x54\xb2\x04\xf4\x69\xca\x5d\x5b\x83\x38\xac\x6c\xd4\x7f\xa3\xd1\x70\xf4\xdb\x70\x14\xf8\x36\x17\x99\x10\x0b\x14\x9c\xe5\x11\x99\x6d\xe7\x68\x17\x1a\x0c\x14\x2d\xbc\xfc\x79\x63\x56\x03\x83\xa3\xa3\x4e\x9a\x29\xa4\xa8\xf3\x88\x8c\xfe\x76\x76\xc3\xbd\x9e\xf3\x9f\x0c\x4c\x77\x35\x53\x59\x44\x46\x67\x67\x69\xaf\x0d\xcf\x04\xd5\x3b\x13\x91\x7f\x92\x20\x74\xcd\x25\xf8\x2b\x09\x3c\x7e\xaf\x9b\x7c\x40\xfe\xd5\xa8\xec\x51\x64\x29\xdc\x38\x66\xf0\x4a\xbe\x06\xd7\xcd\x16\x61\xb9\xa8\xe5\x3f\x75\xeb\x17\xd4\x26\x91\xd7\x41\xbc\x5c\x68\xec\xb8\x22\x22\x6e\x64\x3b\x36\x5c\xb4\x9a\xf0\x9d\xf6\xab\x0e\xf5\x73\x37\xae\xb7\x79\xe9\x34\xf5\xb3\x40\x6d\x23\xd2\x6a\xce\x75\xc7\xf2\xc3\x57\x1a\x2d\x32\x14\x11\xb9\x9d\x2c\xde\x6b\x27\xb4\x4c\xf5\xda\x5a\x8f\x5f\xb1\xe5\x8d\x0c\xb5\xb5\x14\xac\xe6\xac\x3f\xb2\xb6\xb5\x62\x5a\x72\x6d\x01\xa5\x85\x27\xdb\xae\x20\x2a\x04\x3e\x2e\x34\xdf\x73\x01\x3b\x98\x1a\x46\x45\x41\xf5\x91\x1b\x67\x4c\x1b\x75\x46\x15\xdd\x70\xc1\x2d\x87\x4e\x0d\xd2\x38\xf6\x3f\x84\x64\x3e\x5d\xdf\xff\x31\x9b\x4f\xee\x57\xd3\xe5\xb7\xd9\x78\xea\x89\x63\x8d\xaa\xab\x40\x85\xe8\xd9\xb8\x25\xa2\xbd\xe2\x02\xaa\xb9\xd9\xdf\x46\xc1\xf7\x20\xc1\x98\x85\xc6\x0d\xb4\xed\x25\xd6\xaa\xcf\x60\x7d\x17\xaa\xac\x97\xce\x70\x4a\xaa\x72\x88\xc8\xc5\xd9\xc5\x99\xf7\xd9\xb0\x04\x1c\xc8\x5f\xd6\xeb\x45\x4b\xc0\x25\xb7\x9c\x8a\x09\x08\x9a\xaf\x80\xa1\x8c\x4d\xe4\x0f\x87\x0a\x34\xc7\xb8\x91\x8d\xda\x32\xcb\x53\xc0\xcc\x1e\x84\x2d\x99\xc9\x18\x03\x63\xd6\x89\x06\x93\xa0\x88\x7d\xe9\x96\x72\x91\x69\x68\x49\xcf\xbd\x11\x9b\xbf\x1b\x0a\x7f\x30\x6f\x21\x31\xba\x18\x7d\x18\x89\x57\x80\xf8\xed\x17\xe3\x10\x4b\x53\x33\xf0\xa4\xbc\xd2\x55\x82\x92\x40\xde\x41\x60\xac\xbe\x34\xf9\xb8\xf5\xb7\x94\x02\x0a\x0b\xa9\xe9\x96\x74\x31\xdf\xd4\xac\xda\xe9\x64\xe5\x16\xf4\x0a\x2b\xc5\xe6\x26\xd2\xab\x79\x2c\x7d\x23\x77\xbe\x25\xb5\xf0\x88\x48\xdd\xd4\xe5\x58\x81\x8a\xea\x0c\xbe\x78\xdf\xac\x2e\xb0\x3d\x43\x7f\xab\x67\xbf\x38\xf5\x1f\xdd\xff\x0f\xb7\x26\x37\x70\x94\xf5\x19\x38\x2e\x0c\x7a\xc4\x86\x69\xaa\x5e\xfc\x3f\xc0\x1b\x2e\x11\xf5\x8c\x5c\xcd\xc4\x2d\x4b\x6f\xbd\x6e\xf8\xb7\x80\x3e\x9f\x95\x8f\xd9\x22\x6a\x5f\x80\xe7\xab\xe7\x93\xb6\xd0\x74\xa4\xf7\xd7\xb3\xd5\xba\x58\xd2\x34\xaf\xb0\xd3\x9a\x54\xbb\xe7\x74\x3b\x54\xd8\xd3\x7f\x5e\x50\x28\x1b\x47\xd8\xd3\x62\x94\xdf\x89\xba\x2a\x5c\x5d\xd1\x94\x8b\xbc\x3e\x84\x7e\x02\xb3\xc5\xd5\xe5\xcd\xec\xfa\x6e\xf1\xf5\x7a\x36\xbe\x7b\x3e\x19\xfc\x2f\x00\x00\xff\xff\x1e\x09\xab\x21\x03\x14\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xd1\x6f\x1a\xb9\x13\x7e\xdf\xbf\x62\x7e\xfb\xbb\xbc\x9c\xea\x25\x51\xa5\xcb\xc9\x6f\x5c\x20\x6d\x24\x02\x08\x68\x4f\x55\x55\x21\xe3\x1d\xc0\x8d\xd7\xb6\x6c\x2f\x0d\x97\xcb\xff\x7e\xb2\xbd\x90\x25\x49\x13\xa2\xd3\xf9\x05\x61\xcf\x7c\x33\x9e\xef\xf3\xcc\x32\x23\x3e\xa3\x75\x42\x2b\x0a\x9b\xb3\xec\x46\xa8\x92\xc2\x14\xed\x46\x70\xec\x72\xae\x6b\xe5\xb3\x0a\x3d\x2b\x99\x67\x34\x03\x50\xac\x42\x0a\x52\x73\x26\x89\x61\x7e\x4d\x8c\xd5\x1b\x11\xfc\xd1\x12\x97\xfc\x08\x6b\x1c\x93\xb9\x33\x8c\x23\x85\x9b\x7a\x81\xc4\x6d\x9d\xc7\x2a\x23\x84\x64\xed\xc8\x76\xc1\x78\xc1\x6a\xbf\xd6\x56\xfc\xc5\xbc\xd0\xaa\xb8\xf9\xdd\x15\x42\x77\xf6\x39\x5d\xc8\xda\x79\xb4\x13\x2d\xf1\xf8\x84\x6c\xb0\xb6\xb5\x44\x47\x33\x02\xcc\x88\x0f\x56\xd7\xc6\x51\xf8\x9a\xe7\xdf\x32\x00\x8b\x4e\xd7\x96\x63\xdc\x51\xba\x44\x97\xbf\x83\xdc\x84\xb4\x9c\x47\xe5\x37\x5a\xd6\x15\x72\xc9\x44\x15\x4f\xb8\x56\x4b\xb1\xaa\x98\x49\x76\xba\x74\x1d\xa9\x57\x11\x6a\x83\x76\x11\x61\x56\xe8\xc3\xa1\x14\x2e\xfe\xfe\x60\x9e\xaf\xf3\x6f\xaf\x87\x47\x55\x1a\x2d\x94\x7f\x36\x85\x7d\xbc\xc3\x58\xbf\x1e\x05\xbc\xc1\x80\x7a\xe0\xc8\x2d\x32\x8f\x11\xf4\xf9\xfc\x9c\xd7\x96\xad\xb0\xa1\xe1\x29\x68\x73\xce\x25\x73\x0e\xdd\x71\x15\xf8\x57\xa4\xff\x21\x54\x29\xd4\xea\x78\xee\x17\x42\x95\x59\x10\xc0\x04\x97\xc1\x78\x77\xbd\x17\x02\x67\x00\x4f\xc5\x76\x8c\xc4\x5c\xbd\xf8\x8e\xdc\x47\x95\x3d\xfb\x84\xfe\xab\x87\xc3\x8c\x71\x0f\xe5\xea\xa1\x91\x7a\x5b\xe1\x1b\xde\xec\xcf\x43\x39\x83\x9c\x46\xda\x93\xed\x47\x11\x38\xdf\x0e\x44\x25\x3c\x85\xd3\x0c\xc0\x79\xcb\x3c\xae\xb6\xc1\x0a\xc0\x6f\x0d\x52\x98\x68\x29\x85\x5a\x7d\x32\x25\xf3\x18\xf7\x6d\x7b\x27\x99\x02\x54\xec\xf6\x93\x62\x1b\x26\x24\x5b\x48\xa4\x70\x16\xe0\x50\x22\xf7\xda\x26\x9b\x2a\xa8\x66\xc0\x16\x28\xdd\xce\x89\x19\xf3\xc2\x35\x3c\x56\x46\xee\x43\xb4\xef\x1f\x96\x3c\x40\x7a\x0d\x0b\x60\x77\xfb\xb0\x8c\x15\xda\x0a\xbf\xbd\x08\x62\x1f\xc6\x62\xe6\xa9\x48\x24\xf4\x0c\xc2\xad\xf0\x82\x33\x99\x37\xf6\xee\x80\xfb\xe1\xdb\x88\x8f\xa5\xd4\x12\x6d\x14\x66\x2b\x63\x00\x02\x37\xb8\xa5\x90\x5f\x34\xf1\xba\x65\xa9\x95\x1b\x29\xb9\xcd\x5b\x56\x00\xda\x04\x6f\x6d\x29\xe4\xfd\x5b\xe1\xbc\xcb\x9f\x01\x89\x99\x07\xf1\x16\x81\x74\xab\xd0\x63\x7c\x7b\x5c\x2b\x6f\xb5\x24\x46\x32\x85\x6f\xc0\x05\xc0\xe5\x12\xb9\xa7\x90\x0f\xf5\x94\xaf\xb1\xac\xe5\xde\x3f\x04\x9b\x1e\xd0\x1b\xd6\x61\x60\xed\x28\x48\xa1\xea\xdb\xe6\x3c\x24\xc2\x84\x42\xbb\xaf\x01\x79\x4d\xc9\x69\x89\x8a\xad\x02\x45\x27\x77\xd3\x2f\xd3\x59\xff\x7a\xde\xeb\x5f\x76\x3f\x0d\x66\xf3\x49\xff\xc3\xd5\x74\x36\xf9\x72\x7f\x62\x99\xe2\x6b\xb4\x9d\xe7\x91\xe8\xe6\xb4\x38\x2d\xde\x9f\xe5\x87\x90\xe3\x5a\xca\xb1\x96\x82\x6f\x29\x5c\x2d\x87\xda\x8f\x2d\x3a\xdc\x93\x16\x32\xae\x2a\xa6\xca\x87\x0b\x92\xd7\x52\x25\xe0\x3c\xb3\xbe\xf5\x9f\x90\x34\x63\x5a\x5b\x1d\xf4\xbc\x93\x76\x9b\x9f\xe2\xbb\xd3\x6a\x6f\x91\x26\xc4\x75\xd0\x8f\x6b\xc7\x4e\xc5\x4a\x1e\x24\x19\xb5\xf8\xaa\x82\xfd\x98\xf9\x35\x3d\x08\xb0\xb7\x40\xb5\x79\x0a\x36\x1e\xf5\xe6\xc3\xee\x75\x7f\x3a\xee\x5e\xf4\x5b\x60\x1b\x26\x6b\xbc\xb4\xba\xa2\x07\x8a\x58\x0a\x94\x65\xd3\x7e\x9f\xec\xa7\xd8\xbb\x77\x5a\xec\xbb\x50\xd6\xbe\xd5\x1b\x2e\x94\xf6\xaf\x99\x39\x8c\xf6\x44\x32\x4d\x7d\x1f\x77\xd2\xc3\x81\xf7\xd0\x53\xa7\x69\x3f\xbe\xfd\x17\xbb\x6a\x18\x31\x4a\x69\xdf\x7e\xb7\x25\x2e\x59\x2d\xfd\xe7\x98\xeb\x2c\x36\xc8\x3c\x7a\x24\x69\xb5\x87\xe8\xa3\x67\x28\x1c\x69\x9c\x49\x3c\xa6\x90\x7b\x5b\x63\x9e\xb5\x75\x0a\x8d\x8e\x83\x43\x2b\x91\x54\x9a\x66\x60\x5e\xeb\x12\x29\xfc\xc9\x84\xbf\xd4\xf6\x52\x58\xe7\x2f\xb4\x72\x75\x85\x36\xb3\xe9\xcb\x66\xa7\xe9\x1e\x4a\xf4\x18\x0b\xd3\x4c\xc1\x5d\x45\xb3\x47\x5f\x89\x2f\x0e\x97\xbd\x7e\x7f\x32\x57\x76\x8e\x2d\x29\x53\xf8\x9b\xc4\x82\xdc\x35\xd4\xc5\xee\x14\x04\x72\xcd\x4c\x4e\xbf\x36\xbb\x77\x7b\x62\xe3\x79\x4e\xf3\xdd\xcb\x1e\x77\x67\x1f\xe7\x97\xa3\xc9\x7c\x38\x1a\xce\x07\x57\xd3\x59\xbf\x37\x1f\x8e\x7a\xfd\x69\xfe\xee\xc1\x27\x64\xe7\x72\xfa\x35\x3f\xb9\xdb\xf9\x0d\x46\x17\xdd\xc1\x7c\x3a\x1b\x4d\xba\x1f\xfa\x11\xe5\xfe\x24\x7e\xcb\x84\x75\xdf\xfc\xa6\xff\xf7\x71\x42\xf9\xf0\xfd\xd0\x24\xfb\xff\xff\x75\x16\x42\x75\xdc\x3a\x71\x89\x1e\x08\xd6\x69\xf8\xdc\x94\xc2\x02\xa9\xe0\xf4\xfc\xfc\x1c\x88\x81\xfc\x97\xbb\xcf\xa3\xc1\xbc\x77\x35\xb9\x4f\xcc\xf3\x75\xa5\x4b\x38\x3f\x3d\x6d\x1f\x75\x8a\x22\x8f\x83\x8c\xd9\x52\xff\x50\x47\x04\xb2\x15\x10\xbb\x7c\x0c\xbf\x46\x69\xd0\x8e\x75\x59\x6c\x59\x25\xf7\x30\x8f\x48\x0c\x5b\x89\xe7\xb1\x2e\x9f\x9d\x99\x89\xda\x84\x46\x4c\x63\xd4\x1e\x8c\x3f\x6f\xd1\x8f\x9c\xe0\x6d\x6d\xb9\x12\xd6\x6a\x8b\x25\x91\x62\x61\x99\xdd\x92\x45\xed\xb6\x0b\x7d\x4b\xcf\x8a\xf7\xbf\x15\x47\xf7\xe5\x7f\x02\x00\x00\xff\xff\x2b\x8b\xf8\x26\xdc\x0c\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x31\x6b\xf4\x30\x0c\xc6\xf1\xdd\x9f\x42\x78\x7e\x93\x97\x6e\xc5\x6b\x87\xee\x1d\xba\x94\x1b\x94\xf8\x21\x27\xce\xb1\x83\x24\xe7\x68\x3f\x7d\xb9\x70\xdc\x58\x68\x27\x0d\x7f\x7e\x0f\xe8\x22\x35\x27\x7a\x29\xdd\x1c\xfa\xd6\x0a\x02\x6f\xf2\x0e\x35\x69\x35\x91\x4e\x3c\x8f\xdc\xfd\xdc\x54\xbe\xd8\xa5\xd5\xf1\xf2\x6c\xa3\xb4\xff\xfb\x53\x58\xe1\x9c\xd9\x39\x05\xa2\xca\x2b\x12\xd9\xa7\x39\xd6\xc4\xcb\xa2\x58\xd8\x91\x87\x15\xae\x32\xdb\xa0\xe0\x0c\x0d\x44\x85\x27\x14\xbb\x11\xfa\x61\xfd\xb1\x30\x78\x1b\x76\xc1\x35\x51\x74\xed\x88\xbf\x71\xc8\xe2\x7f\x71\x9c\x57\xa9\x0f\xa8\xbd\xc0\x52\x18\x88\x37\x79\xd5\xd6\x37\x4b\xf4\x11\xef\x7f\xdd\x7d\x3c\x05\x22\x85\xb5\xae\x33\x8e\xbe\xb5\x6c\xf1\x1f\xc5\xda\x32\xec\xc8\x3b\x74\x3a\xd2\x02\xbf\x95\x22\x76\xdc\x2b\xfb\x7c\x8e\xa7\xf0\x1d\x00\x00\xff\xff\xe5\x1d\x7a\x17\x89\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4e\xc4\x40\x0c\x45\xfb\x39\xc5\x5c\x60\x82\xe8\x90\x3b\xa0\xa0\x5f\x24\x7a\x67\xf2\x59\x4c\x92\x71\x64\x7b\x22\xc1\xe9\xd1\x8a\x88\x06\xd8\xf6\x4b\xff\xbd\x57\x4a\x49\xbc\xc9\x0b\xcc\x45\x1b\x65\x1b\xb9\x0e\xdc\xe3\x4d\x4d\x3e\x39\x44\xdb\x30\xdf\xf9\x20\x7a\xb3\xdf\xa6\x59\xda\x44\xf9\x71\xe9\x1e\xb0\x93\x2e\x78\x90\x36\x49\x3b\xa7\x15\xc1\x13\x07\x53\xca\xb9\xf1\x0a\xca\x2b\xc2\xa4\x7a\x71\xd8\x0e\x23\xff\xf0\xc0\x4a\x17\x70\x99\xb0\xe0\xcc\xa1\x96\x4c\x17\x9c\xf0\x7a\x79\xf1\x26\x4f\xa6\x7d\xbb\x52\x90\x72\xfe\x15\xf0\xe3\xfb\x5b\xe0\x7d\x7c\x47\x0d\xa7\x54\x8e\xef\x33\x6c\x97\x8a\xfb\x5a\xb5\xb7\xf8\x27\xf7\x98\x7d\xe3\x0a\xca\x73\x1f\x51\xbe\xf9\xe9\x2b\x00\x00\xff\xff\xa5\xb5\x26\x22\x2f\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4e\x04\x31\x0c\x46\xfb\x9c\x22\x17\xf0\x22\x3a\x94\x0e\x1a\xfa\x45\xa2\xf7\x64\x3e\xc0\xcc\x8e\x13\xd9\xce\x08\x38\x3d\x1a\xb4\xfc\x34\x4b\x6f\xbf\xef\x3d\x22\x4a\xdc\xe5\x11\xe6\xd2\xb4\x64\x9b\xb8\x1e\x78\xc4\x4b\x33\xf9\xe0\x90\xa6\x87\xe5\xc6\x0f\xd2\xae\xb6\xeb\xb4\x88\xce\x25\x1f\xdb\x09\x77\xa2\xb3\xe8\x73\x5a\x11\x3c\x73\x70\x49\x39\x2b\xaf\x28\x79\x45\x98\x54\x27\x87\x6d\x30\xda\x51\x64\xe0\x19\x76\x3e\xf1\xce\x15\x25\x2f\x63\x02\xf9\xbb\x07\xd6\x64\xed\x84\x23\x9e\x76\x08\x77\xb9\xb7\x36\xfa\x3f\x26\x29\xe7\x5f\x91\x9f\x5d\xbc\x05\x74\x6f\x20\xee\xf2\x67\x1c\x1a\x52\xbf\xde\xbf\x35\x7c\x4c\xaf\xa8\xe1\x25\xd1\x19\xf4\x00\xdb\xa4\xe2\xb6\xd6\x36\x34\x2e\xa4\x5c\xd6\xff\x0c\x00\x00\xff\xff\x2a\x39\xe6\xe4\x44\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x4d\x6a\xc4\x30\x0c\x85\xf7\x3e\x85\x2e\xe0\x74\xb2\x2b\xde\x75\x59\x68\x61\x20\x65\xf6\x1a\x8f\x3a\x88\xe0\x1f\x24\xd9\x90\xdb\x97\x30\x71\xba\x13\x7a\xef\xfb\x24\xef\xbd\xc3\xca\x37\x12\xe5\x92\x03\x60\x65\xa1\x27\xab\x09\x1a\x97\x3c\xad\xef\x3a\x71\x79\xeb\xb3\x5b\x39\x3f\x02\x7c\x5c\x3f\x17\x92\xce\x91\x5c\x22\xc3\x07\x1a\x06\x07\x90\x31\x51\x80\x3e\xdf\xc9\x70\x9e\x12\x99\x70\xd4\x03\x76\x5a\x29\xee\x25\x7d\x81\xfb\x38\x88\xa3\xe9\xf7\x88\xe4\x0c\xb4\x62\xa4\x00\x6b\xbb\x93\xd7\x4d\x8d\x92\x03\x78\x4a\x69\xf5\x44\x86\x1c\xa0\x8f\xdf\x8f\xf3\x0e\x80\xb3\x52\x6c\x42\xcb\xca\xf5\xe7\x6b\xb9\x91\xf0\xef\x16\xc0\xa4\xd1\x10\x5d\x85\x8b\xb0\x6d\xdf\x9c\x39\xb5\x14\x60\xbe\x5c\xfe\x65\x23\x7d\xad\xff\x02\x00\x00\xff\xff\x14\x74\xa9\x1b\x25\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xdb\x48\x0c\xbd\xfb\x57\x10\x5e\xe4\xb6\x4a\x6c\x77\xd3\x16\x02\x72\x30\x6c\xb5\x2e\x90\xa4\x86\xe5\xec\x22\x27\x63\x32\xa2\xe3\x41\x46\x33\xb3\x24\xe5\x46\x5b\xf4\xbf\x2f\xc6\x4a\x15\x29\x1f\x45\x17\x8b\xea\xa0\x03\xf9\xf8\xf8\xe6\x0d\x25\x26\x49\x32\x50\xc1\xfc\x89\xc4\xc6\xbb\x14\xf6\xe3\xc1\x9d\x71\x45\x0a\x39\xd2\xde\x68\x9c\x6a\xed\x2b\x27\x83\x12\x45\x15\x4a\x54\x3a\x00\x70\xaa\xc4\x14\x4a\x14\x32\x9a\x13\x46\xda\x23\x3d\x84\x39\x28\x8d\x29\xdc\x55\x37\x98\x70\xcd\x82\xe5\xe0\x69\x07\x15\x02\x9f\xb4\x6d\xe6\x18\xac\xaf\x4b\xfc\x5f\x2d\x00\xac\xba\x41\xcb\xb1\x12\xe0\xee\x3d\x27\x2a\x84\x67\xe5\x1c\x50\x47\x04\xe1\xde\x44\x29\x0b\xc3\xe2\xa9\x3e\x37\xa5\x91\x14\x46\x03\x00\x16\x52\x82\xb7\x75\xc3\x23\x75\xc0\x14\x56\xde\x5a\xe3\x6e\xaf\x42\xa1\x04\x0f\x71\xea\x46\x1a\x28\x40\xa9\xee\xaf\x9c\xda\x2b\x63\xd5\x8d\xc5\x14\xc6\x91\x0e\x2d\x6a\xf1\xd4\x60\x4a\x25\x7a\x77\xde\xd1\xf9\xba\x52\x00\xc1\x32\xd8\x96\xbe\xeb\x4c\x7c\x5e\x71\x27\x3e\xb6\xd7\xe0\x47\x2d\x00\xbe\x1b\x12\x9f\x40\xc6\x93\x91\x7a\x66\x15\xf3\xe5\x81\x7f\xd8\xb8\x9b\x38\x5f\x60\xa2\xc9\x88\xd1\xca\x0e\x1f\xf0\xdc\x1b\x8f\xcb\xd7\x05\x89\xb7\x48\x4a\x8c\x77\x1d\x55\x09\xdc\x61\x9d\xc2\x70\xf6\xc0\x3a\x2d\x0a\xef\xf8\xb3\xb3\xf5\xb0\xc5\x00\xf8\x10\x2b\x3d\xa5\x30\xcc\xee\x0d\x0b\x0f\x9f\x11\x1c\xb4\x91\xb7\x78\x1c\xe7\x81\x1c\x0a\xf2\xb1\xf1\x27\xda\x3b\x21\x6f\x93\x60\x95\xc3\x9f\xe4\x04\xc0\xed\x16\xb5\xa4\x30\xbc\xf4\xb9\xde\x61\x51\xd9\xb6\x36\x36\xca\x7b\xf7\x79\x70\xb7\xd7\xd4\x73\x0a\xd6\xb8\xea\xfe\x21\xbf\xf7\xb6\x2a\xb1\x3d\xf6\x6f\x50\x46\xaf\xc0\x38\x90\x32\x00\x7b\xf8\x82\xa0\x95\x03\x56\x5b\xb4\x35\x54\x8c\xb0\x25\x5f\x26\xac\x29\xce\x0a\x98\x52\xdd\x22\x83\x72\xc5\x89\x27\x20\x54\x45\xe2\x9d\xad\x21\x1e\x4e\x19\x87\xc4\x83\xef\x6e\x34\x13\x21\x65\x48\x0a\x43\xad\x3c\x2c\x83\xd4\x73\x43\x29\x7c\xfd\xf6\x10\x7c\xac\x4d\x9f\x14\xbf\x78\x7b\xd0\x88\x48\x61\x78\xf4\x35\xbf\xce\xd7\xd9\xc5\x66\x9e\x7d\x98\x5e\x9d\xaf\x37\xab\xec\xe3\xa7\x7c\xbd\xba\xfe\x76\x44\xca\xe9\x1d\xd2\x49\x69\x88\x3c\x61\x91\xf4\xa9\xd2\xfd\xe8\xf8\xdd\xf1\xe4\xd1\x68\x45\xb7\xbd\x59\x48\x12\x8d\x24\x51\xf9\xd9\x89\x94\xa1\x97\x61\xd4\x15\x61\x12\x3c\xc9\xd9\x78\x34\x39\x1d\xf5\xb2\xd1\x7f\x8b\x92\x04\xc2\x2d\x52\x6c\xad\x8a\x82\x90\x39\x89\x1f\x2f\x9f\x1d\x7d\x5d\xae\xb2\x0f\xd9\x6a\x95\xcd\x37\xd3\xf9\x7c\x95\xe5\xf9\x66\x7d\xbd\xcc\xf2\x6f\x47\x2f\xf2\x54\x8c\xcd\xb8\xb3\x28\xa9\xf8\xd0\xb6\x07\x6c\x4e\x96\x10\xb2\xb7\x55\x1c\xea\xb3\xf1\x29\xf7\x10\x62\x39\xd1\x26\xec\x90\x12\xae\x8c\x20\x9f\xad\xcf\xf3\x4d\x36\x9b\x2f\xb2\xf8\xce\xa7\x9b\xbf\x3e\xad\x17\x9b\x69\x96\x6f\x26\xa7\x6f\x37\x1f\x67\x17\x9b\x7c\x31\x7d\xf3\xfe\x8f\xdf\x1f\x71\xab\x9f\x42\x3d\x61\x1b\x4f\xde\x7f\xc7\x4d\x4e\xdf\xbe\xc6\xf6\x2a\xaa\xc3\x36\x5b\x4c\x67\x8b\xe9\x64\xb4\x59\x7e\x3e\xbf\x1e\xbf\x19\x9d\xbe\x44\xf6\x0c\xd4\xba\x10\xcd\xa9\x48\x63\xe7\x8e\x63\xf0\xef\x0a\x59\x7a\x31\x00\x1d\xaa\x14\xc6\xa3\x51\xd9\x8b\x96\x58\x7a\xaa\x53\x78\x37\xba\x30\x6d\x22\x5e\x45\x6f\x6a\x9a\xa9\xdd\x89\x04\xee\x54\xb7\xf3\xbd\xf4\x24\x91\xbb\x3b\x32\xf1\x37\xe7\xc5\x6b\x6f\x53\x58\xcf\x96\x1d\xc5\xaa\x30\x0e\x99\x97\xe4\x6f\xb0\x2b\x31\xd2\x7f\x44\xe9\xab\x0e\x4a\x76\x29\x9c\xc4\xaa\xfa\x9f\x7e\xe6\xd0\xf4\xa9\x26\x00\xd6\x3b\x8c\x6a\x17\xeb\xf5\x32\xef\x64\x8c\x33\x62\x94\x9d\xa3\x55\x75\x8e\xda\xbb\x82\x9b\x4d\xd4\x12\x22\x19\x5f\xb4\xa9\x49\x27\x25\xa6\x44\x5f\x49\x9b\x1b\x77\x72\x5c\x69\x8d\xcc\xeb\x1d\x21\xef\xbc\x2d\xfa\xd9\xad\x32\xb6\x22\xec\x64\xdf\xb4\x59\x6b\xf6\xf8\x9f\x9d\x88\x45\xbf\xc0\x88\xb7\x3f\x70\x62\x3c\xfa\xe5\x56\x1c\x7e\x3d\x71\x25\x7a\x27\x78\x2f\xfd\x69\x56\x45\xdc\x56\x2b\xef\xe5\x83\xb1\xd8\x6c\xca\x14\x84\x2a\xec\xc2\x2a\x37\xe5\x4b\xef\x22\xec\xe5\xe4\x15\x23\x1d\xbe\x80\xee\x71\x94\xb5\xfe\xcb\x92\xcc\xde\x58\xbc\xc5\x8c\xb5\xb2\x87\x05\x9a\xc2\x56\x59\x7e\xe4\x68\xf6\xcb\x45\x5c\x2a\x2f\x7c\x19\x4f\x97\x01\x34\xeb\x67\xd9\x5c\x59\xfc\xcf\xfe\x1b\x00\x00\xff\xff\x10\x38\xb1\xa8\xfc\x09\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3f\x4b\x04\x31\x10\xc5\xfb\x7c\x8a\x61\xfb\x28\xe2\x15\x92\x56\xb1\x13\x16\x4e\xec\xe7\x72\x4f\x0d\x9b\x6c\xc2\xcc\xec\xc2\x7e\x7b\xd9\xdc\x59\x1c\x5c\x97\xbc\x79\x7f\x7e\xde\x7b\xc7\x2d\x7d\x41\x34\xd5\x39\xd0\xfa\xe4\xa6\x34\x9f\x03\x1d\x21\x6b\x8a\x70\x05\xc6\x67\x36\x0e\x8e\x68\xe6\x82\x40\x05\x26\x29\xaa\x57\xc8\x0a\xb9\xca\xda\x38\x22\xd0\xb4\x9c\xe0\x75\x53\x43\x71\x44\x99\x4f\xc8\xba\x27\xa9\x5f\x64\x86\x41\x1f\x52\x7d\xbc\x34\x0d\x1f\x37\x55\xc3\x1d\x63\xcc\x8b\x1a\xa4\x3b\xd2\xbe\x30\x98\x2c\x18\x9c\x36\xc4\xbd\x58\x91\x11\xad\xca\x75\xe4\x45\x3d\xb7\x76\x87\xb1\x55\xb1\x4e\xe2\xfb\x33\xd0\xe1\xf0\xdc\x23\x17\x92\x5f\xb3\xa6\xfd\xdf\xa4\x5a\x8d\x35\x07\xfa\x7c\x1d\xbb\x62\x2c\x3f\xb0\xb1\xa7\xfe\x7d\xa9\xbd\x73\x49\x79\x1b\x6b\x4e\x71\x0b\x34\x0a\xbe\x21\x6f\x0b\xe7\xa3\x71\x9c\xdc\x5f\x00\x00\x00\xff\xff\x7b\xf5\x71\x2a\x57\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x4b\xc4\x30\x10\x85\xef\xf9\x15\xc3\xde\xd3\xc5\x9b\xe4\xa6\x1e\xbc\xaf\xe0\x3d\x4d\x9f\xbb\x63\xdb\xa4\xcc\x4c\x2a\xfa\xeb\xa5\xb6\x2a\xb8\xb0\x2c\x78\x4a\x98\xe4\x7d\x8f\xf9\xbc\xf7\x2e\x4e\xfc\x0c\x51\x2e\x39\x90\xb4\x31\x35\xb1\xda\xa9\x08\x7f\x44\xe3\x92\x9b\xfe\x56\x1b\x2e\xfb\xf9\xc6\xf5\x9c\xbb\x40\x0f\x43\x55\x83\x1c\xca\x00\x37\xc2\x62\x17\x2d\x06\x47\x94\xe3\x88\x40\xfa\xae\x86\x31\x8c\x30\xe1\xa4\x5e\x21\x33\xc4\x49\x1d\xa0\xc1\x79\x8a\x13\x3f\x4a\xa9\x93\x2e\x09\x4f\xbb\x9d\x23\x12\x68\xa9\x92\xb0\xcd\x72\xe9\xa0\xfb\x0d\xe0\x88\x66\x48\xbb\x3d\x1d\x61\xd7\x31\xa6\xd2\xe9\x2f\xec\x1c\xb2\x9c\x03\xeb\x7a\x79\x8b\x96\x4e\xee\x7f\x26\xee\x39\x77\x9c\x8f\xd7\x0b\x29\x03\x0e\x78\x59\xbe\x7d\xaf\x73\xa1\xd2\x11\x9d\xbb\xbf\x5c\xa0\xb5\x7d\x45\xb2\x2f\xe9\x6b\xf6\x09\x32\x73\xc2\x5d\x4a\xa5\x66\xfb\x89\xff\xc9\xad\x63\x9d\x62\x42\xa0\xbe\xb6\xf0\x2b\xdf\x7d\x06\x00\x00\xff\xff\xdb\x55\x9e\x61\x2a\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4f\x8f\xd3\x30\x10\xc5\xef\xfe\x14\xd6\xde\xdd\x15\xe2\x82\x72\x84\x03\xf7\x95\xe0\xee\xd8\x43\x77\x88\xe3\xb1\x66\xec\xac\x96\x4f\x8f\xd2\xa4\x85\x34\xf1\xd2\x40\x39\xb5\xb5\xec\xf7\x9b\x3f\xef\xd5\x26\xfc\x0a\x2c\x48\xb1\xd1\xdc\x5a\x77\xb0\x25\x3f\x13\xe3\x0f\x9b\x91\xe2\xa1\xfb\x20\x07\xa4\xc7\xe1\x9d\xea\x30\xfa\x46\x7f\x0a\x45\x32\xf0\x13\x05\xf8\x88\xd1\x63\x3c\xaa\x1e\xb2\xf5\x36\xdb\x46\x69\x1d\x6d\x0f\x8d\xee\x4a\x0b\xc6\x26\x14\xe0\x01\xd8\x8c\x3f\x03\x64\x63\x7d\x8f\x51\x31\x05\x78\x82\x6f\xe3\x6d\x9b\xf0\x33\x53\x49\x6f\x90\x95\xd6\x2b\xf0\x85\x23\xaf\x92\xa1\x6f\x2e\xfa\x09\x67\x86\x94\xf6\x3b\xb8\x2c\x8d\x32\xbb\x20\x5f\x04\xb8\xd2\x85\x52\xc6\x18\xf5\xf7\xd3\xda\x18\xd3\xb9\xfc\xf7\x62\x1c\xc5\xcc\x14\x02\xb0\xe2\x12\x60\x51\xb8\x8c\x2f\x8c\x7e\x78\x50\x5a\x33\x08\x15\x76\x30\x9f\x45\xf2\x20\x4a\xeb\x01\xb8\x9d\x8f\x8e\x90\x4f\x9f\x01\x65\xfa\xf2\x62\xb3\x7b\xde\x21\xf7\x28\xd9\xe6\x72\xa5\x9a\x76\x88\xd8\x1e\x24\x59\x77\x5d\xd8\x1f\x0b\x8a\x90\x5f\x88\x3b\x8c\xc7\x79\x8e\x5b\xe2\xd3\x9d\x44\x01\x1d\x9e\x08\x46\xbb\x69\xc8\x0e\x3d\xef\x45\x6e\x10\x20\xfa\x44\x18\xf3\xa4\x9d\xc8\xd7\x34\xcf\x83\xae\x69\x7b\x14\x47\x03\xf0\x6b\xbd\x9b\x0b\x2b\x60\x7d\x5c\x4b\xce\x3f\xba\xb0\x9e\xd9\x8a\x19\xef\x1f\xd6\x25\xe0\x57\x52\xc7\x1e\x6f\x63\x5c\xa5\xf5\x6d\xc0\xfd\x63\xfb\xbb\xdf\xcc\x18\x99\x6a\x64\x57\x8e\x5e\x5b\xe0\x66\xf3\xfe\xb7\xc5\x6f\xb4\x73\xbf\xa5\xaf\xc5\x97\x0b\x9f\x5e\x9e\x10\xeb\x4d\x9e\xff\xdd\x6e\x2b\xe3\x67\x00\x00\x00\xff\xff\x99\x4e\xc0\xe4\xc9\x06\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _runtimesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd0\x31\x8e\x84\x30\x0c\x05\xd0\x3e\xa7\xc8\x05\xc2\x6a\xbb\x55\xda\xbd\xc1\x14\xd3\x5b\xc4\x02\x8b\xc4\xa0\x38\xc0\x1c\x7f\x04\x1a\x26\x40\xed\xf2\x7f\x4b\xef\x4b\x86\x89\x9e\x98\x85\x46\xf6\x96\xc7\x80\xcd\xf0\x27\x0d\x8d\x3f\xcb\xaf\x19\x88\x83\xb7\x8f\x99\x0b\x25\xfc\x8f\x20\x62\x12\x16\x08\x50\xc0\x1b\x6b\x19\x12\x7a\xcb\x0b\x05\x02\xd3\x03\x87\x88\xf9\x9b\x9d\x73\x46\x87\x76\xf8\x9a\x30\x53\x42\x2e\x10\xef\x3b\xd7\xa3\xc6\x68\x9b\x67\xae\x2b\x7b\xd2\x60\xe3\xcc\x50\xa8\xad\xf2\x51\x68\xe0\x12\xa9\xeb\x4b\xb5\x3f\x59\x85\x9e\xe8\xf4\x8e\x3d\x69\xb0\xeb\x2a\x55\xdd\x82\x0a\x0a\x92\x30\x74\x78\x92\x8f\x46\x8d\xcf\x37\x3c\xab\xd1\xdb\xfd\x8a\x6f\xcd\x3b\x00\x00\xff\xff\xc7\xad\x48\x21\x9f\x03\x00\x00")

func runtimesYamlBytes() ([]byte, error) {
	return bindataRead(
		_runtimesYaml,
		"runtimes.yaml",
	)
}

func runtimesYaml() (*asset, error) {
	bytes, err := runtimesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "runtimes.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\x4d\x6f\xdb\x3c\x0c\x80\xef\xfe\x15\x84\x81\x9c\x5e\xc8\xee\xc7\x8b\xa1\xf0\x2d\x4b\xdd\xad\xd8\xd6\x15\x71\xba\xa1\xa7\x40\x91\x98\x58\x88\x2c\x09\x14\x1d\xcc\xeb\xfa\xdf\x07\x39\x69\x9b\x02\x1b\x76\xd9\x6e\x36\x45\x3e\x24\x1f\x0a\x21\x32\x19\xcc\x17\xa4\x68\xbc\xab\xa0\x45\xdb\x15\x4a\x32\x5b\x2c\x8c\x2f\x77\xa7\xd9\xd6\x38\x5d\xc1\x7b\xb4\xdd\xac\x95\xc4\x59\x87\x2c\xb5\x64\x59\x65\x00\x4e\x76\x58\x01\x93\xc4\xb5\xd9\x0a\x45\xfa\x10\x8b\x41\x2a\xac\x60\xdb\xaf\x50\xc4\x21\x32\x76\x59\x0c\xa8\x52\x89\x4a\x90\x0a\x5a\xe6\x10\xab\xb2\x9c\x3c\x7c\xb8\x7b\x5b\xcf\x6f\xea\x45\xdd\x2c\xa7\xb7\xd7\x8f\x93\x32\xb2\x64\xa3\xca\x31\x31\x96\x47\x70\x71\xfe\x7f\x71\x56\x9c\xfe\xd7\x87\xf1\xe3\xa4\xe0\xcd\xf7\xec\x2f\x2e\xf0\xef\x86\xff\xd5\xe0\x00\x11\x39\x41\x01\x36\xd6\xaf\xa4\x2d\xf6\xcd\x2e\x71\x2d\x7b\xcb\x73\xdc\x98\xc8\x34\x54\x90\x4f\x1e\x9a\xfb\x66\x51\x7f\x5a\x5e\xd6\x57\xd3\xbb\x8f\x8b\xe5\xbc\x7e\x77\xdd\x2c\xe6\xf7\xcb\xf9\xf4\xeb\xe3\x24\xcf\x00\x76\xd2\xf6\x18\x67\xde\x31\x3a\xae\xe0\x87\x18\xb9\x1a\x83\xf5\x43\x97\x42\xe3\x3f\x40\xf0\x7a\xea\x9c\x4f\x43\x7a\x17\x9f\xa2\x00\x81\x7c\x87\xdc\x62\x1f\x93\xb4\xe0\xd3\x96\xf9\xc5\xc9\xc5\x59\xfe\x9b\x94\xa8\x48\x06\xac\x20\x67\xea\x71\x9f\x14\xc8\xef\x8c\x46\x7a\xc6\x26\x83\xe4\x90\x31\x5e\xbb\x0d\x61\x3c\xee\xd7\xaf\xac\x89\x2d\xea\x06\x69\x67\x14\xbe\xbc\x00\xa0\x93\x2b\x8b\x3a\x9d\xa5\xc7\x03\xd9\x78\x32\x3c\xcc\xac\x8c\xf1\x66\x3c\x59\xbe\x97\x25\x94\xed\x23\x23\x09\x45\x86\x8d\x92\x76\x3f\x8a\xe9\xe4\xe6\x99\x49\x18\x7c\x34\xec\x47\x97\x24\x9d\x6a\x91\xca\xce\x10\x79\x42\x2d\xac\x59\x91\xa4\x41\x1c\x4e\xf5\xb4\x2f\xcb\x4d\x05\xf9\x79\x71\x5e\xbc\xd9\x87\xd8\x5b\xa4\x63\x6d\x02\xb6\x98\x88\xb3\x43\xe7\xa9\xd6\xde\xc5\xcf\xce\x0e\x4f\x0c\x1f\x52\x85\xa7\x0a\xf2\xfa\x9b\x89\x1c\xf3\x57\x85\xce\x6b\x14\xe4\x2d\x16\x2f\xa2\x92\x5a\xe5\x1d\x93\xb7\x22\x58\xe9\xf0\x0f\x2c\x00\x5c\xaf\x51\xa5\x6b\xdd\xf8\x46\xb5\xa8\x7b\x7b\xa8\x89\xaf\xcd\x9a\x70\x25\x3b\x63\x87\x5b\x6f\x8d\x4a\xed\x6f\x09\xd7\x48\x97\xbd\xb4\x0d\x4b\xb5\xcd\xb3\x9f\x01\x00\x00\xff\xff\xaf\xe7\x6e\xc9\x0b\x04\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"runtimes.yaml":                                 runtimesYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"runtimes.yaml":     &bintree{runtimesYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
